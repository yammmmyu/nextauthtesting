"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@auth";
exports.ids = ["vendor-chunks/@auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/@auth/pg-adapter/index.js":
/*!************************************************!*\
  !*** ./node_modules/@auth/pg-adapter/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PostgresAdapter),\n/* harmony export */   mapExpiresAt: () => (/* binding */ mapExpiresAt)\n/* harmony export */ });\n/**\n * <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: 16}}>\n *  <p style={{fontWeight: \"normal\"}}>An official <a href=\"https://www.postgresql.org/\">PostgreSQL</a> adapter for Auth.js / NextAuth.js.</p>\n *  <a href=\"https://www.postgresql.org/\">\n *   <img style={{display: \"block\"}} src=\"/img/adapters/pg.png\" width=\"48\" />\n *  </a>\n * </div>\n *\n * ## Installation\n *\n * ```bash npm2yarn\n * npm install next-auth @auth/pg-adapter pg\n * ```\n *\n * @module @auth/pg-adapter\n */ function mapExpiresAt(account) {\n    const expires_at = parseInt(account.expires_at);\n    return {\n        ...account,\n        expires_at\n    };\n}\n/**\n * ## Setup\n *\n * The SQL schema for the tables used by this adapter is as follows. Learn more about the models at our doc page on [Database Models](https://authjs.dev/getting-started/adapters#models).\n *\n * ```sql\n * CREATE TABLE verification_token\n * (\n *   identifier TEXT NOT NULL,\n *   expires TIMESTAMPTZ NOT NULL,\n *   token TEXT NOT NULL,\n *\n *   PRIMARY KEY (identifier, token)\n * );\n *\n * CREATE TABLE accounts\n * (\n *   id SERIAL,\n *   \"userId\" INTEGER NOT NULL,\n *   type VARCHAR(255) NOT NULL,\n *   provider VARCHAR(255) NOT NULL,\n *   \"providerAccountId\" VARCHAR(255) NOT NULL,\n *   refresh_token TEXT,\n *   access_token TEXT,\n *   expires_at BIGINT,\n *   id_token TEXT,\n *   scope TEXT,\n *   session_state TEXT,\n *   token_type TEXT,\n *\n *   PRIMARY KEY (id)\n * );\n *\n * CREATE TABLE sessions\n * (\n *   id SERIAL,\n *   \"userId\" INTEGER NOT NULL,\n *   expires TIMESTAMPTZ NOT NULL,\n *   \"sessionToken\" VARCHAR(255) NOT NULL,\n *\n *   PRIMARY KEY (id)\n * );\n *\n * CREATE TABLE users\n * (\n *   id SERIAL,\n *   name VARCHAR(255),\n *   email VARCHAR(255),\n *   \"emailVerified\" TIMESTAMPTZ,\n *   image TEXT,\n *\n *   PRIMARY KEY (id)\n * );\n *\n * ```\n *\n * ```typescript title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GoogleProvider from \"next-auth/providers/google\"\n * import PostgresAdapter from \"@auth/pg-adapter\"\n * import { Pool } from 'pg'\n *\n * const pool = new Pool({\n *   host: 'localhost',\n *   user: 'database-user',\n *   max: 20,\n *   idleTimeoutMillis: 30000,\n *   connectionTimeoutMillis: 2000,\n * })\n *\n * export default NextAuth({\n *   adapter: PostgresAdapter(pool),\n *   providers: [\n *     GoogleProvider({\n *       clientId: process.env.GOOGLE_CLIENT_ID,\n *       clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n *     }),\n *   ],\n * })\n * ```\n *\n */ function PostgresAdapter(client) {\n    return {\n        async createVerificationToken (verificationToken) {\n            const { identifier, expires, token } = verificationToken;\n            const sql = `\n        INSERT INTO verification_token ( identifier, expires, token ) \n        VALUES ($1, $2, $3)\n        `;\n            await client.query(sql, [\n                identifier,\n                expires,\n                token\n            ]);\n            return verificationToken;\n        },\n        async useVerificationToken ({ identifier, token }) {\n            const sql = `delete from verification_token\n      where identifier = $1 and token = $2\n      RETURNING identifier, expires, token `;\n            const result = await client.query(sql, [\n                identifier,\n                token\n            ]);\n            return result.rowCount !== 0 ? result.rows[0] : null;\n        },\n        async createUser (user) {\n            const { name, email, emailVerified, image } = user;\n            const sql = `\n        INSERT INTO users (name, email, \"emailVerified\", image) \n        VALUES ($1, $2, $3, $4) \n        RETURNING id, name, email, \"emailVerified\", image`;\n            const result = await client.query(sql, [\n                name,\n                email,\n                emailVerified,\n                image\n            ]);\n            return result.rows[0];\n        },\n        async getUser (id) {\n            const sql = `select * from users where id = $1`;\n            try {\n                const result = await client.query(sql, [\n                    id\n                ]);\n                return result.rowCount === 0 ? null : result.rows[0];\n            } catch (e) {\n                return null;\n            }\n        },\n        async getUserByEmail (email) {\n            const sql = `select * from users where email = $1`;\n            const result = await client.query(sql, [\n                email\n            ]);\n            return result.rowCount !== 0 ? result.rows[0] : null;\n        },\n        async getUserByAccount ({ providerAccountId, provider }) {\n            const sql = `\n          select u.* from users u join accounts a on u.id = a.\"userId\"\n          where \n          a.provider = $1 \n          and \n          a.\"providerAccountId\" = $2`;\n            const result = await client.query(sql, [\n                provider,\n                providerAccountId\n            ]);\n            return result.rowCount !== 0 ? result.rows[0] : null;\n        },\n        async updateUser (user) {\n            const fetchSql = `select * from users where id = $1`;\n            const query1 = await client.query(fetchSql, [\n                user.id\n            ]);\n            const oldUser = query1.rows[0];\n            const newUser = {\n                ...oldUser,\n                ...user\n            };\n            const { id, name, email, emailVerified, image } = newUser;\n            const updateSql = `\n        UPDATE users set\n        name = $2, email = $3, \"emailVerified\" = $4, image = $5\n        where id = $1\n        RETURNING name, id, email, \"emailVerified\", image\n      `;\n            const query2 = await client.query(updateSql, [\n                id,\n                name,\n                email,\n                emailVerified,\n                image\n            ]);\n            return query2.rows[0];\n        },\n        async linkAccount (account) {\n            const sql = `\n      insert into accounts \n      (\n        \"userId\", \n        provider, \n        type, \n        \"providerAccountId\", \n        access_token,\n        expires_at,\n        refresh_token,\n        id_token,\n        scope,\n        session_state,\n        token_type\n      )\n      values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n      returning\n        id,\n        \"userId\", \n        provider, \n        type, \n        \"providerAccountId\", \n        access_token,\n        expires_at,\n        refresh_token,\n        id_token,\n        scope,\n        session_state,\n        token_type\n      `;\n            const params = [\n                account.userId,\n                account.provider,\n                account.type,\n                account.providerAccountId,\n                account.access_token,\n                account.expires_at,\n                account.refresh_token,\n                account.id_token,\n                account.scope,\n                account.session_state,\n                account.token_type\n            ];\n            const result = await client.query(sql, params);\n            return mapExpiresAt(result.rows[0]);\n        },\n        async createSession ({ sessionToken, userId, expires }) {\n            if (userId === undefined) {\n                throw Error(`userId is undef in createSession`);\n            }\n            const sql = `insert into sessions (\"userId\", expires, \"sessionToken\")\n      values ($1, $2, $3)\n      RETURNING id, \"sessionToken\", \"userId\", expires`;\n            const result = await client.query(sql, [\n                userId,\n                expires,\n                sessionToken\n            ]);\n            return result.rows[0];\n        },\n        async getSessionAndUser (sessionToken) {\n            if (sessionToken === undefined) {\n                return null;\n            }\n            const result1 = await client.query(`select * from sessions where \"sessionToken\" = $1`, [\n                sessionToken\n            ]);\n            if (result1.rowCount === 0) {\n                return null;\n            }\n            let session = result1.rows[0];\n            const result2 = await client.query(\"select * from users where id = $1\", [\n                session.userId\n            ]);\n            if (result2.rowCount === 0) {\n                return null;\n            }\n            const user = result2.rows[0];\n            return {\n                session,\n                user\n            };\n        },\n        async updateSession (session) {\n            const { sessionToken } = session;\n            const result1 = await client.query(`select * from sessions where \"sessionToken\" = $1`, [\n                sessionToken\n            ]);\n            if (result1.rowCount === 0) {\n                return null;\n            }\n            const originalSession = result1.rows[0];\n            const newSession = {\n                ...originalSession,\n                ...session\n            };\n            const sql = `\n        UPDATE sessions set\n        expires = $2\n        where \"sessionToken\" = $1\n        `;\n            const result = await client.query(sql, [\n                newSession.sessionToken,\n                newSession.expires\n            ]);\n            return result.rows[0];\n        },\n        async deleteSession (sessionToken) {\n            const sql = `delete from sessions where \"sessionToken\" = $1`;\n            await client.query(sql, [\n                sessionToken\n            ]);\n        },\n        async unlinkAccount (partialAccount) {\n            const { provider, providerAccountId } = partialAccount;\n            const sql = `delete from accounts where \"providerAccountId\" = $1 and provider = $2`;\n            await client.query(sql, [\n                providerAccountId,\n                provider\n            ]);\n        },\n        async deleteUser (userId) {\n            await client.query(`delete from users where id = $1`, [\n                userId\n            ]);\n            await client.query(`delete from sessions where \"userId\" = $1`, [\n                userId\n            ]);\n            await client.query(`delete from accounts where \"userId\" = $1`, [\n                userId\n            ]);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@auth/pg-adapter/index.js\n");

/***/ })

};
;