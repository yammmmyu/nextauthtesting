"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@neondatabase";
exports.ids = ["vendor-chunks/@neondatabase"];
exports.modules = {

/***/ "(rsc)/./node_modules/@neondatabase/serverless/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@neondatabase/serverless/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ xn),\n/* harmony export */   ClientBase: () => (/* binding */ export_ClientBase),\n/* harmony export */   Connection: () => (/* binding */ export_Connection),\n/* harmony export */   DatabaseError: () => (/* binding */ export_DatabaseError),\n/* harmony export */   NeonDbError: () => (/* binding */ Ae),\n/* harmony export */   Pool: () => (/* binding */ Zs),\n/* harmony export */   Query: () => (/* binding */ export_Query),\n/* harmony export */   defaults: () => (/* binding */ export_defaults),\n/* harmony export */   neon: () => (/* binding */ Ys),\n/* harmony export */   neonConfig: () => (/* binding */ _e),\n/* harmony export */   types: () => (/* binding */ export_types)\n/* harmony export */ });\nvar Xs = Object.create;\nvar Ie = Object.defineProperty;\nvar eo = Object.getOwnPropertyDescriptor;\nvar to = Object.getOwnPropertyNames;\nvar ro = Object.getPrototypeOf, no = Object.prototype.hasOwnProperty;\nvar io = (r, e, t)=>e in r ? Ie(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t;\nvar a = (r, e)=>Ie(r, \"name\", {\n        value: e,\n        configurable: !0\n    });\nvar K = (r, e)=>()=>(r && (e = r(r = 0)), e);\nvar I = (r, e)=>()=>(e || r((e = {\n            exports: {}\n        }).exports, e), e.exports), X = (r, e)=>{\n    for(var t in e)Ie(r, t, {\n        get: e[t],\n        enumerable: !0\n    });\n}, _n = (r, e, t, n)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let i of to(e))!no.call(r, i) && i !== t && Ie(r, i, {\n        get: ()=>e[i],\n        enumerable: !(n = eo(e, i)) || n.enumerable\n    });\n    return r;\n};\nvar We = (r, e, t)=>(t = r != null ? Xs(ro(r)) : {}, _n(e || !r || !r.__esModule ? Ie(t, \"default\", {\n        value: r,\n        enumerable: !0\n    }) : t, r)), k = (r)=>_n(Ie({}, \"__esModule\", {\n        value: !0\n    }), r);\nvar T = (r, e, t)=>(io(r, typeof e != \"symbol\" ? e + \"\" : e, t), t);\nvar In = I((it)=>{\n    \"use strict\";\n    p();\n    it.byteLength = oo;\n    it.toByteArray = uo;\n    it.fromByteArray = lo;\n    var oe = [], ee = [], so = typeof Uint8Array < \"u\" ? Uint8Array : Array, It = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(Ee = 0, An = It.length; Ee < An; ++Ee)oe[Ee] = It[Ee], ee[It.charCodeAt(Ee)] = Ee;\n    var Ee, An;\n    ee[45] = 62;\n    ee[95] = 63;\n    function Cn(r) {\n        var e = r.length;\n        if (e % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        var t = r.indexOf(\"=\");\n        t === -1 && (t = e);\n        var n = t === e ? 0 : 4 - t % 4;\n        return [\n            t,\n            n\n        ];\n    }\n    a(Cn, \"getLens\");\n    function oo(r) {\n        var e = Cn(r), t = e[0], n = e[1];\n        return (t + n) * 3 / 4 - n;\n    }\n    a(oo, \"byteLength\");\n    function ao(r, e, t) {\n        return (e + t) * 3 / 4 - t;\n    }\n    a(ao, \"_byteLength\");\n    function uo(r) {\n        var e, t = Cn(r), n = t[0], i = t[1], s = new so(ao(r, n, i)), o = 0, u = i > 0 ? n - 4 : n, c;\n        for(c = 0; c < u; c += 4)e = ee[r.charCodeAt(c)] << 18 | ee[r.charCodeAt(c + 1)] << 12 | ee[r.charCodeAt(c + 2)] << 6 | ee[r.charCodeAt(c + 3)], s[o++] = e >> 16 & 255, s[o++] = e >> 8 & 255, s[o++] = e & 255;\n        return i === 2 && (e = ee[r.charCodeAt(c)] << 2 | ee[r.charCodeAt(c + 1)] >> 4, s[o++] = e & 255), i === 1 && (e = ee[r.charCodeAt(c)] << 10 | ee[r.charCodeAt(c + 1)] << 4 | ee[r.charCodeAt(c + 2)] >> 2, s[o++] = e >> 8 & 255, s[o++] = e & 255), s;\n    }\n    a(uo, \"toByteArray\");\n    function co(r) {\n        return oe[r >> 18 & 63] + oe[r >> 12 & 63] + oe[r >> 6 & 63] + oe[r & 63];\n    }\n    a(co, \"tripletToBase64\");\n    function ho(r, e, t) {\n        for(var n, i = [], s = e; s < t; s += 3)n = (r[s] << 16 & 16711680) + (r[s + 1] << 8 & 65280) + (r[s + 2] & 255), i.push(co(n));\n        return i.join(\"\");\n    }\n    a(ho, \"encodeChunk\");\n    function lo(r) {\n        for(var e, t = r.length, n = t % 3, i = [], s = 16383, o = 0, u = t - n; o < u; o += s)i.push(ho(r, o, o + s > u ? u : o + s));\n        return n === 1 ? (e = r[t - 1], i.push(oe[e >> 2] + oe[e << 4 & 63] + \"==\")) : n === 2 && (e = (r[t - 2] << 8) + r[t - 1], i.push(oe[e >> 10] + oe[e >> 4 & 63] + oe[e << 2 & 63] + \"=\")), i.join(\"\");\n    }\n    a(lo, \"fromByteArray\");\n});\nvar Tn = I((Tt)=>{\n    p();\n    Tt.read = function(r, e, t, n, i) {\n        var s, o, u = i * 8 - n - 1, c = (1 << u) - 1, h = c >> 1, l = -7, y = t ? i - 1 : 0, E = t ? -1 : 1, _ = r[e + y];\n        for(y += E, s = _ & (1 << -l) - 1, _ >>= -l, l += u; l > 0; s = s * 256 + r[e + y], y += E, l -= 8);\n        for(o = s & (1 << -l) - 1, s >>= -l, l += n; l > 0; o = o * 256 + r[e + y], y += E, l -= 8);\n        if (s === 0) s = 1 - h;\n        else {\n            if (s === c) return o ? NaN : (_ ? -1 : 1) * (1 / 0);\n            o = o + Math.pow(2, n), s = s - h;\n        }\n        return (_ ? -1 : 1) * o * Math.pow(2, s - n);\n    };\n    Tt.write = function(r, e, t, n, i, s) {\n        var o, u, c, h = s * 8 - i - 1, l = (1 << h) - 1, y = l >> 1, E = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, _ = n ? 0 : s - 1, P = n ? 1 : -1, N = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;\n        for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (u = isNaN(e) ? 1 : 0, o = l) : (o = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -o)) < 1 && (o--, c *= 2), o + y >= 1 ? e += E / c : e += E * Math.pow(2, 1 - y), e * c >= 2 && (o++, c /= 2), o + y >= l ? (u = 0, o = l) : o + y >= 1 ? (u = (e * c - 1) * Math.pow(2, i), o = o + y) : (u = e * Math.pow(2, y - 1) * Math.pow(2, i), o = 0)); i >= 8; r[t + _] = u & 255, _ += P, u /= 256, i -= 8);\n        for(o = o << i | u, h += i; h > 0; r[t + _] = o & 255, _ += P, o /= 256, h -= 8);\n        r[t + _ - P] |= N * 128;\n    };\n});\nvar Gn = I((Le)=>{\n    \"use strict\";\n    p();\n    var Pt = In(), Pe = Tn(), Pn = typeof Symbol == \"function\" && typeof Symbol.for == \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null;\n    Le.Buffer = f;\n    Le.SlowBuffer = wo;\n    Le.INSPECT_MAX_BYTES = 50;\n    var st = 2147483647;\n    Le.kMaxLength = st;\n    f.TYPED_ARRAY_SUPPORT = fo();\n    !f.TYPED_ARRAY_SUPPORT && typeof console < \"u\" && typeof console.error == \"function\" && console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n    function fo() {\n        try {\n            let r = new Uint8Array(1), e = {\n                foo: function() {\n                    return 42;\n                }\n            };\n            return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(r, e), r.foo() === 42;\n        } catch  {\n            return !1;\n        }\n    }\n    a(fo, \"typedArraySupport\");\n    Object.defineProperty(f.prototype, \"parent\", {\n        enumerable: !0,\n        get: function() {\n            if (f.isBuffer(this)) return this.buffer;\n        }\n    });\n    Object.defineProperty(f.prototype, \"offset\", {\n        enumerable: !0,\n        get: function() {\n            if (f.isBuffer(this)) return this.byteOffset;\n        }\n    });\n    function le(r) {\n        if (r > st) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n        let e = new Uint8Array(r);\n        return Object.setPrototypeOf(e, f.prototype), e;\n    }\n    a(le, \"createBuffer\");\n    function f(r, e, t) {\n        if (typeof r == \"number\") {\n            if (typeof e == \"string\") throw new TypeError('The \"string\" argument must be of type string. Received type number');\n            return Ft(r);\n        }\n        return Fn(r, e, t);\n    }\n    a(f, \"Buffer\");\n    f.poolSize = 8192;\n    function Fn(r, e, t) {\n        if (typeof r == \"string\") return yo(r, e);\n        if (ArrayBuffer.isView(r)) return mo(r);\n        if (r == null) throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n        if (ae(r, ArrayBuffer) || r && ae(r.buffer, ArrayBuffer) || typeof SharedArrayBuffer < \"u\" && (ae(r, SharedArrayBuffer) || r && ae(r.buffer, SharedArrayBuffer))) return Lt(r, e, t);\n        if (typeof r == \"number\") throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n        let n = r.valueOf && r.valueOf();\n        if (n != null && n !== r) return f.from(n, e, t);\n        let i = go(r);\n        if (i) return i;\n        if (typeof Symbol < \"u\" && Symbol.toPrimitive != null && typeof r[Symbol.toPrimitive] == \"function\") return f.from(r[Symbol.toPrimitive](\"string\"), e, t);\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n    }\n    a(Fn, \"from\");\n    f.from = function(r, e, t) {\n        return Fn(r, e, t);\n    };\n    Object.setPrototypeOf(f.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(f, Uint8Array);\n    function Mn(r) {\n        if (typeof r != \"number\") throw new TypeError('\"size\" argument must be of type number');\n        if (r < 0) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n    }\n    a(Mn, \"assertSize\");\n    function po(r, e, t) {\n        return Mn(r), r <= 0 ? le(r) : e !== void 0 ? typeof t == \"string\" ? le(r).fill(e, t) : le(r).fill(e) : le(r);\n    }\n    a(po, \"alloc\");\n    f.alloc = function(r, e, t) {\n        return po(r, e, t);\n    };\n    function Ft(r) {\n        return Mn(r), le(r < 0 ? 0 : Mt(r) | 0);\n    }\n    a(Ft, \"allocUnsafe\");\n    f.allocUnsafe = function(r) {\n        return Ft(r);\n    };\n    f.allocUnsafeSlow = function(r) {\n        return Ft(r);\n    };\n    function yo(r, e) {\n        if ((typeof e != \"string\" || e === \"\") && (e = \"utf8\"), !f.isEncoding(e)) throw new TypeError(\"Unknown encoding: \" + e);\n        let t = Dn(r, e) | 0, n = le(t), i = n.write(r, e);\n        return i !== t && (n = n.slice(0, i)), n;\n    }\n    a(yo, \"fromString\");\n    function Bt(r) {\n        let e = r.length < 0 ? 0 : Mt(r.length) | 0, t = le(e);\n        for(let n = 0; n < e; n += 1)t[n] = r[n] & 255;\n        return t;\n    }\n    a(Bt, \"fromArrayLike\");\n    function mo(r) {\n        if (ae(r, Uint8Array)) {\n            let e = new Uint8Array(r);\n            return Lt(e.buffer, e.byteOffset, e.byteLength);\n        }\n        return Bt(r);\n    }\n    a(mo, \"fromArrayView\");\n    function Lt(r, e, t) {\n        if (e < 0 || r.byteLength < e) throw new RangeError('\"offset\" is outside of buffer bounds');\n        if (r.byteLength < e + (t || 0)) throw new RangeError('\"length\" is outside of buffer bounds');\n        let n;\n        return e === void 0 && t === void 0 ? n = new Uint8Array(r) : t === void 0 ? n = new Uint8Array(r, e) : n = new Uint8Array(r, e, t), Object.setPrototypeOf(n, f.prototype), n;\n    }\n    a(Lt, \"fromArrayBuffer\");\n    function go(r) {\n        if (f.isBuffer(r)) {\n            let e = Mt(r.length) | 0, t = le(e);\n            return t.length === 0 || r.copy(t, 0, 0, e), t;\n        }\n        if (r.length !== void 0) return typeof r.length != \"number\" || Ot(r.length) ? le(0) : Bt(r);\n        if (r.type === \"Buffer\" && Array.isArray(r.data)) return Bt(r.data);\n    }\n    a(go, \"fromObject\");\n    function Mt(r) {\n        if (r >= st) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + st.toString(16) + \" bytes\");\n        return r | 0;\n    }\n    a(Mt, \"checked\");\n    function wo(r) {\n        return +r != r && (r = 0), f.alloc(+r);\n    }\n    a(wo, \"SlowBuffer\");\n    f.isBuffer = a(function(e) {\n        return e != null && e._isBuffer === !0 && e !== f.prototype;\n    }, \"isBuffer\");\n    f.compare = a(function(e, t) {\n        if (ae(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), ae(t, Uint8Array) && (t = f.from(t, t.offset, t.byteLength)), !f.isBuffer(e) || !f.isBuffer(t)) throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n        if (e === t) return 0;\n        let n = e.length, i = t.length;\n        for(let s = 0, o = Math.min(n, i); s < o; ++s)if (e[s] !== t[s]) {\n            n = e[s], i = t[s];\n            break;\n        }\n        return n < i ? -1 : i < n ? 1 : 0;\n    }, \"compare\");\n    f.isEncoding = a(function(e) {\n        switch(String(e).toLowerCase()){\n            case \"hex\":\n            case \"utf8\":\n            case \"utf-8\":\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n            case \"base64\":\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return !0;\n            default:\n                return !1;\n        }\n    }, \"isEncoding\");\n    f.concat = a(function(e, t) {\n        if (!Array.isArray(e)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        if (e.length === 0) return f.alloc(0);\n        let n;\n        if (t === void 0) for(t = 0, n = 0; n < e.length; ++n)t += e[n].length;\n        let i = f.allocUnsafe(t), s = 0;\n        for(n = 0; n < e.length; ++n){\n            let o = e[n];\n            if (ae(o, Uint8Array)) s + o.length > i.length ? (f.isBuffer(o) || (o = f.from(o)), o.copy(i, s)) : Uint8Array.prototype.set.call(i, o, s);\n            else if (f.isBuffer(o)) o.copy(i, s);\n            else throw new TypeError('\"list\" argument must be an Array of Buffers');\n            s += o.length;\n        }\n        return i;\n    }, \"concat\");\n    function Dn(r, e) {\n        if (f.isBuffer(r)) return r.length;\n        if (ArrayBuffer.isView(r) || ae(r, ArrayBuffer)) return r.byteLength;\n        if (typeof r != \"string\") throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof r);\n        let t = r.length, n = arguments.length > 2 && arguments[2] === !0;\n        if (!n && t === 0) return 0;\n        let i = !1;\n        for(;;)switch(e){\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return t;\n            case \"utf8\":\n            case \"utf-8\":\n                return Rt(r).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return t * 2;\n            case \"hex\":\n                return t >>> 1;\n            case \"base64\":\n                return Hn(r).length;\n            default:\n                if (i) return n ? -1 : Rt(r).length;\n                e = (\"\" + e).toLowerCase(), i = !0;\n        }\n    }\n    a(Dn, \"byteLength\");\n    f.byteLength = Dn;\n    function bo(r, e, t) {\n        let n = !1;\n        if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((t === void 0 || t > this.length) && (t = this.length), t <= 0) || (t >>>= 0, e >>>= 0, t <= e)) return \"\";\n        for(r || (r = \"utf8\");;)switch(r){\n            case \"hex\":\n                return Po(this, e, t);\n            case \"utf8\":\n            case \"utf-8\":\n                return kn(this, e, t);\n            case \"ascii\":\n                return Io(this, e, t);\n            case \"latin1\":\n            case \"binary\":\n                return To(this, e, t);\n            case \"base64\":\n                return Ao(this, e, t);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Bo(this, e, t);\n            default:\n                if (n) throw new TypeError(\"Unknown encoding: \" + r);\n                r = (r + \"\").toLowerCase(), n = !0;\n        }\n    }\n    a(bo, \"slowToString\");\n    f.prototype._isBuffer = !0;\n    function ve(r, e, t) {\n        let n = r[e];\n        r[e] = r[t], r[t] = n;\n    }\n    a(ve, \"swap\");\n    f.prototype.swap16 = a(function() {\n        let e = this.length;\n        if (e % 2 !== 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        for(let t = 0; t < e; t += 2)ve(this, t, t + 1);\n        return this;\n    }, \"swap16\");\n    f.prototype.swap32 = a(function() {\n        let e = this.length;\n        if (e % 4 !== 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        for(let t = 0; t < e; t += 4)ve(this, t, t + 3), ve(this, t + 1, t + 2);\n        return this;\n    }, \"swap32\");\n    f.prototype.swap64 = a(function() {\n        let e = this.length;\n        if (e % 8 !== 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        for(let t = 0; t < e; t += 8)ve(this, t, t + 7), ve(this, t + 1, t + 6), ve(this, t + 2, t + 5), ve(this, t + 3, t + 4);\n        return this;\n    }, \"swap64\");\n    f.prototype.toString = a(function() {\n        let e = this.length;\n        return e === 0 ? \"\" : arguments.length === 0 ? kn(this, 0, e) : bo.apply(this, arguments);\n    }, \"toString\");\n    f.prototype.toLocaleString = f.prototype.toString;\n    f.prototype.equals = a(function(e) {\n        if (!f.isBuffer(e)) throw new TypeError(\"Argument must be a Buffer\");\n        return this === e ? !0 : f.compare(this, e) === 0;\n    }, \"equals\");\n    f.prototype.inspect = a(function() {\n        let e = \"\", t = Le.INSPECT_MAX_BYTES;\n        return e = this.toString(\"hex\", 0, t).replace(/(.{2})/g, \"$1 \").trim(), this.length > t && (e += \" ... \"), \"<Buffer \" + e + \">\";\n    }, \"inspect\");\n    Pn && (f.prototype[Pn] = f.prototype.inspect);\n    f.prototype.compare = a(function(e, t, n, i, s) {\n        if (ae(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), !f.isBuffer(e)) throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);\n        if (t === void 0 && (t = 0), n === void 0 && (n = e ? e.length : 0), i === void 0 && (i = 0), s === void 0 && (s = this.length), t < 0 || n > e.length || i < 0 || s > this.length) throw new RangeError(\"out of range index\");\n        if (i >= s && t >= n) return 0;\n        if (i >= s) return -1;\n        if (t >= n) return 1;\n        if (t >>>= 0, n >>>= 0, i >>>= 0, s >>>= 0, this === e) return 0;\n        let o = s - i, u = n - t, c = Math.min(o, u), h = this.slice(i, s), l = e.slice(t, n);\n        for(let y = 0; y < c; ++y)if (h[y] !== l[y]) {\n            o = h[y], u = l[y];\n            break;\n        }\n        return o < u ? -1 : u < o ? 1 : 0;\n    }, \"compare\");\n    function On(r, e, t, n, i) {\n        if (r.length === 0) return -1;\n        if (typeof t == \"string\" ? (n = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), t = +t, Ot(t) && (t = i ? 0 : r.length - 1), t < 0 && (t = r.length + t), t >= r.length) {\n            if (i) return -1;\n            t = r.length - 1;\n        } else if (t < 0) if (i) t = 0;\n        else return -1;\n        if (typeof e == \"string\" && (e = f.from(e, n)), f.isBuffer(e)) return e.length === 0 ? -1 : Bn(r, e, t, n, i);\n        if (typeof e == \"number\") return e = e & 255, typeof Uint8Array.prototype.indexOf == \"function\" ? i ? Uint8Array.prototype.indexOf.call(r, e, t) : Uint8Array.prototype.lastIndexOf.call(r, e, t) : Bn(r, [\n            e\n        ], t, n, i);\n        throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    a(On, \"bidirectionalIndexOf\");\n    function Bn(r, e, t, n, i) {\n        let s = 1, o = r.length, u = e.length;\n        if (n !== void 0 && (n = String(n).toLowerCase(), n === \"ucs2\" || n === \"ucs-2\" || n === \"utf16le\" || n === \"utf-16le\")) {\n            if (r.length < 2 || e.length < 2) return -1;\n            s = 2, o /= 2, u /= 2, t /= 2;\n        }\n        function c(l, y) {\n            return s === 1 ? l[y] : l.readUInt16BE(y * s);\n        }\n        a(c, \"read\");\n        let h;\n        if (i) {\n            let l = -1;\n            for(h = t; h < o; h++)if (c(r, h) === c(e, l === -1 ? 0 : h - l)) {\n                if (l === -1 && (l = h), h - l + 1 === u) return l * s;\n            } else l !== -1 && (h -= h - l), l = -1;\n        } else for(t + u > o && (t = o - u), h = t; h >= 0; h--){\n            let l = !0;\n            for(let y = 0; y < u; y++)if (c(r, h + y) !== c(e, y)) {\n                l = !1;\n                break;\n            }\n            if (l) return h;\n        }\n        return -1;\n    }\n    a(Bn, \"arrayIndexOf\");\n    f.prototype.includes = a(function(e, t, n) {\n        return this.indexOf(e, t, n) !== -1;\n    }, \"includes\");\n    f.prototype.indexOf = a(function(e, t, n) {\n        return On(this, e, t, n, !0);\n    }, \"indexOf\");\n    f.prototype.lastIndexOf = a(function(e, t, n) {\n        return On(this, e, t, n, !1);\n    }, \"lastIndexOf\");\n    function So(r, e, t, n) {\n        t = Number(t) || 0;\n        let i = r.length - t;\n        n ? (n = Number(n), n > i && (n = i)) : n = i;\n        let s = e.length;\n        n > s / 2 && (n = s / 2);\n        let o;\n        for(o = 0; o < n; ++o){\n            let u = parseInt(e.substr(o * 2, 2), 16);\n            if (Ot(u)) return o;\n            r[t + o] = u;\n        }\n        return o;\n    }\n    a(So, \"hexWrite\");\n    function xo(r, e, t, n) {\n        return ot(Rt(e, r.length - t), r, t, n);\n    }\n    a(xo, \"utf8Write\");\n    function Eo(r, e, t, n) {\n        return ot(Mo(e), r, t, n);\n    }\n    a(Eo, \"asciiWrite\");\n    function vo(r, e, t, n) {\n        return ot(Hn(e), r, t, n);\n    }\n    a(vo, \"base64Write\");\n    function _o(r, e, t, n) {\n        return ot(Do(e, r.length - t), r, t, n);\n    }\n    a(_o, \"ucs2Write\");\n    f.prototype.write = a(function(e, t, n, i) {\n        if (t === void 0) i = \"utf8\", n = this.length, t = 0;\n        else if (n === void 0 && typeof t == \"string\") i = t, n = this.length, t = 0;\n        else if (isFinite(t)) t = t >>> 0, isFinite(n) ? (n = n >>> 0, i === void 0 && (i = \"utf8\")) : (i = n, n = void 0);\n        else throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n        let s = this.length - t;\n        if ((n === void 0 || n > s) && (n = s), e.length > 0 && (n < 0 || t < 0) || t > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n        i || (i = \"utf8\");\n        let o = !1;\n        for(;;)switch(i){\n            case \"hex\":\n                return So(this, e, t, n);\n            case \"utf8\":\n            case \"utf-8\":\n                return xo(this, e, t, n);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return Eo(this, e, t, n);\n            case \"base64\":\n                return vo(this, e, t, n);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return _o(this, e, t, n);\n            default:\n                if (o) throw new TypeError(\"Unknown encoding: \" + i);\n                i = (\"\" + i).toLowerCase(), o = !0;\n        }\n    }, \"write\");\n    f.prototype.toJSON = a(function() {\n        return {\n            type: \"Buffer\",\n            data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n    }, \"toJSON\");\n    function Ao(r, e, t) {\n        return e === 0 && t === r.length ? Pt.fromByteArray(r) : Pt.fromByteArray(r.slice(e, t));\n    }\n    a(Ao, \"base64Slice\");\n    function kn(r, e, t) {\n        t = Math.min(r.length, t);\n        let n = [], i = e;\n        for(; i < t;){\n            let s = r[i], o = null, u = s > 239 ? 4 : s > 223 ? 3 : s > 191 ? 2 : 1;\n            if (i + u <= t) {\n                let c, h, l, y;\n                switch(u){\n                    case 1:\n                        s < 128 && (o = s);\n                        break;\n                    case 2:\n                        c = r[i + 1], (c & 192) === 128 && (y = (s & 31) << 6 | c & 63, y > 127 && (o = y));\n                        break;\n                    case 3:\n                        c = r[i + 1], h = r[i + 2], (c & 192) === 128 && (h & 192) === 128 && (y = (s & 15) << 12 | (c & 63) << 6 | h & 63, y > 2047 && (y < 55296 || y > 57343) && (o = y));\n                        break;\n                    case 4:\n                        c = r[i + 1], h = r[i + 2], l = r[i + 3], (c & 192) === 128 && (h & 192) === 128 && (l & 192) === 128 && (y = (s & 15) << 18 | (c & 63) << 12 | (h & 63) << 6 | l & 63, y > 65535 && y < 1114112 && (o = y));\n                }\n            }\n            o === null ? (o = 65533, u = 1) : o > 65535 && (o -= 65536, n.push(o >>> 10 & 1023 | 55296), o = 56320 | o & 1023), n.push(o), i += u;\n        }\n        return Co(n);\n    }\n    a(kn, \"utf8Slice\");\n    var Ln = 4096;\n    function Co(r) {\n        let e = r.length;\n        if (e <= Ln) return String.fromCharCode.apply(String, r);\n        let t = \"\", n = 0;\n        for(; n < e;)t += String.fromCharCode.apply(String, r.slice(n, n += Ln));\n        return t;\n    }\n    a(Co, \"decodeCodePointsArray\");\n    function Io(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i] & 127);\n        return n;\n    }\n    a(Io, \"asciiSlice\");\n    function To(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i]);\n        return n;\n    }\n    a(To, \"latin1Slice\");\n    function Po(r, e, t) {\n        let n = r.length;\n        (!e || e < 0) && (e = 0), (!t || t < 0 || t > n) && (t = n);\n        let i = \"\";\n        for(let s = e; s < t; ++s)i += Oo[r[s]];\n        return i;\n    }\n    a(Po, \"hexSlice\");\n    function Bo(r, e, t) {\n        let n = r.slice(e, t), i = \"\";\n        for(let s = 0; s < n.length - 1; s += 2)i += String.fromCharCode(n[s] + n[s + 1] * 256);\n        return i;\n    }\n    a(Bo, \"utf16leSlice\");\n    f.prototype.slice = a(function(e, t) {\n        let n = this.length;\n        e = ~~e, t = t === void 0 ? n : ~~t, e < 0 ? (e += n, e < 0 && (e = 0)) : e > n && (e = n), t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), t < e && (t = e);\n        let i = this.subarray(e, t);\n        return Object.setPrototypeOf(i, f.prototype), i;\n    }, \"slice\");\n    function U(r, e, t) {\n        if (r % 1 !== 0 || r < 0) throw new RangeError(\"offset is not uint\");\n        if (r + e > t) throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    a(U, \"checkOffset\");\n    f.prototype.readUintLE = f.prototype.readUIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || U(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return i;\n    }, \"readUIntLE\");\n    f.prototype.readUintBE = f.prototype.readUIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || U(e, t, this.length);\n        let i = this[e + --t], s = 1;\n        for(; t > 0 && (s *= 256);)i += this[e + --t] * s;\n        return i;\n    }, \"readUIntBE\");\n    f.prototype.readUint8 = f.prototype.readUInt8 = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 1, this.length), this[e];\n    }, \"readUInt8\");\n    f.prototype.readUint16LE = f.prototype.readUInt16LE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 2, this.length), this[e] | this[e + 1] << 8;\n    }, \"readUInt16LE\");\n    f.prototype.readUint16BE = f.prototype.readUInt16BE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 2, this.length), this[e] << 8 | this[e + 1];\n    }, \"readUInt16BE\");\n    f.prototype.readUint32LE = f.prototype.readUInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;\n    }, \"readUInt32LE\");\n    f.prototype.readUint32BE = f.prototype.readUInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n    }, \"readUInt32BE\");\n    f.prototype.readBigUInt64LE = me(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && je(e, this.length - 8);\n        let i = t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24, s = this[++e] + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + n * 2 ** 24;\n        return BigInt(i) + (BigInt(s) << BigInt(32));\n    }, \"readBigUInt64LE\"));\n    f.prototype.readBigUInt64BE = me(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && je(e, this.length - 8);\n        let i = t * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e], s = this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n;\n        return (BigInt(i) << BigInt(32)) + BigInt(s);\n    }, \"readBigUInt64BE\"));\n    f.prototype.readIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || U(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return s *= 128, i >= s && (i -= Math.pow(2, 8 * t)), i;\n    }, \"readIntLE\");\n    f.prototype.readIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || U(e, t, this.length);\n        let i = t, s = 1, o = this[e + --i];\n        for(; i > 0 && (s *= 256);)o += this[e + --i] * s;\n        return s *= 128, o >= s && (o -= Math.pow(2, 8 * t)), o;\n    }, \"readIntBE\");\n    f.prototype.readInt8 = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];\n    }, \"readInt8\");\n    f.prototype.readInt16LE = a(function(e, t) {\n        e = e >>> 0, t || U(e, 2, this.length);\n        let n = this[e] | this[e + 1] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16LE\");\n    f.prototype.readInt16BE = a(function(e, t) {\n        e = e >>> 0, t || U(e, 2, this.length);\n        let n = this[e + 1] | this[e] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16BE\");\n    f.prototype.readInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n    }, \"readInt32LE\");\n    f.prototype.readInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n    }, \"readInt32BE\");\n    f.prototype.readBigInt64LE = me(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && je(e, this.length - 8);\n        let i = this[e + 4] + this[e + 5] * 2 ** 8 + this[e + 6] * 2 ** 16 + (n << 24);\n        return (BigInt(i) << BigInt(32)) + BigInt(t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24);\n    }, \"readBigInt64LE\"));\n    f.prototype.readBigInt64BE = me(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && je(e, this.length - 8);\n        let i = (t << 24) + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e];\n        return (BigInt(i) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n);\n    }, \"readBigInt64BE\"));\n    f.prototype.readFloatLE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 4, this.length), Pe.read(this, e, !0, 23, 4);\n    }, \"readFloatLE\");\n    f.prototype.readFloatBE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 4, this.length), Pe.read(this, e, !1, 23, 4);\n    }, \"readFloatBE\");\n    f.prototype.readDoubleLE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 8, this.length), Pe.read(this, e, !0, 52, 8);\n    }, \"readDoubleLE\");\n    f.prototype.readDoubleBE = a(function(e, t) {\n        return e = e >>> 0, t || U(e, 8, this.length), Pe.read(this, e, !1, 52, 8);\n    }, \"readDoubleBE\");\n    function z(r, e, t, n, i, s) {\n        if (!f.isBuffer(r)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (e > i || e < s) throw new RangeError('\"value\" argument is out of bounds');\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n    }\n    a(z, \"checkInt\");\n    f.prototype.writeUintLE = f.prototype.writeUIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            z(this, e, t, n, u, 0);\n        }\n        let s = 1, o = 0;\n        for(this[t] = e & 255; ++o < n && (s *= 256);)this[t + o] = e / s & 255;\n        return t + n;\n    }, \"writeUIntLE\");\n    f.prototype.writeUintBE = f.prototype.writeUIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            z(this, e, t, n, u, 0);\n        }\n        let s = n - 1, o = 1;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)this[t + s] = e / o & 255;\n        return t + n;\n    }, \"writeUIntBE\");\n    f.prototype.writeUint8 = f.prototype.writeUInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 1, 255, 0), this[t] = e & 255, t + 1;\n    }, \"writeUInt8\");\n    f.prototype.writeUint16LE = f.prototype.writeUInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 2, 65535, 0), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeUInt16LE\");\n    f.prototype.writeUint16BE = f.prototype.writeUInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeUInt16BE\");\n    f.prototype.writeUint32LE = f.prototype.writeUInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = e & 255, t + 4;\n    }, \"writeUInt32LE\");\n    f.prototype.writeUint32BE = f.prototype.writeUInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeUInt32BE\");\n    function Un(r, e, t, n, i) {\n        jn(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, t;\n    }\n    a(Un, \"wrtBigUInt64LE\");\n    function qn(r, e, t, n, i) {\n        jn(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t + 7] = s, s = s >> 8, r[t + 6] = s, s = s >> 8, r[t + 5] = s, s = s >> 8, r[t + 4] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t + 3] = o, o = o >> 8, r[t + 2] = o, o = o >> 8, r[t + 1] = o, o = o >> 8, r[t] = o, t + 8;\n    }\n    a(qn, \"wrtBigUInt64BE\");\n    f.prototype.writeBigUInt64LE = me(a(function(e, t = 0) {\n        return Un(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64LE\"));\n    f.prototype.writeBigUInt64BE = me(a(function(e, t = 0) {\n        return qn(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64BE\"));\n    f.prototype.writeIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            z(this, e, t, n, c - 1, -c);\n        }\n        let s = 0, o = 1, u = 0;\n        for(this[t] = e & 255; ++s < n && (o *= 256);)e < 0 && u === 0 && this[t + s - 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntLE\");\n    f.prototype.writeIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            z(this, e, t, n, c - 1, -c);\n        }\n        let s = n - 1, o = 1, u = 0;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)e < 0 && u === 0 && this[t + s + 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntBE\");\n    f.prototype.writeInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = e & 255, t + 1;\n    }, \"writeInt8\");\n    f.prototype.writeInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 2, 32767, -32768), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeInt16LE\");\n    f.prototype.writeInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeInt16BE\");\n    f.prototype.writeInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 4, 2147483647, -2147483648), this[t] = e & 255, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;\n    }, \"writeInt32LE\");\n    f.prototype.writeInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || z(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeInt32BE\");\n    f.prototype.writeBigInt64LE = me(a(function(e, t = 0) {\n        return Un(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64LE\"));\n    f.prototype.writeBigInt64BE = me(a(function(e, t = 0) {\n        return qn(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64BE\"));\n    function Nn(r, e, t, n, i, s) {\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n        if (t < 0) throw new RangeError(\"Index out of range\");\n    }\n    a(Nn, \"checkIEEE754\");\n    function Qn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Nn(r, e, t, 4, 34028234663852886e22, -34028234663852886e22), Pe.write(r, e, t, n, 23, 4), t + 4;\n    }\n    a(Qn, \"writeFloat\");\n    f.prototype.writeFloatLE = a(function(e, t, n) {\n        return Qn(this, e, t, !0, n);\n    }, \"writeFloatLE\");\n    f.prototype.writeFloatBE = a(function(e, t, n) {\n        return Qn(this, e, t, !1, n);\n    }, \"writeFloatBE\");\n    function Wn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Nn(r, e, t, 8, 17976931348623157e292, -17976931348623157e292), Pe.write(r, e, t, n, 52, 8), t + 8;\n    }\n    a(Wn, \"writeDouble\");\n    f.prototype.writeDoubleLE = a(function(e, t, n) {\n        return Wn(this, e, t, !0, n);\n    }, \"writeDoubleLE\");\n    f.prototype.writeDoubleBE = a(function(e, t, n) {\n        return Wn(this, e, t, !1, n);\n    }, \"writeDoubleBE\");\n    f.prototype.copy = a(function(e, t, n, i) {\n        if (!f.isBuffer(e)) throw new TypeError(\"argument should be a Buffer\");\n        if (n || (n = 0), !i && i !== 0 && (i = this.length), t >= e.length && (t = e.length), t || (t = 0), i > 0 && i < n && (i = n), i === n || e.length === 0 || this.length === 0) return 0;\n        if (t < 0) throw new RangeError(\"targetStart out of bounds\");\n        if (n < 0 || n >= this.length) throw new RangeError(\"Index out of range\");\n        if (i < 0) throw new RangeError(\"sourceEnd out of bounds\");\n        i > this.length && (i = this.length), e.length - t < i - n && (i = e.length - t + n);\n        let s = i - n;\n        return this === e && typeof Uint8Array.prototype.copyWithin == \"function\" ? this.copyWithin(t, n, i) : Uint8Array.prototype.set.call(e, this.subarray(n, i), t), s;\n    }, \"copy\");\n    f.prototype.fill = a(function(e, t, n, i) {\n        if (typeof e == \"string\") {\n            if (typeof t == \"string\" ? (i = t, t = 0, n = this.length) : typeof n == \"string\" && (i = n, n = this.length), i !== void 0 && typeof i != \"string\") throw new TypeError(\"encoding must be a string\");\n            if (typeof i == \"string\" && !f.isEncoding(i)) throw new TypeError(\"Unknown encoding: \" + i);\n            if (e.length === 1) {\n                let o = e.charCodeAt(0);\n                (i === \"utf8\" && o < 128 || i === \"latin1\") && (e = o);\n            }\n        } else typeof e == \"number\" ? e = e & 255 : typeof e == \"boolean\" && (e = Number(e));\n        if (t < 0 || this.length < t || this.length < n) throw new RangeError(\"Out of range index\");\n        if (n <= t) return this;\n        t = t >>> 0, n = n === void 0 ? this.length : n >>> 0, e || (e = 0);\n        let s;\n        if (typeof e == \"number\") for(s = t; s < n; ++s)this[s] = e;\n        else {\n            let o = f.isBuffer(e) ? e : f.from(e, i), u = o.length;\n            if (u === 0) throw new TypeError('The value \"' + e + '\" is invalid for argument \"value\"');\n            for(s = 0; s < n - t; ++s)this[s + t] = o[s % u];\n        }\n        return this;\n    }, \"fill\");\n    var Te = {};\n    function Dt(r, e, t) {\n        var n;\n        Te[r] = (n = class extends t {\n            constructor(){\n                super(), Object.defineProperty(this, \"message\", {\n                    value: e.apply(this, arguments),\n                    writable: !0,\n                    configurable: !0\n                }), this.name = `${this.name} [${r}]`, this.stack, delete this.name;\n            }\n            get code() {\n                return r;\n            }\n            set code(s) {\n                Object.defineProperty(this, \"code\", {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: s,\n                    writable: !0\n                });\n            }\n            toString() {\n                return `${this.name} [${r}]: ${this.message}`;\n            }\n        }, a(n, \"NodeError\"), n);\n    }\n    a(Dt, \"E\");\n    Dt(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(r) {\n        return r ? `${r} is outside of buffer bounds` : \"Attempt to access memory outside buffer bounds\";\n    }, RangeError);\n    Dt(\"ERR_INVALID_ARG_TYPE\", function(r, e) {\n        return `The \"${r}\" argum\\\nent must be of type number. Received type ${typeof e}`;\n    }, TypeError);\n    Dt(\"ERR_OUT_OF_RANGE\", function(r, e, t) {\n        let n = `The value of \"${r}\" is out of range.`, i = t;\n        return Number.isInteger(t) && Math.abs(t) > 2 ** 32 ? i = Rn(String(t)) : typeof t == \"bigint\" && (i = String(t), (t > BigInt(2) ** BigInt(32) || t < -(BigInt(2) ** BigInt(32))) && (i = Rn(i)), i += \"n\"), n += ` It\\\n must be ${e}. Received ${i}`, n;\n    }, RangeError);\n    function Rn(r) {\n        let e = \"\", t = r.length, n = r[0] === \"-\" ? 1 : 0;\n        for(; t >= n + 4; t -= 3)e = `_${r.slice(t - 3, t)}${e}`;\n        return `${r.slice(0, t)}${e}`;\n    }\n    a(Rn, \"addNumericalSeparator\");\n    function Lo(r, e, t) {\n        Be(e, \"offset\"), (r[e] === void 0 || r[e + t] === void 0) && je(e, r.length - (t + 1));\n    }\n    a(Lo, \"checkBounds\");\n    function jn(r, e, t, n, i, s) {\n        if (r > t || r < e) {\n            let o = typeof e == \"bigint\" ? \"n\" : \"\", u;\n            throw s > 3 ? e === 0 || e === BigInt(0) ? u = `>= 0${o} and < 2${o} ** ${(s + 1) * 8}${o}` : u = `>= -(2${o} ** ${(s + 1) * 8 - 1}${o}) and \\\n< 2 ** ${(s + 1) * 8 - 1}${o}` : u = `>= ${e}${o} and <= ${t}${o}`, new Te.ERR_OUT_OF_RANGE(\"value\", u, r);\n        }\n        Lo(n, i, s);\n    }\n    a(jn, \"checkIntBI\");\n    function Be(r, e) {\n        if (typeof r != \"number\") throw new Te.ERR_INVALID_ARG_TYPE(e, \"number\", r);\n    }\n    a(Be, \"validateNumber\");\n    function je(r, e, t) {\n        throw Math.floor(r) !== r ? (Be(r, t), new Te.ERR_OUT_OF_RANGE(t || \"offset\", \"an integer\", r)) : e < 0 ? new Te.ERR_BUFFER_OUT_OF_BOUNDS : new Te.ERR_OUT_OF_RANGE(t || \"offset\", `>= ${t ? 1 : 0} and <= ${e}`, r);\n    }\n    a(je, \"boundsError\");\n    var Ro = /[^+/0-9A-Za-z-_]/g;\n    function Fo(r) {\n        if (r = r.split(\"=\")[0], r = r.trim().replace(Ro, \"\"), r.length < 2) return \"\";\n        for(; r.length % 4 !== 0;)r = r + \"=\";\n        return r;\n    }\n    a(Fo, \"base64clean\");\n    function Rt(r, e) {\n        e = e || 1 / 0;\n        let t, n = r.length, i = null, s = [];\n        for(let o = 0; o < n; ++o){\n            if (t = r.charCodeAt(o), t > 55295 && t < 57344) {\n                if (!i) {\n                    if (t > 56319) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    } else if (o + 1 === n) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    }\n                    i = t;\n                    continue;\n                }\n                if (t < 56320) {\n                    (e -= 3) > -1 && s.push(239, 191, 189), i = t;\n                    continue;\n                }\n                t = (i - 55296 << 10 | t - 56320) + 65536;\n            } else i && (e -= 3) > -1 && s.push(239, 191, 189);\n            if (i = null, t < 128) {\n                if ((e -= 1) < 0) break;\n                s.push(t);\n            } else if (t < 2048) {\n                if ((e -= 2) < 0) break;\n                s.push(t >> 6 | 192, t & 63 | 128);\n            } else if (t < 65536) {\n                if ((e -= 3) < 0) break;\n                s.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);\n            } else if (t < 1114112) {\n                if ((e -= 4) < 0) break;\n                s.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);\n            } else throw new Error(\"Invalid code point\");\n        }\n        return s;\n    }\n    a(Rt, \"utf8ToBytes\");\n    function Mo(r) {\n        let e = [];\n        for(let t = 0; t < r.length; ++t)e.push(r.charCodeAt(t) & 255);\n        return e;\n    }\n    a(Mo, \"asciiToBytes\");\n    function Do(r, e) {\n        let t, n, i, s = [];\n        for(let o = 0; o < r.length && !((e -= 2) < 0); ++o)t = r.charCodeAt(o), n = t >> 8, i = t % 256, s.push(i), s.push(n);\n        return s;\n    }\n    a(Do, \"utf16leToBytes\");\n    function Hn(r) {\n        return Pt.toByteArray(Fo(r));\n    }\n    a(Hn, \"base64ToBytes\");\n    function ot(r, e, t, n) {\n        let i;\n        for(i = 0; i < n && !(i + t >= e.length || i >= r.length); ++i)e[i + t] = r[i];\n        return i;\n    }\n    a(ot, \"blitBuffer\");\n    function ae(r, e) {\n        return r instanceof e || r != null && r.constructor != null && r.constructor.name != null && r.constructor.name === e.name;\n    }\n    a(ae, \"isInstance\");\n    function Ot(r) {\n        return r !== r;\n    }\n    a(Ot, \"numberIsNaN\");\n    var Oo = function() {\n        let r = \"0123456789abcdef\", e = new Array(256);\n        for(let t = 0; t < 16; ++t){\n            let n = t * 16;\n            for(let i = 0; i < 16; ++i)e[n + i] = r[t] + r[i];\n        }\n        return e;\n    }();\n    function me(r) {\n        return typeof BigInt > \"u\" ? ko : r;\n    }\n    a(me, \"defineBigIntMethod\");\n    function ko() {\n        throw new Error(\"BigInt not supported\");\n    }\n    a(ko, \"BufferBigIntNotDefined\");\n});\nvar b, S, v, w, d, m, p = K(()=>{\n    \"use strict\";\n    b = globalThis, S = globalThis.setImmediate ?? ((r)=>setTimeout(r, 0)), v = globalThis.clearImmediate ?? ((r)=>clearTimeout(r)), w = globalThis.crypto ?? {};\n    w.subtle ?? (w.subtle = {});\n    d = typeof globalThis.Buffer == \"function\" && typeof globalThis.Buffer.allocUnsafe == \"function\" ? globalThis.Buffer : Gn().Buffer, m = globalThis.process ?? {};\n    m.env ?? (m.env = {});\n    try {\n        m.nextTick(()=>{});\n    } catch  {\n        let e = Promise.resolve();\n        m.nextTick = e.then.bind(e);\n    }\n});\nvar ge = I((Jc, kt)=>{\n    \"use strict\";\n    p();\n    var Re = typeof Reflect == \"object\" ? Reflect : null, $n = Re && typeof Re.apply == \"function\" ? Re.apply : a(function(e, t, n) {\n        return Function.prototype.apply.call(e, t, n);\n    }, \"ReflectApply\"), at;\n    Re && typeof Re.ownKeys == \"function\" ? at = Re.ownKeys : Object.getOwnPropertySymbols ? at = a(function(e) {\n        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));\n    }, \"ReflectOwnKeys\") : at = a(function(e) {\n        return Object.getOwnPropertyNames(e);\n    }, \"ReflectOwnKeys\");\n    function Uo(r) {\n        console && console.warn && console.warn(r);\n    }\n    a(Uo, \"ProcessEmitWarning\");\n    var Vn = Number.isNaN || a(function(e) {\n        return e !== e;\n    }, \"NumberIsNaN\");\n    function B() {\n        B.init.call(this);\n    }\n    a(B, \"EventEmitter\");\n    kt.exports = B;\n    kt.exports.once = Wo;\n    B.EventEmitter = B;\n    B.prototype._events = void 0;\n    B.prototype._eventsCount = 0;\n    B.prototype._maxListeners = void 0;\n    var Kn = 10;\n    function ut(r) {\n        if (typeof r != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof r);\n    }\n    a(ut, \"checkListener\");\n    Object.defineProperty(B, \"defaultMaxListeners\", {\n        enumerable: !0,\n        get: function() {\n            return Kn;\n        },\n        set: function(r) {\n            if (typeof r != \"number\" || r < 0 || Vn(r)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + r + \".\");\n            Kn = r;\n        }\n    });\n    B.init = function() {\n        (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n    };\n    B.prototype.setMaxListeners = a(function(e) {\n        if (typeof e != \"number\" || e < 0 || Vn(e)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");\n        return this._maxListeners = e, this;\n    }, \"setMaxListeners\");\n    function zn(r) {\n        return r._maxListeners === void 0 ? B.defaultMaxListeners : r._maxListeners;\n    }\n    a(zn, \"_getMaxListeners\");\n    B.prototype.getMaxListeners = a(function() {\n        return zn(this);\n    }, \"getMaxListeners\");\n    B.prototype.emit = a(function(e) {\n        for(var t = [], n = 1; n < arguments.length; n++)t.push(arguments[n]);\n        var i = e === \"error\", s = this._events;\n        if (s !== void 0) i = i && s.error === void 0;\n        else if (!i) return !1;\n        if (i) {\n            var o;\n            if (t.length > 0 && (o = t[0]), o instanceof Error) throw o;\n            var u = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));\n            throw u.context = o, u;\n        }\n        var c = s[e];\n        if (c === void 0) return !1;\n        if (typeof c == \"function\") $n(c, this, t);\n        else for(var h = c.length, l = ei(c, h), n = 0; n < h; ++n)$n(l[n], this, t);\n        return !0;\n    }, \"emit\");\n    function Yn(r, e, t, n) {\n        var i, s, o;\n        if (ut(t), s = r._events, s === void 0 ? (s = r._events = Object.create(null), r._eventsCount = 0) : (s.newListener !== void 0 && (r.emit(\"newListener\", e, t.listener ? t.listener : t), s = r._events), o = s[e]), o === void 0) o = s[e] = t, ++r._eventsCount;\n        else if (typeof o == \"function\" ? o = s[e] = n ? [\n            t,\n            o\n        ] : [\n            o,\n            t\n        ] : n ? o.unshift(t) : o.push(t), i = zn(r), i > 0 && o.length > i && !o.warned) {\n            o.warned = !0;\n            var u = new Error(\"Possible EventEmitter memory leak detected. \" + o.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n            u.name = \"MaxListenersExceededWarning\", u.emitter = r, u.type = e, u.count = o.length, Uo(u);\n        }\n        return r;\n    }\n    a(Yn, \"_addListener\");\n    B.prototype.addListener = a(function(e, t) {\n        return Yn(this, e, t, !1);\n    }, \"addListener\");\n    B.prototype.on = B.prototype.addListener;\n    B.prototype.prependListener = a(function(e, t) {\n        return Yn(this, e, t, !0);\n    }, \"prependListener\");\n    function qo() {\n        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n    }\n    a(qo, \"onceWrapper\");\n    function Zn(r, e, t) {\n        var n = {\n            fired: !1,\n            wrapFn: void 0,\n            target: r,\n            type: e,\n            listener: t\n        }, i = qo.bind(n);\n        return i.listener = t, n.wrapFn = i, i;\n    }\n    a(Zn, \"_onceWrap\");\n    B.prototype.once = a(function(e, t) {\n        return ut(t), this.on(e, Zn(this, e, t)), this;\n    }, \"once\");\n    B.prototype.prependOnceListener = a(function(e, t) {\n        return ut(t), this.prependListener(e, Zn(this, e, t)), this;\n    }, \"prependOnceListener\");\n    B.prototype.removeListener = a(function(e, t) {\n        var n, i, s, o, u;\n        if (ut(t), i = this._events, i === void 0) return this;\n        if (n = i[e], n === void 0) return this;\n        if (n === t || n.listener === t) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[e], i.removeListener && this.emit(\"removeListener\", e, n.listener || t));\n        else if (typeof n != \"function\") {\n            for(s = -1, o = n.length - 1; o >= 0; o--)if (n[o] === t || n[o].listener === t) {\n                u = n[o].listener, s = o;\n                break;\n            }\n            if (s < 0) return this;\n            s === 0 ? n.shift() : No(n, s), n.length === 1 && (i[e] = n[0]), i.removeListener !== void 0 && this.emit(\"removeListener\", e, u || t);\n        }\n        return this;\n    }, \"removeListener\");\n    B.prototype.off = B.prototype.removeListener;\n    B.prototype.removeAllListeners = a(function(e) {\n        var t, n, i;\n        if (n = this._events, n === void 0) return this;\n        if (n.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : n[e] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete n[e]), this;\n        if (arguments.length === 0) {\n            var s = Object.keys(n), o;\n            for(i = 0; i < s.length; ++i)o = s[i], o !== \"removeListener\" && this.removeAllListeners(o);\n            return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n        }\n        if (t = n[e], typeof t == \"function\") this.removeListener(e, t);\n        else if (t !== void 0) for(i = t.length - 1; i >= 0; i--)this.removeListener(e, t[i]);\n        return this;\n    }, \"removeAllListeners\");\n    function Jn(r, e, t) {\n        var n = r._events;\n        if (n === void 0) return [];\n        var i = n[e];\n        return i === void 0 ? [] : typeof i == \"function\" ? t ? [\n            i.listener || i\n        ] : [\n            i\n        ] : t ? Qo(i) : ei(i, i.length);\n    }\n    a(Jn, \"_listeners\");\n    B.prototype.listeners = a(function(e) {\n        return Jn(this, e, !0);\n    }, \"listeners\");\n    B.prototype.rawListeners = a(function(e) {\n        return Jn(this, e, !1);\n    }, \"rawListeners\");\n    B.listenerCount = function(r, e) {\n        return typeof r.listenerCount == \"function\" ? r.listenerCount(e) : Xn.call(r, e);\n    };\n    B.prototype.listenerCount = Xn;\n    function Xn(r) {\n        var e = this._events;\n        if (e !== void 0) {\n            var t = e[r];\n            if (typeof t == \"function\") return 1;\n            if (t !== void 0) return t.length;\n        }\n        return 0;\n    }\n    a(Xn, \"listenerCount\");\n    B.prototype.eventNames = a(function() {\n        return this._eventsCount > 0 ? at(this._events) : [];\n    }, \"eventNames\");\n    function ei(r, e) {\n        for(var t = new Array(e), n = 0; n < e; ++n)t[n] = r[n];\n        return t;\n    }\n    a(ei, \"arrayClone\");\n    function No(r, e) {\n        for(; e + 1 < r.length; e++)r[e] = r[e + 1];\n        r.pop();\n    }\n    a(No, \"spliceOne\");\n    function Qo(r) {\n        for(var e = new Array(r.length), t = 0; t < e.length; ++t)e[t] = r[t].listener || r[t];\n        return e;\n    }\n    a(Qo, \"unwrapListeners\");\n    function Wo(r, e) {\n        return new Promise(function(t, n) {\n            function i(o) {\n                r.removeListener(e, s), n(o);\n            }\n            a(i, \"errorListener\");\n            function s() {\n                typeof r.removeListener == \"function\" && r.removeListener(\"error\", i), t([].slice.call(arguments));\n            }\n            a(s, \"resolver\"), ti(r, e, s, {\n                once: !0\n            }), e !== \"error\" && jo(r, i, {\n                once: !0\n            });\n        });\n    }\n    a(Wo, \"once\");\n    function jo(r, e, t) {\n        typeof r.on == \"function\" && ti(r, \"error\", e, t);\n    }\n    a(jo, \"addErrorHandlerIfEventEmitter\");\n    function ti(r, e, t, n) {\n        if (typeof r.on == \"function\") n.once ? r.once(e, t) : r.on(e, t);\n        else if (typeof r.addEventListener == \"function\") r.addEventListener(e, a(function i(s) {\n            n.once && r.removeEventListener(e, i), t(s);\n        }, \"wrapListener\"));\n        else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof r);\n    }\n    a(ti, \"eventTargetAgnosticAddListener\");\n});\nvar He = {};\nX(He, {\n    default: ()=>Ho\n});\nvar Ho, Ge = K(()=>{\n    \"use strict\";\n    p();\n    Ho = {};\n});\nfunction $e(r) {\n    let e = 1779033703, t = 3144134277, n = 1013904242, i = 2773480762, s = 1359893119, o = 2600822924, u = 528734635, c = 1541459225, h = 0, l = 0, y = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n    ], E = a((A, g)=>A >>> g | A << 32 - g, \"rrot\"), _ = new Uint32Array(64), P = new Uint8Array(64), N = a(()=>{\n        for(let L = 0, G = 0; L < 16; L++, G += 4)_[L] = P[G] << 24 | P[G + 1] << 16 | P[G + 2] << 8 | P[G + 3];\n        for(let L = 16; L < 64; L++){\n            let G = E(_[L - 15], 7) ^ E(_[L - 15], 18) ^ _[L - 15] >>> 3, ce = E(_[L - 2], 17) ^ E(_[L - 2], 19) ^ _[L - 2] >>> 10;\n            _[L] = _[L - 16] + G + _[L - 7] + ce | 0;\n        }\n        let A = e, g = t, D = n, H = i, Q = s, W = o, ue = u, de = c;\n        for(let L = 0; L < 64; L++){\n            let G = E(Q, 6) ^ E(Q, 11) ^ E(Q, 25), ce = Q & W ^ ~Q & ue, ye = de + G + ce + y[L] + _[L] | 0, xe = E(A, 2) ^ E(A, 13) ^ E(A, 22), he = A & g ^ A & D ^ g & D, ie = xe + he | 0;\n            de = ue, ue = W, W = Q, Q = H + ye | 0, H = D, D = g, g = A, A = ye + ie | 0;\n        }\n        e = e + A | 0, t = t + g | 0, n = n + D | 0, i = i + H | 0, s = s + Q | 0, o = o + W | 0, u = u + ue | 0, c = c + de | 0, l = 0;\n    }, \"process\"), J = a((A)=>{\n        typeof A == \"string\" && (A = new TextEncoder().encode(A));\n        for(let g = 0; g < A.length; g++)P[l++] = A[g], l === 64 && N();\n        h += A.length;\n    }, \"add\"), pe = a(()=>{\n        if (P[l++] = 128, l == 64 && N(), l + 8 > 64) {\n            for(; l < 64;)P[l++] = 0;\n            N();\n        }\n        for(; l < 58;)P[l++] = 0;\n        let A = h * 8;\n        P[l++] = A / 1099511627776 & 255, P[l++] = A / 4294967296 & 255, P[l++] = A >>> 24, P[l++] = A >>> 16 & 255, P[l++] = A >>> 8 & 255, P[l++] = A & 255, N();\n        let g = new Uint8Array(32);\n        return g[0] = e >>> 24, g[1] = e >>> 16 & 255, g[2] = e >>> 8 & 255, g[3] = e & 255, g[4] = t >>> 24, g[5] = t >>> 16 & 255, g[6] = t >>> 8 & 255, g[7] = t & 255, g[8] = n >>> 24, g[9] = n >>> 16 & 255, g[10] = n >>> 8 & 255, g[11] = n & 255, g[12] = i >>> 24, g[13] = i >>> 16 & 255, g[14] = i >>> 8 & 255, g[15] = i & 255, g[16] = s >>> 24, g[17] = s >>> 16 & 255, g[18] = s >>> 8 & 255, g[19] = s & 255, g[20] = o >>> 24, g[21] = o >>> 16 & 255, g[22] = o >>> 8 & 255, g[23] = o & 255, g[24] = u >>> 24, g[25] = u >>> 16 & 255, g[26] = u >>> 8 & 255, g[27] = u & 255, g[28] = c >>> 24, g[29] = c >>> 16 & 255, g[30] = c >>> 8 & 255, g[31] = c & 255, g;\n    }, \"digest\");\n    return r === void 0 ? {\n        add: J,\n        digest: pe\n    } : (J(r), pe());\n}\nvar ri = K(()=>{\n    \"use strict\";\n    p();\n    a($e, \"sha256\");\n});\nvar O, Ke, ni = K(()=>{\n    \"use strict\";\n    p();\n    O = class O {\n        constructor(){\n            T(this, \"_dataLength\", 0);\n            T(this, \"_bufferLength\", 0);\n            T(this, \"_state\", new Int32Array(4));\n            T(this, \"_buffer\", new ArrayBuffer(68));\n            T(this, \"_buffer8\");\n            T(this, \"_buffer32\");\n            this._buffer8 = new Uint8Array(this._buffer, 0, 68), this._buffer32 = new Uint32Array(this._buffer, 0, 17), this.start();\n        }\n        static hashByteArray(e, t = !1) {\n            return this.onePassHasher.start().appendByteArray(e).end(t);\n        }\n        static hashStr(e, t = !1) {\n            return this.onePassHasher.start().appendStr(e).end(t);\n        }\n        static hashAsciiStr(e, t = !1) {\n            return this.onePassHasher.start().appendAsciiStr(e).end(t);\n        }\n        static _hex(e) {\n            let t = O.hexChars, n = O.hexOut, i, s, o, u;\n            for(u = 0; u < 4; u += 1)for(s = u * 8, i = e[u], o = 0; o < 8; o += 2)n[s + 1 + o] = t.charAt(i & 15), i >>>= 4, n[s + 0 + o] = t.charAt(i & 15), i >>>= 4;\n            return n.join(\"\");\n        }\n        static _md5cycle(e, t) {\n            let n = e[0], i = e[1], s = e[2], o = e[3];\n            n += (i & s | ~i & o) + t[0] - 680876936 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[1] - 389564586 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[2] + 606105819 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[3] - 1044525330 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[4] - 176418897 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[5] + 1200080426 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[6] - 1473231341 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[7] - 45705983 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[8] + 1770035416 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[9] - 1958414417 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[10] - 42063 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[11] - 1990404162 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[12] + 1804603682 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[13] - 40341101 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[14] - 1502002290 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[15] + 1236535329 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & o | s & ~o) + t[1] - 165796510 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[6] - 1069501632 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[11] + 643717713 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[0] - 373897302 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[5] - 701558691 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[10] + 38016083 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[15] - 660478335 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[4] - 405537848 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[9] + 568446438 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[14] - 1019803690 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[3] - 187363961 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[8] + 1163531501 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[13] - 1444681467 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[2] - 51403784 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[7] + 1735328473 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[12] - 1926607734 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i ^ s ^ o) + t[5] - 378558 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[8] - 2022574463 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[11] + 1839030562 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[14] - 35309556 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[1] - 1530992060 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[4] + 1272893353 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[7] - 155497632 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[10] - 1094730640 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[13] + 681279174 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[0] - 358537222 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[3] - 722521979 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[6] + 76029189 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[9] - 640364487 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[12] - 421815835 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[15] + 530742520 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[2] - 995338651 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (s ^ (i | ~o)) + t[0] - 198630844 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[7] + 1126891415 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[14] - 1416354905 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[5] - 57434055 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[12] + 1700485571 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[3] - 1894986606 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[10] - 1051523 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[1] - 2054922799 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[8] + 1873313359 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[15] - 30611744 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[6] - 1560198380 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[13] + 1309151649 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[4] - 145523070 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[11] - 1120210379 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[2] + 718787259 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[9] - 343485551 | 0, i = (i << 21 | i >>> 11) + s | 0, e[0] = n + e[0] | 0, e[1] = i + e[1] | 0, e[2] = s + e[2] | 0, e[3] = o + e[3] | 0;\n        }\n        start() {\n            return this._dataLength = 0, this._bufferLength = 0, this._state.set(O.stateIdentity), this;\n        }\n        appendStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o;\n            for(o = 0; o < e.length; o += 1){\n                if (s = e.charCodeAt(o), s < 128) t[i++] = s;\n                else if (s < 2048) t[i++] = (s >>> 6) + 192, t[i++] = s & 63 | 128;\n                else if (s < 55296 || s > 56319) t[i++] = (s >>> 12) + 224, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                else {\n                    if (s = (s - 55296) * 1024 + (e.charCodeAt(++o) - 56320) + 65536, s > 1114111) throw new Error(\"Unicode standard supports code points up to U+10FFFF\");\n                    t[i++] = (s >>> 18) + 240, t[i++] = s >>> 12 & 63 | 128, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                }\n                i >= 64 && (this._dataLength += 64, O._md5cycle(this._state, n), i -= 64, n[0] = n[16]);\n            }\n            return this._bufferLength = i, this;\n        }\n        appendAsciiStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e.charCodeAt(o++);\n                if (i < 64) break;\n                this._dataLength += 64, O._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        appendByteArray(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e[o++];\n                if (i < 64) break;\n                this._dataLength += 64, O._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        getState() {\n            let e = this._state;\n            return {\n                buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)),\n                buflen: this._bufferLength,\n                length: this._dataLength,\n                state: [\n                    e[0],\n                    e[1],\n                    e[2],\n                    e[3]\n                ]\n            };\n        }\n        setState(e) {\n            let t = e.buffer, n = e.state, i = this._state, s;\n            for(this._dataLength = e.length, this._bufferLength = e.buflen, i[0] = n[0], i[1] = n[1], i[2] = n[2], i[3] = n[3], s = 0; s < t.length; s += 1)this._buffer8[s] = t.charCodeAt(s);\n        }\n        end(e = !1) {\n            let t = this._bufferLength, n = this._buffer8, i = this._buffer32, s = (t >> 2) + 1;\n            this._dataLength += t;\n            let o = this._dataLength * 8;\n            if (n[t] = 128, n[t + 1] = n[t + 2] = n[t + 3] = 0, i.set(O.buffer32Identity.subarray(s), s), t > 55 && (O._md5cycle(this._state, i), i.set(O.buffer32Identity)), o <= 4294967295) i[14] = o;\n            else {\n                let u = o.toString(16).match(/(.*?)(.{0,8})$/);\n                if (u === null) return;\n                let c = parseInt(u[2], 16), h = parseInt(u[1], 16) || 0;\n                i[14] = c, i[15] = h;\n            }\n            return O._md5cycle(this._state, i), e ? this._state : O._hex(this._state);\n        }\n    };\n    a(O, \"Md5\"), T(O, \"stateIdentity\", new Int32Array([\n        1732584193,\n        -271733879,\n        -1732584194,\n        271733878\n    ])), T(O, \"buffer32Identity\", new Int32Array([\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ])), T(O, \"hexChars\", \"0123456789abcdef\"), T(O, \"hexOut\", []), T(O, \"onePassHasher\", new O);\n    Ke = O;\n});\nvar Ut = {};\nX(Ut, {\n    createHash: ()=>$o,\n    createHmac: ()=>Ko,\n    randomBytes: ()=>Go\n});\nfunction Go(r) {\n    return w.getRandomValues(d.alloc(r));\n}\nfunction $o(r) {\n    if (r === \"sha256\") return {\n        update: function(e) {\n            return {\n                digest: function() {\n                    return d.from($e(e));\n                }\n            };\n        }\n    };\n    if (r === \"md5\") return {\n        update: function(e) {\n            return {\n                digest: function() {\n                    return typeof e == \"string\" ? Ke.hashStr(e) : Ke.hashByteArray(e);\n                }\n            };\n        }\n    };\n    throw new Error(`Hash type '${r}' not supported`);\n}\nfunction Ko(r, e) {\n    if (r !== \"sha256\") throw new Error(`Only sha256 is supported (requested: '${r}')`);\n    return {\n        update: function(t) {\n            return {\n                digest: function() {\n                    typeof e == \"string\" && (e = new TextEncoder().encode(e)), typeof t == \"string\" && (t = new TextEncoder().encode(t));\n                    let n = e.length;\n                    if (n > 64) e = $e(e);\n                    else if (n < 64) {\n                        let c = new Uint8Array(64);\n                        c.set(e), e = c;\n                    }\n                    let i = new Uint8Array(64), s = new Uint8Array(64);\n                    for(let c = 0; c < 64; c++)i[c] = 54 ^ e[c], s[c] = 92 ^ e[c];\n                    let o = new Uint8Array(t.length + 64);\n                    o.set(i, 0), o.set(t, 64);\n                    let u = new Uint8Array(96);\n                    return u.set(s, 0), u.set($e(o), 64), d.from($e(u));\n                }\n            };\n        }\n    };\n}\nvar qt = K(()=>{\n    \"use strict\";\n    p();\n    ri();\n    ni();\n    a(Go, \"randomBytes\");\n    a($o, \"createHash\");\n    a(Ko, \"createHmac\");\n});\nvar Qt = I((ii)=>{\n    \"use strict\";\n    p();\n    ii.parse = function(r, e) {\n        return new Nt(r, e).parse();\n    };\n    var ct = class ct {\n        constructor(e, t){\n            this.source = e, this.transform = t || Vo, this.position = 0, this.entries = [], this.recorded = [], this.dimension = 0;\n        }\n        isEof() {\n            return this.position >= this.source.length;\n        }\n        nextCharacter() {\n            var e = this.source[this.position++];\n            return e === \"\\\\\" ? {\n                value: this.source[this.position++],\n                escaped: !0\n            } : {\n                value: e,\n                escaped: !1\n            };\n        }\n        record(e) {\n            this.recorded.push(e);\n        }\n        newEntry(e) {\n            var t;\n            (this.recorded.length > 0 || e) && (t = this.recorded.join(\"\"), t === \"NULL\" && !e && (t = null), t !== null && (t = this.transform(t)), this.entries.push(t), this.recorded = []);\n        }\n        consumeDimensions() {\n            if (this.source[0] === \"[\") for(; !this.isEof();){\n                var e = this.nextCharacter();\n                if (e.value === \"=\") break;\n            }\n        }\n        parse(e) {\n            var t, n, i;\n            for(this.consumeDimensions(); !this.isEof();)if (t = this.nextCharacter(), t.value === \"{\" && !i) this.dimension++, this.dimension > 1 && (n = new ct(this.source.substr(this.position - 1), this.transform), this.entries.push(n.parse(!0)), this.position += n.position - 2);\n            else if (t.value === \"}\" && !i) {\n                if (this.dimension--, !this.dimension && (this.newEntry(), e)) return this.entries;\n            } else t.value === '\"' && !t.escaped ? (i && this.newEntry(!0), i = !i) : t.value === \",\" && !i ? this.newEntry() : this.record(t.value);\n            if (this.dimension !== 0) throw new Error(\"array dimension not balanced\");\n            return this.entries;\n        }\n    };\n    a(ct, \"ArrayParser\");\n    var Nt = ct;\n    function Vo(r) {\n        return r;\n    }\n    a(Vo, \"identity\");\n});\nvar Wt = I((yh, si)=>{\n    p();\n    var zo = Qt();\n    si.exports = {\n        create: function(r, e) {\n            return {\n                parse: function() {\n                    return zo.parse(r, e);\n                }\n            };\n        }\n    };\n});\nvar ui = I((gh, ai)=>{\n    \"use strict\";\n    p();\n    var Yo = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/, Zo = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/, Jo = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/, Xo = /^-?infinity$/;\n    ai.exports = a(function(e) {\n        if (Xo.test(e)) return Number(e.replace(\"i\", \"I\"));\n        var t = Yo.exec(e);\n        if (!t) return ea(e) || null;\n        var n = !!t[8], i = parseInt(t[1], 10);\n        n && (i = oi(i));\n        var s = parseInt(t[2], 10) - 1, o = t[3], u = parseInt(t[4], 10), c = parseInt(t[5], 10), h = parseInt(t[6], 10), l = t[7];\n        l = l ? 1e3 * parseFloat(l) : 0;\n        var y, E = ta(e);\n        return E != null ? (y = new Date(Date.UTC(i, s, o, u, c, h, l)), jt(i) && y.setUTCFullYear(i), E !== 0 && y.setTime(y.getTime() - E)) : (y = new Date(i, s, o, u, c, h, l), jt(i) && y.setFullYear(i)), y;\n    }, \"parseDate\");\n    function ea(r) {\n        var e = Zo.exec(r);\n        if (e) {\n            var t = parseInt(e[1], 10), n = !!e[4];\n            n && (t = oi(t));\n            var i = parseInt(e[2], 10) - 1, s = e[3], o = new Date(t, i, s);\n            return jt(t) && o.setFullYear(t), o;\n        }\n    }\n    a(ea, \"getDate\");\n    function ta(r) {\n        if (r.endsWith(\"+00\")) return 0;\n        var e = Jo.exec(r.split(\" \")[1]);\n        if (e) {\n            var t = e[1];\n            if (t === \"Z\") return 0;\n            var n = t === \"-\" ? -1 : 1, i = parseInt(e[2], 10) * 3600 + parseInt(e[3] || 0, 10) * 60 + parseInt(e[4] || 0, 10);\n            return i * n * 1e3;\n        }\n    }\n    a(ta, \"timeZoneOffset\");\n    function oi(r) {\n        return -(r - 1);\n    }\n    a(oi, \"bcYearToNegativeYear\");\n    function jt(r) {\n        return r >= 0 && r < 100;\n    }\n    a(jt, \"is0To99\");\n});\nvar hi = I((Sh, ci)=>{\n    p();\n    ci.exports = na;\n    var ra = Object.prototype.hasOwnProperty;\n    function na(r) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var n in t)ra.call(t, n) && (r[n] = t[n]);\n        }\n        return r;\n    }\n    a(na, \"extend\");\n});\nvar pi = I((vh, fi)=>{\n    \"use strict\";\n    p();\n    var ia = hi();\n    fi.exports = Fe;\n    function Fe(r) {\n        if (!(this instanceof Fe)) return new Fe(r);\n        ia(this, ma(r));\n    }\n    a(Fe, \"PostgresInterval\");\n    var sa = [\n        \"seconds\",\n        \"minutes\",\n        \"hours\",\n        \"days\",\n        \"months\",\n        \"years\"\n    ];\n    Fe.prototype.toPostgres = function() {\n        var r = sa.filter(this.hasOwnProperty, this);\n        return this.milliseconds && r.indexOf(\"seconds\") < 0 && r.push(\"seconds\"), r.length === 0 ? \"0\" : r.map(function(e) {\n            var t = this[e] || 0;\n            return e === \"seconds\" && this.milliseconds && (t = (t + this.milliseconds / 1e3).toFixed(6).replace(/\\.?0+$/, \"\")), t + \" \" + e;\n        }, this).join(\" \");\n    };\n    var oa = {\n        years: \"Y\",\n        months: \"M\",\n        days: \"D\",\n        hours: \"H\",\n        minutes: \"M\",\n        seconds: \"S\"\n    }, aa = [\n        \"years\",\n        \"months\",\n        \"days\"\n    ], ua = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\"\n    ];\n    Fe.prototype.toISOString = Fe.prototype.toISO = function() {\n        var r = aa.map(t, this).join(\"\"), e = ua.map(t, this).join(\"\");\n        return \"P\" + r + \"T\" + e;\n        function t(n) {\n            var i = this[n] || 0;\n            return n === \"seconds\" && this.milliseconds && (i = (i + this.milliseconds / 1e3).toFixed(6).replace(/0+$/, \"\")), i + oa[n];\n        }\n    };\n    var Ht = \"([+-]?\\\\d+)\", ca = Ht + \"\\\\s+years?\", ha = Ht + \"\\\\s+mons?\", la = Ht + \"\\\\s+days?\", fa = \"([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?\", pa = new RegExp([\n        ca,\n        ha,\n        la,\n        fa\n    ].map(function(r) {\n        return \"(\" + r + \")?\";\n    }).join(\"\\\\s*\")), li = {\n        years: 2,\n        months: 4,\n        days: 6,\n        hours: 9,\n        minutes: 10,\n        seconds: 11,\n        milliseconds: 12\n    }, da = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\",\n        \"milliseconds\"\n    ];\n    function ya(r) {\n        var e = r + \"000000\".slice(r.length);\n        return parseInt(e, 10) / 1e3;\n    }\n    a(ya, \"parseMilliseconds\");\n    function ma(r) {\n        if (!r) return {};\n        var e = pa.exec(r), t = e[8] === \"-\";\n        return Object.keys(li).reduce(function(n, i) {\n            var s = li[i], o = e[s];\n            return !o || (o = i === \"milliseconds\" ? ya(o) : parseInt(o, 10), !o) || (t && ~da.indexOf(i) && (o *= -1), n[i] = o), n;\n        }, {});\n    }\n    a(ma, \"parse\");\n});\nvar yi = I((Ch, di)=>{\n    \"use strict\";\n    p();\n    di.exports = a(function(e) {\n        if (/^\\\\x/.test(e)) return new d(e.substr(2), \"hex\");\n        for(var t = \"\", n = 0; n < e.length;)if (e[n] !== \"\\\\\") t += e[n], ++n;\n        else if (/[0-7]{3}/.test(e.substr(n + 1, 3))) t += String.fromCharCode(parseInt(e.substr(n + 1, 3), 8)), n += 4;\n        else {\n            for(var i = 1; n + i < e.length && e[n + i] === \"\\\\\";)i++;\n            for(var s = 0; s < Math.floor(i / 2); ++s)t += \"\\\\\";\n            n += Math.floor(i / 2) * 2;\n        }\n        return new d(t, \"binary\");\n    }, \"parseBytea\");\n});\nvar Ei = I((Ph, xi)=>{\n    p();\n    var Ve = Qt(), ze = Wt(), ht = ui(), gi = pi(), wi = yi();\n    function lt(r) {\n        return a(function(t) {\n            return t === null ? t : r(t);\n        }, \"nullAllowed\");\n    }\n    a(lt, \"allowNull\");\n    function bi(r) {\n        return r === null ? r : r === \"TRUE\" || r === \"t\" || r === \"true\" || r === \"y\" || r === \"yes\" || r === \"on\" || r === \"1\";\n    }\n    a(bi, \"parseBool\");\n    function ga(r) {\n        return r ? Ve.parse(r, bi) : null;\n    }\n    a(ga, \"parseBoolArray\");\n    function wa(r) {\n        return parseInt(r, 10);\n    }\n    a(wa, \"parseBaseTenInt\");\n    function Gt(r) {\n        return r ? Ve.parse(r, lt(wa)) : null;\n    }\n    a(Gt, \"parseIntegerArray\");\n    function ba(r) {\n        return r ? Ve.parse(r, lt(function(e) {\n            return Si(e).trim();\n        })) : null;\n    }\n    a(ba, \"parseBigIntegerArray\");\n    var Sa = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r, function(t) {\n            return t !== null && (t = zt(t)), t;\n        });\n        return e.parse();\n    }, \"parsePointArray\"), $t = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r, function(t) {\n            return t !== null && (t = parseFloat(t)), t;\n        });\n        return e.parse();\n    }, \"parseFloatArray\"), te = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r);\n        return e.parse();\n    }, \"parseStringArray\"), Kt = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r, function(t) {\n            return t !== null && (t = ht(t)), t;\n        });\n        return e.parse();\n    }, \"parseDateArray\"), xa = a(function(r) {\n        if (!r) return null;\n        var e = ze.create(r, function(t) {\n            return t !== null && (t = gi(t)), t;\n        });\n        return e.parse();\n    }, \"parseIntervalArray\"), Ea = a(function(r) {\n        return r ? Ve.parse(r, lt(wi)) : null;\n    }, \"parseByteAArray\"), Vt = a(function(r) {\n        return parseInt(r, 10);\n    }, \"parseInteger\"), Si = a(function(r) {\n        var e = String(r);\n        return /^\\d+$/.test(e) ? e : r;\n    }, \"parseBigInteger\"), mi = a(function(r) {\n        return r ? Ve.parse(r, lt(JSON.parse)) : null;\n    }, \"parseJsonArray\"), zt = a(function(r) {\n        return r[0] !== \"(\" ? null : (r = r.substring(1, r.length - 1).split(\",\"), {\n            x: parseFloat(r[0]),\n            y: parseFloat(r[1])\n        });\n    }, \"parsePoint\"), va = a(function(r) {\n        if (r[0] !== \"<\" && r[1] !== \"(\") return null;\n        for(var e = \"(\", t = \"\", n = !1, i = 2; i < r.length - 1; i++){\n            if (n || (e += r[i]), r[i] === \")\") {\n                n = !0;\n                continue;\n            } else if (!n) continue;\n            r[i] !== \",\" && (t += r[i]);\n        }\n        var s = zt(e);\n        return s.radius = parseFloat(t), s;\n    }, \"parseCircle\"), _a = a(function(r) {\n        r(20, Si), r(21, Vt), r(23, Vt), r(26, Vt), r(700, parseFloat), r(701, parseFloat), r(16, bi), r(1082, ht), r(1114, ht), r(1184, ht), r(600, zt), r(651, te), r(718, va), r(1e3, ga), r(1001, Ea), r(1005, Gt), r(1007, Gt), r(1028, Gt), r(1016, ba), r(1017, Sa), r(1021, $t), r(1022, $t), r(1231, $t), r(1014, te), r(1015, te), r(1008, te), r(1009, te), r(1040, te), r(1041, te), r(1115, Kt), r(1182, Kt), r(1185, Kt), r(1186, gi), r(1187, xa), r(17, wi), r(114, JSON.parse.bind(JSON)), r(3802, JSON.parse.bind(JSON)), r(199, mi), r(3807, mi), r(3907, te), r(2951, te), r(791, te), r(1183, te), r(1270, te);\n    }, \"init\");\n    xi.exports = {\n        init: _a\n    };\n});\nvar _i = I((Rh, vi)=>{\n    \"use strict\";\n    p();\n    var Y = 1e6;\n    function Aa(r) {\n        var e = r.readInt32BE(0), t = r.readUInt32BE(4), n = \"\";\n        e < 0 && (e = ~e + (t === 0), t = ~t + 1 >>> 0, n = \"-\");\n        var i = \"\", s, o, u, c, h, l;\n        {\n            if (s = e % Y, e = e / Y >>> 0, o = 4294967296 * s + t, t = o / Y >>> 0, u = \"\" + (o - Y * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % Y, e = e / Y >>> 0, o = 4294967296 * s + t, t = o / Y >>> 0, u = \"\" + (o - Y * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % Y, e = e / Y >>> 0, o = 4294967296 * s + t, t = o / Y >>> 0, u = \"\" + (o - Y * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        return s = e % Y, o = 4294967296 * s + t, u = \"\" + o % Y, n + u + i;\n    }\n    a(Aa, \"readInt8\");\n    vi.exports = Aa;\n});\nvar Pi = I((Dh, Ti)=>{\n    p();\n    var Ca = _i(), R = a(function(r, e, t, n, i) {\n        t = t || 0, n = n || !1, i = i || function(_, P, N) {\n            return _ * Math.pow(2, N) + P;\n        };\n        var s = t >> 3, o = a(function(_) {\n            return n ? ~_ & 255 : _;\n        }, \"inv\"), u = 255, c = 8 - t % 8;\n        e < c && (u = 255 << 8 - e & 255, c = e), t && (u = u >> t % 8);\n        var h = 0;\n        t % 8 + e >= 8 && (h = i(0, o(r[s]) & u, c));\n        for(var l = e + t >> 3, y = s + 1; y < l; y++)h = i(h, o(r[y]), 8);\n        var E = (e + t) % 8;\n        return E > 0 && (h = i(h, o(r[l]) >> 8 - E, E)), h;\n    }, \"parseBits\"), Ii = a(function(r, e, t) {\n        var n = Math.pow(2, t - 1) - 1, i = R(r, 1), s = R(r, t, 1);\n        if (s === 0) return 0;\n        var o = 1, u = a(function(h, l, y) {\n            h === 0 && (h = 1);\n            for(var E = 1; E <= y; E++)o /= 2, (l & 1 << y - E) > 0 && (h += o);\n            return h;\n        }, \"parsePrecisionBits\"), c = R(r, e, t + 1, !1, u);\n        return s == Math.pow(2, t + 1) - 1 ? c === 0 ? i === 0 ? 1 / 0 : -1 / 0 : NaN : (i === 0 ? 1 : -1) * Math.pow(2, s - n) * c;\n    }, \"parseFloatFromBits\"), Ia = a(function(r) {\n        return R(r, 1) == 1 ? -1 * (R(r, 15, 1, !0) + 1) : R(r, 15, 1);\n    }, \"parseInt16\"), Ai = a(function(r) {\n        return R(r, 1) == 1 ? -1 * (R(r, 31, 1, !0) + 1) : R(r, 31, 1);\n    }, \"parseInt32\"), Ta = a(function(r) {\n        return Ii(r, 23, 8);\n    }, \"parseFloat32\"), Pa = a(function(r) {\n        return Ii(r, 52, 11);\n    }, \"parseFloat64\"), Ba = a(function(r) {\n        var e = R(r, 16, 32);\n        if (e == 49152) return NaN;\n        for(var t = Math.pow(1e4, R(r, 16, 16)), n = 0, i = [], s = R(r, 16), o = 0; o < s; o++)n += R(r, 16, 64 + 16 * o) * t, t /= 1e4;\n        var u = Math.pow(10, R(r, 16, 48));\n        return (e === 0 ? 1 : -1) * Math.round(n * u) / u;\n    }, \"parseNumeric\"), Ci = a(function(r, e) {\n        var t = R(e, 1), n = R(e, 63, 1), i = new Date((t === 0 ? 1 : -1) * n / 1e3 + 9466848e5);\n        return r || i.setTime(i.getTime() + i.getTimezoneOffset() * 6e4), i.usec = n % 1e3, i.getMicroSeconds = function() {\n            return this.usec;\n        }, i.setMicroSeconds = function(s) {\n            this.usec = s;\n        }, i.getUTCMicroSeconds = function() {\n            return this.usec;\n        }, i;\n    }, \"parseDate\"), Ye = a(function(r) {\n        for(var e = R(r, 32), t = R(r, 32, 32), n = R(r, 32, 64), i = 96, s = [], o = 0; o < e; o++)s[o] = R(r, 32, i), i += 32, i += 32;\n        var u = a(function(h) {\n            var l = R(r, 32, i);\n            if (i += 32, l == 4294967295) return null;\n            var y;\n            if (h == 23 || h == 20) return y = R(r, l * 8, i), i += l * 8, y;\n            if (h == 25) return y = r.toString(this.encoding, i >> 3, (i += l << 3) >> 3), y;\n            console.log(\"ERROR: ElementType not implemented: \" + h);\n        }, \"parseElement\"), c = a(function(h, l) {\n            var y = [], E;\n            if (h.length > 1) {\n                var _ = h.shift();\n                for(E = 0; E < _; E++)y[E] = c(h, l);\n                h.unshift(_);\n            } else for(E = 0; E < h[0]; E++)y[E] = u(l);\n            return y;\n        }, \"parse\");\n        return c(s, n);\n    }, \"parseArray\"), La = a(function(r) {\n        return r.toString(\"utf8\");\n    }, \"parseText\"), Ra = a(function(r) {\n        return r === null ? null : R(r, 8) > 0;\n    }, \"parseBool\"), Fa = a(function(r) {\n        r(20, Ca), r(21, Ia), r(23, Ai), r(26, Ai), r(1700, Ba), r(700, Ta), r(701, Pa), r(16, Ra), r(1114, Ci.bind(null, !1)), r(1184, Ci.bind(null, !0)), r(1e3, Ye), r(1007, Ye), r(1016, Ye), r(1008, Ye), r(1009, Ye), r(25, La);\n    }, \"init\");\n    Ti.exports = {\n        init: Fa\n    };\n});\nvar Li = I((Uh, Bi)=>{\n    p();\n    Bi.exports = {\n        BOOL: 16,\n        BYTEA: 17,\n        CHAR: 18,\n        INT8: 20,\n        INT2: 21,\n        INT4: 23,\n        REGPROC: 24,\n        TEXT: 25,\n        OID: 26,\n        TID: 27,\n        XID: 28,\n        CID: 29,\n        JSON: 114,\n        XML: 142,\n        PG_NODE_TREE: 194,\n        SMGR: 210,\n        PATH: 602,\n        POLYGON: 604,\n        CIDR: 650,\n        FLOAT4: 700,\n        FLOAT8: 701,\n        ABSTIME: 702,\n        RELTIME: 703,\n        TINTERVAL: 704,\n        CIRCLE: 718,\n        MACADDR8: 774,\n        MONEY: 790,\n        MACADDR: 829,\n        INET: 869,\n        ACLITEM: 1033,\n        BPCHAR: 1042,\n        VARCHAR: 1043,\n        DATE: 1082,\n        TIME: 1083,\n        TIMESTAMP: 1114,\n        TIMESTAMPTZ: 1184,\n        INTERVAL: 1186,\n        TIMETZ: 1266,\n        BIT: 1560,\n        VARBIT: 1562,\n        NUMERIC: 1700,\n        REFCURSOR: 1790,\n        REGPROCEDURE: 2202,\n        REGOPER: 2203,\n        REGOPERATOR: 2204,\n        REGCLASS: 2205,\n        REGTYPE: 2206,\n        UUID: 2950,\n        TXID_SNAPSHOT: 2970,\n        PG_LSN: 3220,\n        PG_NDISTINCT: 3361,\n        PG_DEPENDENCIES: 3402,\n        TSVECTOR: 3614,\n        TSQUERY: 3615,\n        GTSVECTOR: 3642,\n        REGCONFIG: 3734,\n        REGDICTIONARY: 3769,\n        JSONB: 3802,\n        REGNAMESPACE: 4089,\n        REGROLE: 4096\n    };\n});\nvar Xe = I((Je)=>{\n    p();\n    var Ma = Ei(), Da = Pi(), Oa = Wt(), ka = Li();\n    Je.getTypeParser = Ua;\n    Je.setTypeParser = qa;\n    Je.arrayParser = Oa;\n    Je.builtins = ka;\n    var Ze = {\n        text: {},\n        binary: {}\n    };\n    function Ri(r) {\n        return String(r);\n    }\n    a(Ri, \"noParse\");\n    function Ua(r, e) {\n        return e = e || \"text\", Ze[e] && Ze[e][r] || Ri;\n    }\n    a(Ua, \"getTypeParser\");\n    function qa(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), Ze[e][r] = t;\n    }\n    a(qa, \"setTypeParser\");\n    Ma.init(function(r, e) {\n        Ze.text[r] = e;\n    });\n    Da.init(function(r, e) {\n        Ze.binary[r] = e;\n    });\n});\nvar et = I((jh, Yt)=>{\n    \"use strict\";\n    p();\n    Yt.exports = {\n        host: \"localhost\",\n        user: m.platform === \"win32\" ? m.env.USERNAME : m.env.USER,\n        database: void 0,\n        password: null,\n        connectionString: void 0,\n        port: 5432,\n        rows: 0,\n        binary: !1,\n        max: 10,\n        idleTimeoutMillis: 3e4,\n        client_encoding: \"\",\n        ssl: !1,\n        application_name: void 0,\n        fallback_application_name: void 0,\n        options: void 0,\n        parseInputDatesAsUTC: !1,\n        statement_timeout: !1,\n        lock_timeout: !1,\n        idle_in_transaction_session_timeout: !1,\n        query_timeout: !1,\n        connect_timeout: 0,\n        keepalives: 1,\n        keepalives_idle: 0\n    };\n    var Me = Xe(), Na = Me.getTypeParser(20, \"text\"), Qa = Me.getTypeParser(1016, \"text\");\n    Yt.exports.__defineSetter__(\"parseInt8\", function(r) {\n        Me.setTypeParser(20, \"text\", r ? Me.getTypeParser(23, \"text\") : Na), Me.setTypeParser(1016, \"text\", r ? Me.getTypeParser(1007, \"text\") : Qa);\n    });\n});\nvar tt = I((Gh, Mi)=>{\n    \"use strict\";\n    p();\n    var Wa = (qt(), k(Ut)), ja = et();\n    function Ha(r) {\n        var e = r.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"');\n        return '\"' + e + '\"';\n    }\n    a(Ha, \"escapeElement\");\n    function Fi(r) {\n        for(var e = \"{\", t = 0; t < r.length; t++)t > 0 && (e = e + \",\"), r[t] === null || typeof r[t] > \"u\" ? e = e + \"NULL\" : Array.isArray(r[t]) ? e = e + Fi(r[t]) : r[t] instanceof d ? e += \"\\\\\\\\x\" + r[t].toString(\"hex\") : e += Ha(ft(r[t]));\n        return e = e + \"}\", e;\n    }\n    a(Fi, \"arrayString\");\n    var ft = a(function(r, e) {\n        if (r == null) return null;\n        if (r instanceof d) return r;\n        if (ArrayBuffer.isView(r)) {\n            var t = d.from(r.buffer, r.byteOffset, r.byteLength);\n            return t.length === r.byteLength ? t : t.slice(r.byteOffset, r.byteOffset + r.byteLength);\n        }\n        return r instanceof Date ? ja.parseInputDatesAsUTC ? Ka(r) : $a(r) : Array.isArray(r) ? Fi(r) : typeof r == \"object\" ? Ga(r, e) : r.toString();\n    }, \"prepareValue\");\n    function Ga(r, e) {\n        if (r && typeof r.toPostgres == \"function\") {\n            if (e = e || [], e.indexOf(r) !== -1) throw new Error('circular reference detected while preparing \"' + r + '\" for query');\n            return e.push(r), ft(r.toPostgres(ft), e);\n        }\n        return JSON.stringify(r);\n    }\n    a(Ga, \"prepareObject\");\n    function j(r, e) {\n        for(r = \"\" + r; r.length < e;)r = \"0\" + r;\n        return r;\n    }\n    a(j, \"pad\");\n    function $a(r) {\n        var e = -r.getTimezoneOffset(), t = r.getFullYear(), n = t < 1;\n        n && (t = Math.abs(t) + 1);\n        var i = j(t, 4) + \"-\" + j(r.getMonth() + 1, 2) + \"-\" + j(r.getDate(), 2) + \"T\" + j(r.getHours(), 2) + \":\" + j(r.getMinutes(), 2) + \":\" + j(r.getSeconds(), 2) + \".\" + j(r.getMilliseconds(), 3);\n        return e < 0 ? (i += \"-\", e *= -1) : i += \"+\", i += j(Math.floor(e / 60), 2) + \":\" + j(e % 60, 2), n && (i += \" BC\"), i;\n    }\n    a($a, \"dateToString\");\n    function Ka(r) {\n        var e = r.getUTCFullYear(), t = e < 1;\n        t && (e = Math.abs(e) + 1);\n        var n = j(e, 4) + \"-\" + j(r.getUTCMonth() + 1, 2) + \"-\" + j(r.getUTCDate(), 2) + \"T\" + j(r.getUTCHours(), 2) + \":\" + j(r.getUTCMinutes(), 2) + \":\" + j(r.getUTCSeconds(), 2) + \".\" + j(r.getUTCMilliseconds(), 3);\n        return n += \"+00:00\", t && (n += \" BC\"), n;\n    }\n    a(Ka, \"dateToStringUTC\");\n    function Va(r, e, t) {\n        return r = typeof r == \"string\" ? {\n            text: r\n        } : r, e && (typeof e == \"function\" ? r.callback = e : r.values = e), t && (r.callback = t), r;\n    }\n    a(Va, \"normalizeQueryConfig\");\n    var Zt = a(function(r) {\n        return Wa.createHash(\"md5\").update(r, \"utf-8\").digest(\"hex\");\n    }, \"md5\"), za = a(function(r, e, t) {\n        var n = Zt(e + r), i = Zt(d.concat([\n            d.from(n),\n            t\n        ]));\n        return \"md5\" + i;\n    }, \"postgresMd5PasswordHash\");\n    Mi.exports = {\n        prepareValue: a(function(e) {\n            return ft(e);\n        }, \"prepareValueWrapper\"),\n        normalizeQueryConfig: Va,\n        postgresMd5PasswordHash: za,\n        md5: Zt\n    };\n});\nvar qi = I((Vh, Ui)=>{\n    \"use strict\";\n    p();\n    var Jt = (qt(), k(Ut));\n    function Ya(r) {\n        if (r.indexOf(\"SCRAM-SHA-256\") === -1) throw new Error(\"SASL: Only mechanism SCRAM-SHA-256 is currently supported\");\n        let e = Jt.randomBytes(18).toString(\"base64\");\n        return {\n            mechanism: \"SCRAM-SHA-256\",\n            clientNonce: e,\n            response: \"n,,n=*,r=\" + e,\n            message: \"SASLInitialResponse\"\n        };\n    }\n    a(Ya, \"startSession\");\n    function Za(r, e, t) {\n        if (r.message !== \"SASLInitialResponse\") throw new Error(\"SASL: Last message was not SASLInitialResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string\");\n        if (typeof t != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string\");\n        let n = eu(t);\n        if (n.nonce.startsWith(r.clientNonce)) {\n            if (n.nonce.length === r.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        var i = d.from(n.salt, \"base64\"), s = nu(e, i, n.iteration), o = De(s, \"Client Key\"), u = ru(o), c = \"n=*,r=\" + r.clientNonce, h = \"r=\" + n.nonce + \",s=\" + n.salt + \",i=\" + n.iteration, l = \"c=biws,r=\" + n.nonce, y = c + \",\" + h + \",\" + l, E = De(u, y), _ = ki(o, E), P = _.toString(\"base64\"), N = De(s, \"Server Key\"), J = De(N, y);\n        r.message = \"SASLResponse\", r.serverSignature = J.toString(\"base64\"), r.response = l + \",p=\" + P;\n    }\n    a(Za, \"continueSession\");\n    function Ja(r, e) {\n        if (r.message !== \"SASLResponse\") throw new Error(\"SASL: Last message was not SASLResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string\");\n        let { serverSignature: t } = tu(e);\n        if (t !== r.serverSignature) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match\");\n    }\n    a(Ja, \"finalizeSession\");\n    function Xa(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: text must be a string\");\n        return r.split(\"\").map((e, t)=>r.charCodeAt(t)).every((e)=>e >= 33 && e <= 43 || e >= 45 && e <= 126);\n    }\n    a(Xa, \"isPrintableChars\");\n    function Di(r) {\n        return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(r);\n    }\n    a(Di, \"isBase64\");\n    function Oi(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: attribute pairs text must be a string\");\n        return new Map(r.split(\",\").map((e)=>{\n            if (!/^.=/.test(e)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let t = e[0], n = e.substring(2);\n            return [\n                t,\n                n\n            ];\n        }));\n    }\n    a(Oi, \"parseAttributePairs\");\n    function eu(r) {\n        let e = Oi(r), t = e.get(\"r\");\n        if (t) {\n            if (!Xa(t)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing\");\n        let n = e.get(\"s\");\n        if (n) {\n            if (!Di(n)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing\");\n        let i = e.get(\"i\");\n        if (i) {\n            if (!/^[1-9][0-9]*$/.test(i)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing\");\n        let s = parseInt(i, 10);\n        return {\n            nonce: t,\n            salt: n,\n            iteration: s\n        };\n    }\n    a(eu, \"parseServerFirstMessage\");\n    function tu(r) {\n        let t = Oi(r).get(\"v\");\n        if (t) {\n            if (!Di(t)) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing\");\n        return {\n            serverSignature: t\n        };\n    }\n    a(tu, \"parseServerFinalMessage\");\n    function ki(r, e) {\n        if (!d.isBuffer(r)) throw new TypeError(\"first argument must be a Buffer\");\n        if (!d.isBuffer(e)) throw new TypeError(\"second argument must be a Buffer\");\n        if (r.length !== e.length) throw new Error(\"Buffer lengths must match\");\n        if (r.length === 0) throw new Error(\"Buffers cannot be empty\");\n        return d.from(r.map((t, n)=>r[n] ^ e[n]));\n    }\n    a(ki, \"xorBuffers\");\n    function ru(r) {\n        return Jt.createHash(\"sha256\").update(r).digest();\n    }\n    a(ru, \"sha256\");\n    function De(r, e) {\n        return Jt.createHmac(\"sha256\", r).update(e).digest();\n    }\n    a(De, \"hmacSha256\");\n    function nu(r, e, t) {\n        for(var n = De(r, d.concat([\n            e,\n            d.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ])), i = n, s = 0; s < t - 1; s++)n = De(r, n), i = ki(i, n);\n        return i;\n    }\n    a(nu, \"Hi\");\n    Ui.exports = {\n        startSession: Ya,\n        continueSession: Za,\n        finalizeSession: Ja\n    };\n});\nvar Xt = {};\nX(Xt, {\n    join: ()=>iu\n});\nfunction iu(...r) {\n    return r.join(\"/\");\n}\nvar er = K(()=>{\n    \"use strict\";\n    p();\n    a(iu, \"join\");\n});\nvar tr = {};\nX(tr, {\n    stat: ()=>su\n});\nfunction su(r, e) {\n    e(new Error(\"No filesystem\"));\n}\nvar rr = K(()=>{\n    \"use strict\";\n    p();\n    a(su, \"stat\");\n});\nvar nr = {};\nX(nr, {\n    default: ()=>ou\n});\nvar ou, ir = K(()=>{\n    \"use strict\";\n    p();\n    ou = {};\n});\nvar Ni = {};\nX(Ni, {\n    StringDecoder: ()=>sr\n});\nvar or, sr, Qi = K(()=>{\n    \"use strict\";\n    p();\n    or = class or {\n        constructor(e){\n            T(this, \"td\");\n            this.td = new TextDecoder(e);\n        }\n        write(e) {\n            return this.td.decode(e, {\n                stream: !0\n            });\n        }\n        end(e) {\n            return this.td.decode(e);\n        }\n    };\n    a(or, \"StringDecoder\");\n    sr = or;\n});\nvar Gi = I((il, Hi)=>{\n    \"use strict\";\n    p();\n    var { Transform: au } = (ir(), k(nr)), { StringDecoder: uu } = (Qi(), k(Ni)), we = Symbol(\"last\"), pt = Symbol(\"decoder\");\n    function cu(r, e, t) {\n        let n;\n        if (this.overflow) {\n            if (n = this[pt].write(r).split(this.matcher), n.length === 1) return t();\n            n.shift(), this.overflow = !1;\n        } else this[we] += this[pt].write(r), n = this[we].split(this.matcher);\n        this[we] = n.pop();\n        for(let i = 0; i < n.length; i++)try {\n            ji(this, this.mapper(n[i]));\n        } catch (s) {\n            return t(s);\n        }\n        if (this.overflow = this[we].length > this.maxLength, this.overflow && !this.skipOverflow) {\n            t(new Error(\"maximum buffer reached\"));\n            return;\n        }\n        t();\n    }\n    a(cu, \"transform\");\n    function hu(r) {\n        if (this[we] += this[pt].end(), this[we]) try {\n            ji(this, this.mapper(this[we]));\n        } catch (e) {\n            return r(e);\n        }\n        r();\n    }\n    a(hu, \"flush\");\n    function ji(r, e) {\n        e !== void 0 && r.push(e);\n    }\n    a(ji, \"push\");\n    function Wi(r) {\n        return r;\n    }\n    a(Wi, \"noop\");\n    function lu(r, e, t) {\n        switch(r = r || /\\r?\\n/, e = e || Wi, t = t || {}, arguments.length){\n            case 1:\n                typeof r == \"function\" ? (e = r, r = /\\r?\\n/) : typeof r == \"object\" && !(r instanceof RegExp) && !r[Symbol.split] && (t = r, r = /\\r?\\n/);\n                break;\n            case 2:\n                typeof r == \"function\" ? (t = e, e = r, r = /\\r?\\n/) : typeof e == \"object\" && (t = e, e = Wi);\n        }\n        t = Object.assign({}, t), t.autoDestroy = !0, t.transform = cu, t.flush = hu, t.readableObjectMode = !0;\n        let n = new au(t);\n        return n[we] = \"\", n[pt] = new uu(\"utf8\"), n.matcher = r, n.mapper = e, n.maxLength = t.maxLength, n.skipOverflow = t.skipOverflow || !1, n.overflow = !1, n._destroy = function(i, s) {\n            this._writableState.errorEmitted = !1, s(i);\n        }, n;\n    }\n    a(lu, \"split\");\n    Hi.exports = lu;\n});\nvar Vi = I((al, fe)=>{\n    \"use strict\";\n    p();\n    var $i = (er(), k(Xt)), fu = (ir(), k(nr)).Stream, pu = Gi(), Ki = (Ge(), k(He)), du = 5432, dt = m.platform === \"win32\", rt = m.stderr, yu = 56, mu = 7, gu = 61440, wu = 32768;\n    function bu(r) {\n        return (r & gu) == wu;\n    }\n    a(bu, \"isRegFile\");\n    var Oe = [\n        \"host\",\n        \"port\",\n        \"database\",\n        \"user\",\n        \"password\"\n    ], ar = Oe.length, Su = Oe[ar - 1];\n    function ur() {\n        var r = rt instanceof fu && rt.writable === !0;\n        if (r) {\n            var e = Array.prototype.slice.call(arguments).concat(`\n`);\n            rt.write(Ki.format.apply(Ki, e));\n        }\n    }\n    a(ur, \"warn\");\n    Object.defineProperty(fe.exports, \"isWin\", {\n        get: function() {\n            return dt;\n        },\n        set: function(r) {\n            dt = r;\n        }\n    });\n    fe.exports.warnTo = function(r) {\n        var e = rt;\n        return rt = r, e;\n    };\n    fe.exports.getFileName = function(r) {\n        var e = r || m.env, t = e.PGPASSFILE || (dt ? $i.join(e.APPDATA || \"./\", \"postgresql\", \"pgpass.conf\") : $i.join(e.HOME || \"./\", \".pgpass\"));\n        return t;\n    };\n    fe.exports.usePgPass = function(r, e) {\n        return Object.prototype.hasOwnProperty.call(m.env, \"PGPASSWORD\") ? !1 : dt ? !0 : (e = e || \"<unkn>\", bu(r.mode) ? r.mode & (yu | mu) ? (ur('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', e), !1) : !0 : (ur('WARNING: password file \"%s\" is not a plain file', e), !1));\n    };\n    var xu = fe.exports.match = function(r, e) {\n        return Oe.slice(0, -1).reduce(function(t, n, i) {\n            return i == 1 && Number(r[n] || du) === Number(e[n]) ? t && !0 : t && (e[n] === \"*\" || e[n] === r[n]);\n        }, !0);\n    };\n    fe.exports.getPassword = function(r, e, t) {\n        var n, i = e.pipe(pu());\n        function s(c) {\n            var h = Eu(c);\n            h && vu(h) && xu(r, h) && (n = h[Su], i.end());\n        }\n        a(s, \"onLine\");\n        var o = a(function() {\n            e.destroy(), t(n);\n        }, \"onEnd\"), u = a(function(c) {\n            e.destroy(), ur(\"WARNING: error on reading file: %s\", c), t(void 0);\n        }, \"onErr\");\n        e.on(\"error\", u), i.on(\"data\", s).on(\"end\", o).on(\"error\", u);\n    };\n    var Eu = fe.exports.parseLine = function(r) {\n        if (r.length < 11 || r.match(/^\\s+#/)) return null;\n        for(var e = \"\", t = \"\", n = 0, i = 0, s = 0, o = {}, u = !1, c = a(function(l, y, E) {\n            var _ = r.substring(y, E);\n            Object.hasOwnProperty.call(m.env, \"PGPASS_NO_DEESCAPE\") || (_ = _.replace(/\\\\([:\\\\])/g, \"$1\")), o[Oe[l]] = _;\n        }, \"addToObj\"), h = 0; h < r.length - 1; h += 1){\n            if (e = r.charAt(h + 1), t = r.charAt(h), u = n == ar - 1, u) {\n                c(n, i);\n                break;\n            }\n            h >= 0 && e == \":\" && t !== \"\\\\\" && (c(n, i, h + 1), i = h + 2, n += 1);\n        }\n        return o = Object.keys(o).length === ar ? o : null, o;\n    }, vu = fe.exports.isValidEntry = function(r) {\n        for(var e = {\n            0: function(o) {\n                return o.length > 0;\n            },\n            1: function(o) {\n                return o === \"*\" ? !0 : (o = Number(o), isFinite(o) && o > 0 && o < 9007199254740992 && Math.floor(o) === o);\n            },\n            2: function(o) {\n                return o.length > 0;\n            },\n            3: function(o) {\n                return o.length > 0;\n            },\n            4: function(o) {\n                return o.length > 0;\n            }\n        }, t = 0; t < Oe.length; t += 1){\n            var n = e[t], i = r[Oe[t]] || \"\", s = n(i);\n            if (!s) return !1;\n        }\n        return !0;\n    };\n});\nvar Yi = I((ll, cr)=>{\n    \"use strict\";\n    p();\n    var hl = (er(), k(Xt)), zi = (rr(), k(tr)), yt = Vi();\n    cr.exports = function(r, e) {\n        var t = yt.getFileName();\n        zi.stat(t, function(n, i) {\n            if (n || !yt.usePgPass(i, t)) return e(void 0);\n            var s = zi.createReadStream(t);\n            yt.getPassword(r, s, e);\n        });\n    };\n    cr.exports.warnTo = yt.warnTo;\n});\nvar hr = I((pl, Zi)=>{\n    \"use strict\";\n    p();\n    var _u = Xe();\n    function mt(r) {\n        this._types = r || _u, this.text = {}, this.binary = {};\n    }\n    a(mt, \"TypeOverrides\");\n    mt.prototype.getOverrides = function(r) {\n        switch(r){\n            case \"text\":\n                return this.text;\n            case \"binary\":\n                return this.binary;\n            default:\n                return {};\n        }\n    };\n    mt.prototype.setTypeParser = function(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), this.getOverrides(e)[r] = t;\n    };\n    mt.prototype.getTypeParser = function(r, e) {\n        return e = e || \"text\", this.getOverrides(e)[r] || this._types.getTypeParser(r, e);\n    };\n    Zi.exports = mt;\n});\nvar Ji = {};\nX(Ji, {\n    default: ()=>Au\n});\nvar Au, Xi = K(()=>{\n    \"use strict\";\n    p();\n    Au = {};\n});\nvar es = {};\nX(es, {\n    parse: ()=>lr\n});\nfunction lr(r, e = !1) {\n    let { protocol: t } = new URL(r), n = \"http:\" + r.substring(t.length), { username: i, password: s, host: o, hostname: u, port: c, pathname: h, search: l, searchParams: y, hash: E } = new URL(n);\n    s = decodeURIComponent(s);\n    let _ = i + \":\" + s, P = e ? Object.fromEntries(y.entries()) : l;\n    return {\n        href: r,\n        protocol: t,\n        auth: _,\n        username: i,\n        password: s,\n        host: o,\n        hostname: u,\n        port: c,\n        pathname: h,\n        search: l,\n        query: P,\n        hash: E\n    };\n}\nvar fr = K(()=>{\n    \"use strict\";\n    p();\n    a(lr, \"parse\");\n});\nvar rs = I((bl, ts)=>{\n    \"use strict\";\n    p();\n    var Cu = (fr(), k(es)), pr = (rr(), k(tr));\n    function dr(r) {\n        if (r.charAt(0) === \"/\") {\n            var t = r.split(\" \");\n            return {\n                host: t[0],\n                database: t[1]\n            };\n        }\n        var e = Cu.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(r) ? encodeURI(r).replace(/\\%25(\\d\\d)/g, \"%$1\") : r, !0), t = e.query;\n        for(var n in t)Array.isArray(t[n]) && (t[n] = t[n][t[n].length - 1]);\n        var i = (e.auth || \":\").split(\":\");\n        if (t.user = i[0], t.password = i.splice(1).join(\":\"), t.port = e.port, e.protocol == \"socket:\") return t.host = decodeURI(e.pathname), t.database = e.query.db, t.client_encoding = e.query.encoding, t;\n        t.host || (t.host = e.hostname);\n        var s = e.pathname;\n        if (!t.host && s && /^%2f/i.test(s)) {\n            var o = s.split(\"/\");\n            t.host = decodeURIComponent(o[0]), s = o.splice(1).join(\"/\");\n        }\n        switch(s && s.charAt(0) === \"/\" && (s = s.slice(1) || null), t.database = s && decodeURI(s), (t.ssl === \"true\" || t.ssl === \"1\") && (t.ssl = !0), t.ssl === \"0\" && (t.ssl = !1), (t.sslcert || t.sslkey || t.sslrootcert || t.sslmode) && (t.ssl = {}), t.sslcert && (t.ssl.cert = pr.readFileSync(t.sslcert).toString()), t.sslkey && (t.ssl.key = pr.readFileSync(t.sslkey).toString()), t.sslrootcert && (t.ssl.ca = pr.readFileSync(t.sslrootcert).toString()), t.sslmode){\n            case \"disable\":\n                {\n                    t.ssl = !1;\n                    break;\n                }\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                break;\n            case \"no-verify\":\n                {\n                    t.ssl.rejectUnauthorized = !1;\n                    break;\n                }\n        }\n        return t;\n    }\n    a(dr, \"parse\");\n    ts.exports = dr;\n    dr.parse = dr;\n});\nvar gt = I((El, ss)=>{\n    \"use strict\";\n    p();\n    var Iu = (Xi(), k(Ji)), is = et(), ns = rs().parse, V = a(function(r, e, t) {\n        return t === void 0 ? t = m.env[\"PG\" + r.toUpperCase()] : t === !1 || (t = m.env[t]), e[r] || t || is[r];\n    }, \"val\"), Tu = a(function() {\n        switch(m.env.PGSSLMODE){\n            case \"disable\":\n                return !1;\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                return !0;\n            case \"no-verify\":\n                return {\n                    rejectUnauthorized: !1\n                };\n        }\n        return is.ssl;\n    }, \"readSSLConfigFromEnvironment\"), ke = a(function(r) {\n        return \"'\" + (\"\" + r).replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"'\";\n    }, \"quoteParamValue\"), re = a(function(r, e, t) {\n        var n = e[t];\n        n != null && r.push(t + \"=\" + ke(n));\n    }, \"add\"), mr = class mr {\n        constructor(e){\n            e = typeof e == \"string\" ? ns(e) : e || {}, e.connectionString && (e = Object.assign({}, e, ns(e.connectionString))), this.user = V(\"user\", e), this.database = V(\"database\", e), this.database === void 0 && (this.database = this.user), this.port = parseInt(V(\"port\", e), 10), this.host = V(\"host\", e), Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: V(\"password\", e)\n            }), this.binary = V(\"binary\", e), this.options = V(\"options\", e), this.ssl = typeof e.ssl > \"u\" ? Tu() : e.ssl, typeof this.ssl == \"string\" && this.ssl === \"true\" && (this.ssl = !0), this.ssl === \"no-verify\" && (this.ssl = {\n                rejectUnauthorized: !1\n            }), this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this.client_encoding = V(\"client_encoding\", e), this.replication = V(\"replication\", e), this.isDomainSocket = !(this.host || \"\").indexOf(\"/\"), this.application_name = V(\"application_name\", e, \"PGAPPNAME\"), this.fallback_application_name = V(\"fallback_application_name\", e, !1), this.statement_timeout = V(\"statement_timeout\", e, !1), this.lock_timeout = V(\"lock_timeout\", e, !1), this.idle_in_transaction_session_timeout = V(\"idle_in_transaction_session_timeout\", e, !1), this.query_timeout = V(\"query_timeout\", e, !1), e.connectionTimeoutMillis === void 0 ? this.connect_timeout = m.env.PGCONNECT_TIMEOUT || 0 : this.connect_timeout = Math.floor(e.connectionTimeoutMillis / 1e3), e.keepAlive === !1 ? this.keepalives = 0 : e.keepAlive === !0 && (this.keepalives = 1), typeof e.keepAliveInitialDelayMillis == \"number\" && (this.keepalives_idle = Math.floor(e.keepAliveInitialDelayMillis / 1e3));\n        }\n        getLibpqConnectionString(e) {\n            var t = [];\n            re(t, this, \"user\"), re(t, this, \"password\"), re(t, this, \"port\"), re(t, this, \"application_name\"), re(t, this, \"fallback_application_name\"), re(t, this, \"connect_timeout\"), re(t, this, \"options\");\n            var n = typeof this.ssl == \"object\" ? this.ssl : this.ssl ? {\n                sslmode: this.ssl\n            } : {};\n            if (re(t, n, \"sslmode\"), re(t, n, \"sslca\"), re(t, n, \"sslkey\"), re(t, n, \"sslcert\"), re(t, n, \"sslrootcert\"), this.database && t.push(\"dbname=\" + ke(this.database)), this.replication && t.push(\"replication=\" + ke(this.replication)), this.host && t.push(\"host=\" + ke(this.host)), this.isDomainSocket) return e(null, t.join(\" \"));\n            this.client_encoding && t.push(\"client_encoding=\" + ke(this.client_encoding)), Iu.lookup(this.host, function(i, s) {\n                return i ? e(i, null) : (t.push(\"hostaddr=\" + ke(s)), e(null, t.join(\" \")));\n            });\n        }\n    };\n    a(mr, \"ConnectionParameters\");\n    var yr = mr;\n    ss.exports = yr;\n});\nvar us = I((Al, as)=>{\n    \"use strict\";\n    p();\n    var Pu = Xe(), os = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/, wr = class wr {\n        constructor(e, t){\n            this.command = null, this.rowCount = null, this.oid = null, this.rows = [], this.fields = [], this._parsers = void 0, this._types = t, this.RowCtor = null, this.rowAsArray = e === \"array\", this.rowAsArray && (this.parseRow = this._parseRowAsArray);\n        }\n        addCommandComplete(e) {\n            var t;\n            e.text ? t = os.exec(e.text) : t = os.exec(e.command), t && (this.command = t[1], t[3] ? (this.oid = parseInt(t[2], 10), this.rowCount = parseInt(t[3], 10)) : t[2] && (this.rowCount = parseInt(t[2], 10)));\n        }\n        _parseRowAsArray(e) {\n            for(var t = new Array(e.length), n = 0, i = e.length; n < i; n++){\n                var s = e[n];\n                s !== null ? t[n] = this._parsers[n](s) : t[n] = null;\n            }\n            return t;\n        }\n        parseRow(e) {\n            for(var t = {}, n = 0, i = e.length; n < i; n++){\n                var s = e[n], o = this.fields[n].name;\n                s !== null ? t[o] = this._parsers[n](s) : t[o] = null;\n            }\n            return t;\n        }\n        addRow(e) {\n            this.rows.push(e);\n        }\n        addFields(e) {\n            this.fields = e, this.fields.length && (this._parsers = new Array(e.length));\n            for(var t = 0; t < e.length; t++){\n                var n = e[t];\n                this._types ? this._parsers[t] = this._types.getTypeParser(n.dataTypeID, n.format || \"text\") : this._parsers[t] = Pu.getTypeParser(n.dataTypeID, n.format || \"text\");\n            }\n        }\n    };\n    a(wr, \"Result\");\n    var gr = wr;\n    as.exports = gr;\n});\nvar fs = I((Tl, ls)=>{\n    \"use strict\";\n    p();\n    var { EventEmitter: Bu } = ge(), cs = us(), hs = tt(), Sr = class Sr extends Bu {\n        constructor(e, t, n){\n            super(), e = hs.normalizeQueryConfig(e, t, n), this.text = e.text, this.values = e.values, this.rows = e.rows, this.types = e.types, this.name = e.name, this.binary = e.binary, this.portal = e.portal || \"\", this.callback = e.callback, this._rowMode = e.rowMode, m.domain && e.callback && (this.callback = m.domain.bind(e.callback)), this._result = new cs(this._rowMode, this.types), this._results = this._result, this.isPreparedStatement = !1, this._canceledDueToError = !1, this._promise = null;\n        }\n        requiresPreparation() {\n            return this.name || this.rows ? !0 : !this.text || !this.values ? !1 : this.values.length > 0;\n        }\n        _checkForMultirow() {\n            this._result.command && (Array.isArray(this._results) || (this._results = [\n                this._result\n            ]), this._result = new cs(this._rowMode, this.types), this._results.push(this._result));\n        }\n        handleRowDescription(e) {\n            this._checkForMultirow(), this._result.addFields(e.fields), this._accumulateRows = this.callback || !this.listeners(\"row\").length;\n        }\n        handleDataRow(e) {\n            let t;\n            if (!this._canceledDueToError) {\n                try {\n                    t = this._result.parseRow(e.fields);\n                } catch (n) {\n                    this._canceledDueToError = n;\n                    return;\n                }\n                this.emit(\"row\", t, this._result), this._accumulateRows && this._result.addRow(t);\n            }\n        }\n        handleCommandComplete(e, t) {\n            this._checkForMultirow(), this._result.addCommandComplete(e), this.rows && t.sync();\n        }\n        handleEmptyQuery(e) {\n            this.rows && e.sync();\n        }\n        handleError(e, t) {\n            if (this._canceledDueToError && (e = this._canceledDueToError, this._canceledDueToError = !1), this.callback) return this.callback(e);\n            this.emit(\"error\", e);\n        }\n        handleReadyForQuery(e) {\n            if (this._canceledDueToError) return this.handleError(this._canceledDueToError, e);\n            if (this.callback) try {\n                this.callback(null, this._results);\n            } catch (t) {\n                m.nextTick(()=>{\n                    throw t;\n                });\n            }\n            this.emit(\"end\", this._results);\n        }\n        submit(e) {\n            if (typeof this.text != \"string\" && typeof this.name != \"string\") return new Error(\"A query must have either text or a name. Supplying neither is unsupported.\");\n            let t = e.parsedStatements[this.name];\n            return this.text && t && this.text !== t ? new Error(`Prepared statements must be \\\nunique - '${this.name}' was used for a different statement`) : this.values && !Array.isArray(this.values) ? new Error(\"Query values must be an array\") : (this.requiresPreparation() ? this.prepare(e) : e.query(this.text), null);\n        }\n        hasBeenParsed(e) {\n            return this.name && e.parsedStatements[this.name];\n        }\n        handlePortalSuspended(e) {\n            this._getRows(e, this.rows);\n        }\n        _getRows(e, t) {\n            e.execute({\n                portal: this.portal,\n                rows: t\n            }), t ? e.flush() : e.sync();\n        }\n        prepare(e) {\n            this.isPreparedStatement = !0, this.hasBeenParsed(e) || e.parse({\n                text: this.text,\n                name: this.name,\n                types: this.types\n            });\n            try {\n                e.bind({\n                    portal: this.portal,\n                    statement: this.name,\n                    values: this.values,\n                    binary: this.binary,\n                    valueMapper: hs.prepareValue\n                });\n            } catch (t) {\n                this.handleError(t, e);\n                return;\n            }\n            e.describe({\n                type: \"P\",\n                name: this.portal || \"\"\n            }), this._getRows(e, this.rows);\n        }\n        handleCopyInResponse(e) {\n            e.sendCopyFail(\"No source stream defined\");\n        }\n        handleCopyData(e, t) {}\n    };\n    a(Sr, \"Query\");\n    var br = Sr;\n    ls.exports = br;\n});\nvar ds = {};\nX(ds, {\n    Socket: ()=>_e,\n    isIP: ()=>Lu\n});\nfunction Lu(r) {\n    return 0;\n}\nvar ps, x, _e, wt = K(()=>{\n    \"use strict\";\n    p();\n    ps = We(ge(), 1);\n    a(Lu, \"isIP\");\n    x = class x extends ps.EventEmitter {\n        constructor(){\n            super(...arguments);\n            T(this, \"opts\", {});\n            T(this, \"connecting\", !1);\n            T(this, \"pending\", !0);\n            T(this, \"writable\", !0);\n            T(this, \"encrypted\", !1);\n            T(this, \"authorized\", !1);\n            T(this, \"destroyed\", !1);\n            T(this, \"ws\", null);\n            T(this, \"writeBuffer\");\n            T(this, \"tlsState\", 0);\n            T(this, \"tlsRead\");\n            T(this, \"tlsWrite\");\n        }\n        static get poolQueryViaFetch() {\n            return x.opts.poolQueryViaFetch ?? x.defaults.poolQueryViaFetch;\n        }\n        static set poolQueryViaFetch(t) {\n            x.opts.poolQueryViaFetch = t;\n        }\n        static get fetchEndpoint() {\n            return x.opts.fetchEndpoint ?? x.defaults.fetchEndpoint;\n        }\n        static set fetchEndpoint(t) {\n            x.opts.fetchEndpoint = t;\n        }\n        static get fetchConnectionCache() {\n            return x.opts.fetchConnectionCache ?? x.defaults.fetchConnectionCache;\n        }\n        static set fetchConnectionCache(t) {\n            x.opts.fetchConnectionCache = t;\n        }\n        static get fetchFunction() {\n            return x.opts.fetchFunction ?? x.defaults.fetchFunction;\n        }\n        static set fetchFunction(t) {\n            x.opts.fetchFunction = t;\n        }\n        static get webSocketConstructor() {\n            return x.opts.webSocketConstructor ?? x.defaults.webSocketConstructor;\n        }\n        static set webSocketConstructor(t) {\n            x.opts.webSocketConstructor = t;\n        }\n        get webSocketConstructor() {\n            return this.opts.webSocketConstructor ?? x.webSocketConstructor;\n        }\n        set webSocketConstructor(t) {\n            this.opts.webSocketConstructor = t;\n        }\n        static get wsProxy() {\n            return x.opts.wsProxy ?? x.defaults.wsProxy;\n        }\n        static set wsProxy(t) {\n            x.opts.wsProxy = t;\n        }\n        get wsProxy() {\n            return this.opts.wsProxy ?? x.wsProxy;\n        }\n        set wsProxy(t) {\n            this.opts.wsProxy = t;\n        }\n        static get coalesceWrites() {\n            return x.opts.coalesceWrites ?? x.defaults.coalesceWrites;\n        }\n        static set coalesceWrites(t) {\n            x.opts.coalesceWrites = t;\n        }\n        get coalesceWrites() {\n            return this.opts.coalesceWrites ?? x.coalesceWrites;\n        }\n        set coalesceWrites(t) {\n            this.opts.coalesceWrites = t;\n        }\n        static get useSecureWebSocket() {\n            return x.opts.useSecureWebSocket ?? x.defaults.useSecureWebSocket;\n        }\n        static set useSecureWebSocket(t) {\n            x.opts.useSecureWebSocket = t;\n        }\n        get useSecureWebSocket() {\n            return this.opts.useSecureWebSocket ?? x.useSecureWebSocket;\n        }\n        set useSecureWebSocket(t) {\n            this.opts.useSecureWebSocket = t;\n        }\n        static get forceDisablePgSSL() {\n            return x.opts.forceDisablePgSSL ?? x.defaults.forceDisablePgSSL;\n        }\n        static set forceDisablePgSSL(t) {\n            x.opts.forceDisablePgSSL = t;\n        }\n        get forceDisablePgSSL() {\n            return this.opts.forceDisablePgSSL ?? x.forceDisablePgSSL;\n        }\n        set forceDisablePgSSL(t) {\n            this.opts.forceDisablePgSSL = t;\n        }\n        static get disableSNI() {\n            return x.opts.disableSNI ?? x.defaults.disableSNI;\n        }\n        static set disableSNI(t) {\n            x.opts.disableSNI = t;\n        }\n        get disableSNI() {\n            return this.opts.disableSNI ?? x.disableSNI;\n        }\n        set disableSNI(t) {\n            this.opts.disableSNI = t;\n        }\n        static get pipelineConnect() {\n            return x.opts.pipelineConnect ?? x.defaults.pipelineConnect;\n        }\n        static set pipelineConnect(t) {\n            x.opts.pipelineConnect = t;\n        }\n        get pipelineConnect() {\n            return this.opts.pipelineConnect ?? x.pipelineConnect;\n        }\n        set pipelineConnect(t) {\n            this.opts.pipelineConnect = t;\n        }\n        static get subtls() {\n            return x.opts.subtls ?? x.defaults.subtls;\n        }\n        static set subtls(t) {\n            x.opts.subtls = t;\n        }\n        get subtls() {\n            return this.opts.subtls ?? x.subtls;\n        }\n        set subtls(t) {\n            this.opts.subtls = t;\n        }\n        static get pipelineTLS() {\n            return x.opts.pipelineTLS ?? x.defaults.pipelineTLS;\n        }\n        static set pipelineTLS(t) {\n            x.opts.pipelineTLS = t;\n        }\n        get pipelineTLS() {\n            return this.opts.pipelineTLS ?? x.pipelineTLS;\n        }\n        set pipelineTLS(t) {\n            this.opts.pipelineTLS = t;\n        }\n        static get rootCerts() {\n            return x.opts.rootCerts ?? x.defaults.rootCerts;\n        }\n        static set rootCerts(t) {\n            x.opts.rootCerts = t;\n        }\n        get rootCerts() {\n            return this.opts.rootCerts ?? x.rootCerts;\n        }\n        set rootCerts(t) {\n            this.opts.rootCerts = t;\n        }\n        wsProxyAddrForHost(t, n) {\n            let i = this.wsProxy;\n            if (i === void 0) throw new Error(\"No WebSocket proxy is configured. Please see https://github.com/neondatabase/serverless/blob/main/CONFIG.md#wsproxy-string--host-string-port-number--string--string\");\n            return typeof i == \"function\" ? i(t, n) : `${i}?address=${t}:${n}`;\n        }\n        setNoDelay() {\n            return this;\n        }\n        setKeepAlive() {\n            return this;\n        }\n        ref() {\n            return this;\n        }\n        unref() {\n            return this;\n        }\n        connect(t, n, i) {\n            this.connecting = !0, i && this.once(\"connect\", i);\n            let s = a(()=>{\n                this.connecting = !1, this.pending = !1, this.emit(\"connect\"), this.emit(\"ready\");\n            }, \"handleWebSocketOpen\"), o = a((c, h = !1)=>{\n                c.binaryType = \"arraybuffer\", c.addEventListener(\"error\", (l)=>{\n                    this.emit(\"error\", l), this.emit(\"close\");\n                }), c.addEventListener(\"message\", (l)=>{\n                    if (this.tlsState === 0) {\n                        let y = d.from(l.data);\n                        this.emit(\"data\", y);\n                    }\n                }), c.addEventListener(\"close\", ()=>{\n                    this.emit(\"close\");\n                }), h ? s() : c.addEventListener(\"open\", s);\n            }, \"configureWebSocket\"), u;\n            try {\n                u = this.wsProxyAddrForHost(n, typeof t == \"string\" ? parseInt(t, 10) : t);\n            } catch (c) {\n                this.emit(\"error\", c), this.emit(\"close\");\n                return;\n            }\n            try {\n                let h = (this.useSecureWebSocket ? \"wss:\" : \"ws:\") + \"//\" + u;\n                if (this.webSocketConstructor !== void 0) this.ws = new this.webSocketConstructor(h), o(this.ws);\n                else try {\n                    this.ws = new WebSocket(h), o(this.ws);\n                } catch  {\n                    this.ws = new __unstable_WebSocket(h), o(this.ws);\n                }\n            } catch (c) {\n                let l = (this.useSecureWebSocket ? \"https:\" : \"http:\") + \"//\" + u;\n                fetch(l, {\n                    headers: {\n                        Upgrade: \"websocket\"\n                    }\n                }).then((y)=>{\n                    if (this.ws = y.webSocket, this.ws == null) throw c;\n                    this.ws.accept(), o(this.ws, !0);\n                }).catch((y)=>{\n                    this.emit(\"error\", new Error(`All attempts to open a WebSocket to\\\n connect to the database failed. Please refer to https://github.com/neondatabase\\\n/serverless/blob/main/CONFIG.md#websocketconstructor-typeof-websocket--undefined\\\n. Details: ${y.message}`)), this.emit(\"close\");\n                });\n            }\n        }\n        async startTls(t) {\n            if (this.subtls === void 0) throw new Error(\"For Postgres SSL connections, you must set `neonConfig.subtls` to the subtls library. See https://github.com/neondatabase/serverless/blob/main/CONFIG.md for more information.\");\n            this.tlsState = 1;\n            let n = this.subtls.TrustedCert.fromPEM(this.rootCerts), i = new this.subtls.WebSocketReadQueue(this.ws), s = i.read.bind(i), o = this.rawWrite.bind(this), [u, c] = await this.subtls.startTls(t, n, s, o, {\n                useSNI: !this.disableSNI,\n                expectPreData: this.pipelineTLS ? new Uint8Array([\n                    83\n                ]) : void 0\n            });\n            this.tlsRead = u, this.tlsWrite = c, this.tlsState = 2, this.encrypted = !0, this.authorized = !0, this.emit(\"secureConnection\", this), this.tlsReadLoop();\n        }\n        async tlsReadLoop() {\n            for(;;){\n                let t = await this.tlsRead();\n                if (t === void 0) break;\n                {\n                    let n = d.from(t);\n                    this.emit(\"data\", n);\n                }\n            }\n        }\n        rawWrite(t) {\n            if (!this.coalesceWrites) {\n                this.ws.send(t);\n                return;\n            }\n            if (this.writeBuffer === void 0) this.writeBuffer = t, setTimeout(()=>{\n                this.ws.send(this.writeBuffer), this.writeBuffer = void 0;\n            }, 0);\n            else {\n                let n = new Uint8Array(this.writeBuffer.length + t.length);\n                n.set(this.writeBuffer), n.set(t, this.writeBuffer.length), this.writeBuffer = n;\n            }\n        }\n        write(t, n = \"utf8\", i = (s)=>{}) {\n            return t.length === 0 ? (i(), !0) : (typeof t == \"string\" && (t = d.from(t, n)), this.tlsState === 0 ? (this.rawWrite(t), i()) : this.tlsState === 1 ? this.once(\"secureConnection\", ()=>{\n                this.write(t, n, i);\n            }) : (this.tlsWrite(t), i()), !0);\n        }\n        end(t = d.alloc(0), n = \"utf8\", i = ()=>{}) {\n            return this.write(t, n, ()=>{\n                this.ws.close(), i();\n            }), this;\n        }\n        destroy() {\n            return this.destroyed = !0, this.end();\n        }\n    };\n    a(x, \"Socket\"), T(x, \"defaults\", {\n        poolQueryViaFetch: !1,\n        fetchEndpoint: (t)=>\"https://\" + t + \"/sql\",\n        fetchConnectionCache: !1,\n        fetchFunction: void 0,\n        webSocketConstructor: void 0,\n        wsProxy: (t)=>t + \"/v2\",\n        useSecureWebSocket: !0,\n        forceDisablePgSSL: !0,\n        coalesceWrites: !0,\n        pipelineConnect: \"password\",\n        subtls: void 0,\n        rootCerts: \"\",\n        pipelineTLS: !1,\n        disableSNI: !1\n    }), T(x, \"opts\", {});\n    _e = x;\n});\nvar zr = I((C)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(C, \"__esModule\", {\n        value: !0\n    });\n    C.NoticeMessage = C.DataRowMessage = C.CommandCompleteMessage = C.ReadyForQueryMessage = C.NotificationResponseMessage = C.BackendKeyDataMessage = C.AuthenticationMD5Password = C.ParameterStatusMessage = C.ParameterDescriptionMessage = C.RowDescriptionMessage = C.Field = C.CopyResponse = C.CopyDataMessage = C.DatabaseError = C.copyDone = C.emptyQuery = C.replicationStart = C.portalSuspended = C.noData = C.closeComplete = C.bindComplete = C.parseComplete = void 0;\n    C.parseComplete = {\n        name: \"parseComplete\",\n        length: 5\n    };\n    C.bindComplete = {\n        name: \"bindComplete\",\n        length: 5\n    };\n    C.closeComplete = {\n        name: \"closeComplete\",\n        length: 5\n    };\n    C.noData = {\n        name: \"noData\",\n        length: 5\n    };\n    C.portalSuspended = {\n        name: \"portalSuspended\",\n        length: 5\n    };\n    C.replicationStart = {\n        name: \"replicationStart\",\n        length: 4\n    };\n    C.emptyQuery = {\n        name: \"emptyQuery\",\n        length: 4\n    };\n    C.copyDone = {\n        name: \"copyDone\",\n        length: 4\n    };\n    var Dr = class Dr extends Error {\n        constructor(e, t, n){\n            super(e), this.length = t, this.name = n;\n        }\n    };\n    a(Dr, \"DatabaseError\");\n    var xr = Dr;\n    C.DatabaseError = xr;\n    var Or = class Or {\n        constructor(e, t){\n            this.length = e, this.chunk = t, this.name = \"copyData\";\n        }\n    };\n    a(Or, \"CopyDataMessage\");\n    var Er = Or;\n    C.CopyDataMessage = Er;\n    var kr = class kr {\n        constructor(e, t, n, i){\n            this.length = e, this.name = t, this.binary = n, this.columnTypes = new Array(i);\n        }\n    };\n    a(kr, \"CopyResponse\");\n    var vr = kr;\n    C.CopyResponse = vr;\n    var Ur = class Ur {\n        constructor(e, t, n, i, s, o, u){\n            this.name = e, this.tableID = t, this.columnID = n, this.dataTypeID = i, this.dataTypeSize = s, this.dataTypeModifier = o, this.format = u;\n        }\n    };\n    a(Ur, \"Field\");\n    var _r = Ur;\n    C.Field = _r;\n    var qr = class qr {\n        constructor(e, t){\n            this.length = e, this.fieldCount = t, this.name = \"rowDescription\", this.fields = new Array(this.fieldCount);\n        }\n    };\n    a(qr, \"RowDescriptionMessage\");\n    var Ar = qr;\n    C.RowDescriptionMessage = Ar;\n    var Nr = class Nr {\n        constructor(e, t){\n            this.length = e, this.parameterCount = t, this.name = \"parameterDescription\", this.dataTypeIDs = new Array(this.parameterCount);\n        }\n    };\n    a(Nr, \"ParameterDescriptionMessage\");\n    var Cr = Nr;\n    C.ParameterDescriptionMessage = Cr;\n    var Qr = class Qr {\n        constructor(e, t, n){\n            this.length = e, this.parameterName = t, this.parameterValue = n, this.name = \"parameterStatus\";\n        }\n    };\n    a(Qr, \"ParameterStatusMessage\");\n    var Ir = Qr;\n    C.ParameterStatusMessage = Ir;\n    var Wr = class Wr {\n        constructor(e, t){\n            this.length = e, this.salt = t, this.name = \"authenticationMD5Password\";\n        }\n    };\n    a(Wr, \"AuthenticationMD5Password\");\n    var Tr = Wr;\n    C.AuthenticationMD5Password = Tr;\n    var jr = class jr {\n        constructor(e, t, n){\n            this.length = e, this.processID = t, this.secretKey = n, this.name = \"backendKeyData\";\n        }\n    };\n    a(jr, \"BackendKeyDataMessage\");\n    var Pr = jr;\n    C.BackendKeyDataMessage = Pr;\n    var Hr = class Hr {\n        constructor(e, t, n, i){\n            this.length = e, this.processId = t, this.channel = n, this.payload = i, this.name = \"notification\";\n        }\n    };\n    a(Hr, \"NotificationResponseMessage\");\n    var Br = Hr;\n    C.NotificationResponseMessage = Br;\n    var Gr = class Gr {\n        constructor(e, t){\n            this.length = e, this.status = t, this.name = \"readyForQuery\";\n        }\n    };\n    a(Gr, \"ReadyForQueryMessage\");\n    var Lr = Gr;\n    C.ReadyForQueryMessage = Lr;\n    var $r = class $r {\n        constructor(e, t){\n            this.length = e, this.text = t, this.name = \"commandComplete\";\n        }\n    };\n    a($r, \"CommandCompleteMessage\");\n    var Rr = $r;\n    C.CommandCompleteMessage = Rr;\n    var Kr = class Kr {\n        constructor(e, t){\n            this.length = e, this.fields = t, this.name = \"dataRow\", this.fieldCount = t.length;\n        }\n    };\n    a(Kr, \"DataRowMessage\");\n    var Fr = Kr;\n    C.DataRowMessage = Fr;\n    var Vr = class Vr {\n        constructor(e, t){\n            this.length = e, this.message = t, this.name = \"notice\";\n        }\n    };\n    a(Vr, \"NoticeMessage\");\n    var Mr = Vr;\n    C.NoticeMessage = Mr;\n});\nvar ys = I((bt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(bt, \"__esModule\", {\n        value: !0\n    });\n    bt.Writer = void 0;\n    var Zr = class Zr {\n        constructor(e = 256){\n            this.size = e, this.offset = 5, this.headerPosition = 0, this.buffer = d.allocUnsafe(e);\n        }\n        ensure(e) {\n            var t = this.buffer.length - this.offset;\n            if (t < e) {\n                var n = this.buffer, i = n.length + (n.length >> 1) + e;\n                this.buffer = d.allocUnsafe(i), n.copy(this.buffer);\n            }\n        }\n        addInt32(e) {\n            return this.ensure(4), this.buffer[this.offset++] = e >>> 24 & 255, this.buffer[this.offset++] = e >>> 16 & 255, this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addInt16(e) {\n            return this.ensure(2), this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addCString(e) {\n            if (!e) this.ensure(1);\n            else {\n                var t = d.byteLength(e);\n                this.ensure(t + 1), this.buffer.write(e, this.offset, \"utf-8\"), this.offset += t;\n            }\n            return this.buffer[this.offset++] = 0, this;\n        }\n        addString(e = \"\") {\n            var t = d.byteLength(e);\n            return this.ensure(t), this.buffer.write(e, this.offset), this.offset += t, this;\n        }\n        add(e) {\n            return this.ensure(e.length), e.copy(this.buffer, this.offset), this.offset += e.length, this;\n        }\n        join(e) {\n            if (e) {\n                this.buffer[this.headerPosition] = e;\n                let t = this.offset - (this.headerPosition + 1);\n                this.buffer.writeInt32BE(t, this.headerPosition + 1);\n            }\n            return this.buffer.slice(e ? 0 : 5, this.offset);\n        }\n        flush(e) {\n            var t = this.join(e);\n            return this.offset = 5, this.headerPosition = 0, this.buffer = d.allocUnsafe(this.size), t;\n        }\n    };\n    a(Zr, \"Writer\");\n    var Yr = Zr;\n    bt.Writer = Yr;\n});\nvar gs = I((xt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(xt, \"__esModule\", {\n        value: !0\n    });\n    xt.serialize = void 0;\n    var Jr = ys(), F = new Jr.Writer, Ru = a((r)=>{\n        F.addInt16(3).addInt16(0);\n        for (let n of Object.keys(r))F.addCString(n).addCString(r[n]);\n        F.addCString(\"client_encoding\").addCString(\"UTF8\");\n        var e = F.addCString(\"\").flush(), t = e.length + 4;\n        return new Jr.Writer().addInt32(t).add(e).flush();\n    }, \"startup\"), Fu = a(()=>{\n        let r = d.allocUnsafe(8);\n        return r.writeInt32BE(8, 0), r.writeInt32BE(80877103, 4), r;\n    }, \"requestSsl\"), Mu = a((r)=>F.addCString(r).flush(112), \"password\"), Du = a(function(r, e) {\n        return F.addCString(r).addInt32(d.byteLength(e)).addString(e), F.flush(112);\n    }, \"sendSASLInitialResponseMessage\"), Ou = a(function(r) {\n        return F.addString(r).flush(112);\n    }, \"sendSCRAMClientFinalMessage\"), ku = a((r)=>F.addCString(r).flush(81), \"query\"), ms = [], Uu = a((r)=>{\n        let e = r.name || \"\";\n        e.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", e, e.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n        let t = r.types || ms;\n        for(var n = t.length, i = F.addCString(e).addCString(r.text).addInt16(n), s = 0; s < n; s++)i.addInt32(t[s]);\n        return F.flush(80);\n    }, \"parse\"), Ue = new Jr.Writer, qu = a(function(r, e) {\n        for(let t = 0; t < r.length; t++){\n            let n = e ? e(r[t], t) : r[t];\n            n == null ? (F.addInt16(0), Ue.addInt32(-1)) : n instanceof d ? (F.addInt16(1), Ue.addInt32(n.length), Ue.add(n)) : (F.addInt16(0), Ue.addInt32(d.byteLength(n)), Ue.addString(n));\n        }\n    }, \"writeValues\"), Nu = a((r = {})=>{\n        let e = r.portal || \"\", t = r.statement || \"\", n = r.binary || !1, i = r.values || ms, s = i.length;\n        return F.addCString(e).addCString(t), F.addInt16(s), qu(i, r.valueMapper), F.addInt16(s), F.add(Ue.flush()), F.addInt16(n ? 1 : 0), F.flush(66);\n    }, \"bind\"), Qu = d.from([\n        69,\n        0,\n        0,\n        0,\n        9,\n        0,\n        0,\n        0,\n        0,\n        0\n    ]), Wu = a((r)=>{\n        if (!r || !r.portal && !r.rows) return Qu;\n        let e = r.portal || \"\", t = r.rows || 0, n = d.byteLength(e), i = 4 + n + 1 + 4, s = d.allocUnsafe(1 + i);\n        return s[0] = 69, s.writeInt32BE(i, 1), s.write(e, 5, \"utf-8\"), s[n + 5] = 0, s.writeUInt32BE(t, s.length - 4), s;\n    }, \"execute\"), ju = a((r, e)=>{\n        let t = d.allocUnsafe(16);\n        return t.writeInt32BE(16, 0), t.writeInt16BE(1234, 4), t.writeInt16BE(5678, 6), t.writeInt32BE(r, 8), t.writeInt32BE(e, 12), t;\n    }, \"cancel\"), Xr = a((r, e)=>{\n        let n = 4 + d.byteLength(e) + 1, i = d.allocUnsafe(1 + n);\n        return i[0] = r, i.writeInt32BE(n, 1), i.write(e, 5, \"utf-8\"), i[n] = 0, i;\n    }, \"cstringMessage\"), Hu = F.addCString(\"P\").flush(68), Gu = F.addCString(\"S\").flush(68), $u = a((r)=>r.name ? Xr(68, `${r.type}${r.name || \"\"}`) : r.type === \"P\" ? Hu : Gu, \"describe\"), Ku = a((r)=>{\n        let e = `${r.type}${r.name || \"\"}`;\n        return Xr(67, e);\n    }, \"close\"), Vu = a((r)=>F.add(r).flush(100), \"copyData\"), zu = a((r)=>Xr(102, r), \"copyFail\"), St = a((r)=>d.from([\n            r,\n            0,\n            0,\n            0,\n            4\n        ]), \"codeOnlyBuffer\"), Yu = St(72), Zu = St(83), Ju = St(88), Xu = St(99), ec = {\n        startup: Ru,\n        password: Mu,\n        requestSsl: Fu,\n        sendSASLInitialResponseMessage: Du,\n        sendSCRAMClientFinalMessage: Ou,\n        query: ku,\n        parse: Uu,\n        bind: Nu,\n        execute: Wu,\n        describe: $u,\n        close: Ku,\n        flush: ()=>Yu,\n        sync: ()=>Zu,\n        end: ()=>Ju,\n        copyData: Vu,\n        copyDone: ()=>Xu,\n        copyFail: zu,\n        cancel: ju\n    };\n    xt.serialize = ec;\n});\nvar ws = I((Et)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Et, \"__esModule\", {\n        value: !0\n    });\n    Et.BufferReader = void 0;\n    var tc = d.allocUnsafe(0), tn = class tn {\n        constructor(e = 0){\n            this.offset = e, this.buffer = tc, this.encoding = \"utf-8\";\n        }\n        setBuffer(e, t) {\n            this.offset = e, this.buffer = t;\n        }\n        int16() {\n            let e = this.buffer.readInt16BE(this.offset);\n            return this.offset += 2, e;\n        }\n        byte() {\n            let e = this.buffer[this.offset];\n            return this.offset++, e;\n        }\n        int32() {\n            let e = this.buffer.readInt32BE(this.offset);\n            return this.offset += 4, e;\n        }\n        string(e) {\n            let t = this.buffer.toString(this.encoding, this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n        cstring() {\n            let e = this.offset, t = e;\n            for(; this.buffer[t++] !== 0;);\n            return this.offset = t, this.buffer.toString(this.encoding, e, t - 1);\n        }\n        bytes(e) {\n            let t = this.buffer.slice(this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n    };\n    a(tn, \"BufferReader\");\n    var en = tn;\n    Et.BufferReader = en;\n});\nvar bs = {};\nX(bs, {\n    default: ()=>rc\n});\nvar rc, Ss = K(()=>{\n    \"use strict\";\n    p();\n    rc = {};\n});\nvar vs = I((qe)=>{\n    \"use strict\";\n    p();\n    var nc = qe && qe.__importDefault || function(r) {\n        return r && r.__esModule ? r : {\n            default: r\n        };\n    };\n    Object.defineProperty(qe, \"__esModule\", {\n        value: !0\n    });\n    qe.Parser = void 0;\n    var M = zr(), ic = ws(), sc = nc((Ss(), k(bs))), rn = 1, oc = 4, xs = rn + oc, Es = d.allocUnsafe(0), sn = class sn {\n        constructor(e){\n            if (this.buffer = Es, this.bufferLength = 0, this.bufferOffset = 0, this.reader = new ic.BufferReader, e?.mode === \"binary\") throw new Error(\"Binary mode not supported yet\");\n            this.mode = e?.mode || \"text\";\n        }\n        parse(e, t) {\n            this.mergeBuffer(e);\n            let n = this.bufferOffset + this.bufferLength, i = this.bufferOffset;\n            for(; i + xs <= n;){\n                let s = this.buffer[i], o = this.buffer.readUInt32BE(i + rn), u = rn + o;\n                if (u + i <= n) {\n                    let c = this.handlePacket(i + xs, s, o, this.buffer);\n                    t(c), i += u;\n                } else break;\n            }\n            i === n ? (this.buffer = Es, this.bufferLength = 0, this.bufferOffset = 0) : (this.bufferLength = n - i, this.bufferOffset = i);\n        }\n        mergeBuffer(e) {\n            if (this.bufferLength > 0) {\n                let t = this.bufferLength + e.byteLength;\n                if (t + this.bufferOffset > this.buffer.byteLength) {\n                    let i;\n                    if (t <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) i = this.buffer;\n                    else {\n                        let s = this.buffer.byteLength * 2;\n                        for(; t >= s;)s *= 2;\n                        i = d.allocUnsafe(s);\n                    }\n                    this.buffer.copy(i, 0, this.bufferOffset, this.bufferOffset + this.bufferLength), this.buffer = i, this.bufferOffset = 0;\n                }\n                e.copy(this.buffer, this.bufferOffset + this.bufferLength), this.bufferLength = t;\n            } else this.buffer = e, this.bufferOffset = 0, this.bufferLength = e.byteLength;\n        }\n        handlePacket(e, t, n, i) {\n            switch(t){\n                case 50:\n                    return M.bindComplete;\n                case 49:\n                    return M.parseComplete;\n                case 51:\n                    return M.closeComplete;\n                case 110:\n                    return M.noData;\n                case 115:\n                    return M.portalSuspended;\n                case 99:\n                    return M.copyDone;\n                case 87:\n                    return M.replicationStart;\n                case 73:\n                    return M.emptyQuery;\n                case 68:\n                    return this.parseDataRowMessage(e, n, i);\n                case 67:\n                    return this.parseCommandCompleteMessage(e, n, i);\n                case 90:\n                    return this.parseReadyForQueryMessage(e, n, i);\n                case 65:\n                    return this.parseNotificationMessage(e, n, i);\n                case 82:\n                    return this.parseAuthenticationResponse(e, n, i);\n                case 83:\n                    return this.parseParameterStatusMessage(e, n, i);\n                case 75:\n                    return this.parseBackendKeyData(e, n, i);\n                case 69:\n                    return this.parseErrorMessage(e, n, i, \"error\");\n                case 78:\n                    return this.parseErrorMessage(e, n, i, \"notice\");\n                case 84:\n                    return this.parseRowDescriptionMessage(e, n, i);\n                case 116:\n                    return this.parseParameterDescriptionMessage(e, n, i);\n                case 71:\n                    return this.parseCopyInMessage(e, n, i);\n                case 72:\n                    return this.parseCopyOutMessage(e, n, i);\n                case 100:\n                    return this.parseCopyData(e, n, i);\n                default:\n                    sc.default.fail(`unknown message code: ${t.toString(16)}`);\n            }\n        }\n        parseReadyForQueryMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.string(1);\n            return new M.ReadyForQueryMessage(t, i);\n        }\n        parseCommandCompleteMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring();\n            return new M.CommandCompleteMessage(t, i);\n        }\n        parseCopyData(e, t, n) {\n            let i = n.slice(e, e + (t - 4));\n            return new M.CopyDataMessage(t, i);\n        }\n        parseCopyInMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyInResponse\");\n        }\n        parseCopyOutMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyOutResponse\");\n        }\n        parseCopyMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = this.reader.byte() !== 0, o = this.reader.int16(), u = new M.CopyResponse(t, i, s, o);\n            for(let c = 0; c < o; c++)u.columnTypes[c] = this.reader.int16();\n            return u;\n        }\n        parseNotificationMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.cstring(), o = this.reader.cstring();\n            return new M.NotificationResponseMessage(t, i, s, o);\n        }\n        parseRowDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new M.RowDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.fields[o] = this.parseField();\n            return s;\n        }\n        parseField() {\n            let e = this.reader.cstring(), t = this.reader.int32(), n = this.reader.int16(), i = this.reader.int32(), s = this.reader.int16(), o = this.reader.int32(), u = this.reader.int16() === 0 ? \"text\" : \"binary\";\n            return new M.Field(e, t, n, i, s, o, u);\n        }\n        parseParameterDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new M.ParameterDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.dataTypeIDs[o] = this.reader.int32();\n            return s;\n        }\n        parseDataRowMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new Array(i);\n            for(let o = 0; o < i; o++){\n                let u = this.reader.int32();\n                s[o] = u === -1 ? null : this.reader.string(u);\n            }\n            return new M.DataRowMessage(t, s);\n        }\n        parseParameterStatusMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring(), s = this.reader.cstring();\n            return new M.ParameterStatusMessage(t, i, s);\n        }\n        parseBackendKeyData(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.int32();\n            return new M.BackendKeyDataMessage(t, i, s);\n        }\n        parseAuthenticationResponse(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = {\n                name: \"authenticationOk\",\n                length: t\n            };\n            switch(i){\n                case 0:\n                    break;\n                case 3:\n                    s.length === 8 && (s.name = \"authenticationCleartextPassword\");\n                    break;\n                case 5:\n                    if (s.length === 12) {\n                        s.name = \"authenticationMD5Password\";\n                        let u = this.reader.bytes(4);\n                        return new M.AuthenticationMD5Password(t, u);\n                    }\n                    break;\n                case 10:\n                    s.name = \"authenticationSASL\", s.mechanisms = [];\n                    let o;\n                    do o = this.reader.cstring(), o && s.mechanisms.push(o);\n                    while (o);\n                    break;\n                case 11:\n                    s.name = \"authenticationSASLContinue\", s.data = this.reader.string(t - 8);\n                    break;\n                case 12:\n                    s.name = \"authenticationSASLFinal\", s.data = this.reader.string(t - 8);\n                    break;\n                default:\n                    throw new Error(\"Unknown authenticationOk message type \" + i);\n            }\n            return s;\n        }\n        parseErrorMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = {}, o = this.reader.string(1);\n            for(; o !== \"\\x00\";)s[o] = this.reader.cstring(), o = this.reader.string(1);\n            let u = s.M, c = i === \"notice\" ? new M.NoticeMessage(t, u) : new M.DatabaseError(u, t, i);\n            return c.severity = s.S, c.code = s.C, c.detail = s.D, c.hint = s.H, c.position = s.P, c.internalPosition = s.p, c.internalQuery = s.q, c.where = s.W, c.schema = s.s, c.table = s.t, c.column = s.c, c.dataType = s.d, c.constraint = s.n, c.file = s.F, c.line = s.L, c.routine = s.R, c;\n        }\n    };\n    a(sn, \"Parser\");\n    var nn = sn;\n    qe.Parser = nn;\n});\nvar on = I((be)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(be, \"__esModule\", {\n        value: !0\n    });\n    be.DatabaseError = be.serialize = be.parse = void 0;\n    var ac = zr();\n    Object.defineProperty(be, \"DatabaseError\", {\n        enumerable: !0,\n        get: function() {\n            return ac.DatabaseError;\n        }\n    });\n    var uc = gs();\n    Object.defineProperty(be, \"serialize\", {\n        enumerable: !0,\n        get: function() {\n            return uc.serialize;\n        }\n    });\n    var cc = vs();\n    function hc(r, e) {\n        let t = new cc.Parser;\n        return r.on(\"data\", (n)=>t.parse(n, e)), new Promise((n)=>r.on(\"end\", ()=>n()));\n    }\n    a(hc, \"parse\");\n    be.parse = hc;\n});\nvar _s = {};\nX(_s, {\n    connect: ()=>lc\n});\nfunction lc({ socket: r, servername: e }) {\n    return r.startTls(e), r;\n}\nvar As = K(()=>{\n    \"use strict\";\n    p();\n    a(lc, \"connect\");\n});\nvar cn = I((ef, Ts)=>{\n    \"use strict\";\n    p();\n    var Cs = (wt(), k(ds)), fc = ge().EventEmitter, { parse: pc, serialize: q } = on(), Is = q.flush(), dc = q.sync(), yc = q.end(), un = class un extends fc {\n        constructor(e){\n            super(), e = e || {}, this.stream = e.stream || new Cs.Socket, this._keepAlive = e.keepAlive, this._keepAliveInitialDelayMillis = e.keepAliveInitialDelayMillis, this.lastBuffer = !1, this.parsedStatements = {}, this.ssl = e.ssl || !1, this._ending = !1, this._emitMessage = !1;\n            var t = this;\n            this.on(\"newListener\", function(n) {\n                n === \"message\" && (t._emitMessage = !0);\n            });\n        }\n        connect(e, t) {\n            var n = this;\n            this._connecting = !0, this.stream.setNoDelay(!0), this.stream.connect(e, t), this.stream.once(\"connect\", function() {\n                n._keepAlive && n.stream.setKeepAlive(!0, n._keepAliveInitialDelayMillis), n.emit(\"connect\");\n            });\n            let i = a(function(s) {\n                n._ending && (s.code === \"ECONNRESET\" || s.code === \"EPIPE\") || n.emit(\"error\", s);\n            }, \"reportStreamError\");\n            if (this.stream.on(\"error\", i), this.stream.on(\"close\", function() {\n                n.emit(\"end\");\n            }), !this.ssl) return this.attachListeners(this.stream);\n            this.stream.once(\"data\", function(s) {\n                var o = s.toString(\"utf8\");\n                switch(o){\n                    case \"S\":\n                        break;\n                    case \"N\":\n                        return n.stream.end(), n.emit(\"error\", new Error(\"The server does not support SSL connections\"));\n                    default:\n                        return n.stream.end(), n.emit(\"error\", new Error(\"There was an error establishing an SSL connection\"));\n                }\n                var u = (As(), k(_s));\n                let c = {\n                    socket: n.stream\n                };\n                n.ssl !== !0 && (Object.assign(c, n.ssl), \"key\" in n.ssl && (c.key = n.ssl.key)), Cs.isIP(t) === 0 && (c.servername = t);\n                try {\n                    n.stream = u.connect(c);\n                } catch (h) {\n                    return n.emit(\"error\", h);\n                }\n                n.attachListeners(n.stream), n.stream.on(\"error\", i), n.emit(\"sslconnect\");\n            });\n        }\n        attachListeners(e) {\n            e.on(\"end\", ()=>{\n                this.emit(\"end\");\n            }), pc(e, (t)=>{\n                var n = t.name === \"error\" ? \"errorMessage\" : t.name;\n                this._emitMessage && this.emit(\"message\", t), this.emit(n, t);\n            });\n        }\n        requestSsl() {\n            this.stream.write(q.requestSsl());\n        }\n        startup(e) {\n            this.stream.write(q.startup(e));\n        }\n        cancel(e, t) {\n            this._send(q.cancel(e, t));\n        }\n        password(e) {\n            this._send(q.password(e));\n        }\n        sendSASLInitialResponseMessage(e, t) {\n            this._send(q.sendSASLInitialResponseMessage(e, t));\n        }\n        sendSCRAMClientFinalMessage(e) {\n            this._send(q.sendSCRAMClientFinalMessage(e));\n        }\n        _send(e) {\n            return this.stream.writable ? this.stream.write(e) : !1;\n        }\n        query(e) {\n            this._send(q.query(e));\n        }\n        parse(e) {\n            this._send(q.parse(e));\n        }\n        bind(e) {\n            this._send(q.bind(e));\n        }\n        execute(e) {\n            this._send(q.execute(e));\n        }\n        flush() {\n            this.stream.writable && this.stream.write(Is);\n        }\n        sync() {\n            this._ending = !0, this._send(Is), this._send(dc);\n        }\n        ref() {\n            this.stream.ref();\n        }\n        unref() {\n            this.stream.unref();\n        }\n        end() {\n            if (this._ending = !0, !this._connecting || !this.stream.writable) {\n                this.stream.end();\n                return;\n            }\n            return this.stream.write(yc, ()=>{\n                this.stream.end();\n            });\n        }\n        close(e) {\n            this._send(q.close(e));\n        }\n        describe(e) {\n            this._send(q.describe(e));\n        }\n        sendCopyFromChunk(e) {\n            this._send(q.copyData(e));\n        }\n        endCopyFrom() {\n            this._send(q.copyDone());\n        }\n        sendCopyFail(e) {\n            this._send(q.copyFail(e));\n        }\n    };\n    a(un, \"Connection\");\n    var an = un;\n    Ts.exports = an;\n});\nvar Ls = I((sf, Bs)=>{\n    \"use strict\";\n    p();\n    var mc = ge().EventEmitter, nf = (Ge(), k(He)), gc = tt(), hn = qi(), wc = Yi(), bc = hr(), Sc = gt(), Ps = fs(), xc = et(), Ec = cn(), ln = class ln extends mc {\n        constructor(e){\n            super(), this.connectionParameters = new Sc(e), this.user = this.connectionParameters.user, this.database = this.connectionParameters.database, this.port = this.connectionParameters.port, this.host = this.connectionParameters.host, Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: this.connectionParameters.password\n            }), this.replication = this.connectionParameters.replication;\n            var t = e || {};\n            this._Promise = t.Promise || b.Promise, this._types = new bc(t.types), this._ending = !1, this._connecting = !1, this._connected = !1, this._connectionError = !1, this._queryable = !0, this.connection = t.connection || new Ec({\n                stream: t.stream,\n                ssl: this.connectionParameters.ssl,\n                keepAlive: t.keepAlive || !1,\n                keepAliveInitialDelayMillis: t.keepAliveInitialDelayMillis || 0,\n                encoding: this.connectionParameters.client_encoding || \"utf8\"\n            }), this.queryQueue = [], this.binary = t.binary || xc.binary, this.processID = null, this.secretKey = null, this.ssl = this.connectionParameters.ssl || !1, this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this._connectionTimeoutMillis = t.connectionTimeoutMillis || 0;\n        }\n        _errorAllQueries(e) {\n            let t = a((n)=>{\n                m.nextTick(()=>{\n                    n.handleError(e, this.connection);\n                });\n            }, \"enqueueError\");\n            this.activeQuery && (t(this.activeQuery), this.activeQuery = null), this.queryQueue.forEach(t), this.queryQueue.length = 0;\n        }\n        _connect(e) {\n            var t = this, n = this.connection;\n            if (this._connectionCallback = e, this._connecting || this._connected) {\n                let i = new Error(\"Client has already been connected. You cannot reuse a client.\");\n                m.nextTick(()=>{\n                    e(i);\n                });\n                return;\n            }\n            this._connecting = !0, this.connectionTimeoutHandle, this._connectionTimeoutMillis > 0 && (this.connectionTimeoutHandle = setTimeout(()=>{\n                n._ending = !0, n.stream.destroy(new Error(\"timeout expired\"));\n            }, this._connectionTimeoutMillis)), this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                t.ssl ? n.requestSsl() : n.startup(t.getStartupConf());\n            }), n.on(\"sslconnect\", function() {\n                n.startup(t.getStartupConf());\n            }), this._attachListeners(n), n.once(\"end\", ()=>{\n                let i = this._ending ? new Error(\"Connection terminated\") : new Error(\"Connection terminated unexpectedly\");\n                clearTimeout(this.connectionTimeoutHandle), this._errorAllQueries(i), this._ending || (this._connecting && !this._connectionError ? this._connectionCallback ? this._connectionCallback(i) : this._handleErrorEvent(i) : this._connectionError || this._handleErrorEvent(i)), m.nextTick(()=>{\n                    this.emit(\"end\");\n                });\n            });\n        }\n        connect(e) {\n            if (e) {\n                this._connect(e);\n                return;\n            }\n            return new this._Promise((t, n)=>{\n                this._connect((i)=>{\n                    i ? n(i) : t();\n                });\n            });\n        }\n        _attachListeners(e) {\n            e.on(\"authenticationCleartextPassword\", this._handleAuthCleartextPassword.bind(this)), e.on(\"authenticationMD5Password\", this._handleAuthMD5Password.bind(this)), e.on(\"authenticationSASL\", this._handleAuthSASL.bind(this)), e.on(\"authenticationSASLContinue\", this._handleAuthSASLContinue.bind(this)), e.on(\"authenticationSASLFinal\", this._handleAuthSASLFinal.bind(this)), e.on(\"backendKeyData\", this._handleBackendKeyData.bind(this)), e.on(\"error\", this._handleErrorEvent.bind(this)), e.on(\"errorMessage\", this._handleErrorMessage.bind(this)), e.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)), e.on(\"notice\", this._handleNotice.bind(this)), e.on(\"rowDescription\", this._handleRowDescription.bind(this)), e.on(\"dataRow\", this._handleDataRow.bind(this)), e.on(\"portalSuspended\", this._handlePortalSuspended.bind(this)), e.on(\"emptyQuery\", this._handleEmptyQuery.bind(this)), e.on(\"commandComplete\", this._handleCommandComplete.bind(this)), e.on(\"parseComplete\", this._handleParseComplete.bind(this)), e.on(\"copyInResponse\", this._handleCopyInResponse.bind(this)), e.on(\"copyData\", this._handleCopyData.bind(this)), e.on(\"notification\", this._handleNotification.bind(this));\n        }\n        _checkPgPass(e) {\n            let t = this.connection;\n            typeof this.password == \"function\" ? this._Promise.resolve().then(()=>this.password()).then((n)=>{\n                if (n !== void 0) {\n                    if (typeof n != \"string\") {\n                        t.emit(\"error\", new TypeError(\"Password must be a string\"));\n                        return;\n                    }\n                    this.connectionParameters.password = this.password = n;\n                } else this.connectionParameters.password = this.password = null;\n                e();\n            }).catch((n)=>{\n                t.emit(\"error\", n);\n            }) : this.password !== null ? e() : wc(this.connectionParameters, (n)=>{\n                n !== void 0 && (this.connectionParameters.password = this.password = n), e();\n            });\n        }\n        _handleAuthCleartextPassword(e) {\n            this._checkPgPass(()=>{\n                this.connection.password(this.password);\n            });\n        }\n        _handleAuthMD5Password(e) {\n            this._checkPgPass(()=>{\n                let t = gc.postgresMd5PasswordHash(this.user, this.password, e.salt);\n                this.connection.password(t);\n            });\n        }\n        _handleAuthSASL(e) {\n            this._checkPgPass(()=>{\n                this.saslSession = hn.startSession(e.mechanisms), this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response);\n            });\n        }\n        _handleAuthSASLContinue(e) {\n            hn.continueSession(this.saslSession, this.password, e.data), this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n        }\n        _handleAuthSASLFinal(e) {\n            hn.finalizeSession(this.saslSession, e.data), this.saslSession = null;\n        }\n        _handleBackendKeyData(e) {\n            this.processID = e.processID, this.secretKey = e.secretKey;\n        }\n        _handleReadyForQuery(e) {\n            this._connecting && (this._connecting = !1, this._connected = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback && (this._connectionCallback(null, this), this._connectionCallback = null), this.emit(\"connect\"));\n            let { activeQuery: t } = this;\n            this.activeQuery = null, this.readyForQuery = !0, t && t.handleReadyForQuery(this.connection), this._pulseQueryQueue();\n        }\n        _handleErrorWhileConnecting(e) {\n            if (!this._connectionError) {\n                if (this._connectionError = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback) return this._connectionCallback(e);\n                this.emit(\"error\", e);\n            }\n        }\n        _handleErrorEvent(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            this._queryable = !1, this._errorAllQueries(e), this.emit(\"error\", e);\n        }\n        _handleErrorMessage(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            let t = this.activeQuery;\n            if (!t) {\n                this._handleErrorEvent(e);\n                return;\n            }\n            this.activeQuery = null, t.handleError(e, this.connection);\n        }\n        _handleRowDescription(e) {\n            this.activeQuery.handleRowDescription(e);\n        }\n        _handleDataRow(e) {\n            this.activeQuery.handleDataRow(e);\n        }\n        _handlePortalSuspended(e) {\n            this.activeQuery.handlePortalSuspended(this.connection);\n        }\n        _handleEmptyQuery(e) {\n            this.activeQuery.handleEmptyQuery(this.connection);\n        }\n        _handleCommandComplete(e) {\n            this.activeQuery.handleCommandComplete(e, this.connection);\n        }\n        _handleParseComplete(e) {\n            this.activeQuery.name && (this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text);\n        }\n        _handleCopyInResponse(e) {\n            this.activeQuery.handleCopyInResponse(this.connection);\n        }\n        _handleCopyData(e) {\n            this.activeQuery.handleCopyData(e, this.connection);\n        }\n        _handleNotification(e) {\n            this.emit(\"notification\", e);\n        }\n        _handleNotice(e) {\n            this.emit(\"notice\", e);\n        }\n        getStartupConf() {\n            var e = this.connectionParameters, t = {\n                user: e.user,\n                database: e.database\n            }, n = e.application_name || e.fallback_application_name;\n            return n && (t.application_name = n), e.replication && (t.replication = \"\" + e.replication), e.statement_timeout && (t.statement_timeout = String(parseInt(e.statement_timeout, 10))), e.lock_timeout && (t.lock_timeout = String(parseInt(e.lock_timeout, 10))), e.idle_in_transaction_session_timeout && (t.idle_in_transaction_session_timeout = String(parseInt(e.idle_in_transaction_session_timeout, 10))), e.options && (t.options = e.options), t;\n        }\n        cancel(e, t) {\n            if (e.activeQuery === t) {\n                var n = this.connection;\n                this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                    n.cancel(e.processID, e.secretKey);\n                });\n            } else e.queryQueue.indexOf(t) !== -1 && e.queryQueue.splice(e.queryQueue.indexOf(t), 1);\n        }\n        setTypeParser(e, t, n) {\n            return this._types.setTypeParser(e, t, n);\n        }\n        getTypeParser(e, t) {\n            return this._types.getTypeParser(e, t);\n        }\n        escapeIdentifier(e) {\n            return '\"' + e.replace(/\"/g, '\"\"') + '\"';\n        }\n        escapeLiteral(e) {\n            for(var t = !1, n = \"'\", i = 0; i < e.length; i++){\n                var s = e[i];\n                s === \"'\" ? n += s + s : s === \"\\\\\" ? (n += s + s, t = !0) : n += s;\n            }\n            return n += \"'\", t === !0 && (n = \" E\" + n), n;\n        }\n        _pulseQueryQueue() {\n            if (this.readyForQuery === !0) if (this.activeQuery = this.queryQueue.shift(), this.activeQuery) {\n                this.readyForQuery = !1, this.hasExecuted = !0;\n                let e = this.activeQuery.submit(this.connection);\n                e && m.nextTick(()=>{\n                    this.activeQuery.handleError(e, this.connection), this.readyForQuery = !0, this._pulseQueryQueue();\n                });\n            } else this.hasExecuted && (this.activeQuery = null, this.emit(\"drain\"));\n        }\n        query(e, t, n) {\n            var i, s, o, u, c;\n            if (e == null) throw new TypeError(\"Client was passed a null or undefined query\");\n            return typeof e.submit == \"function\" ? (o = e.query_timeout || this.connectionParameters.query_timeout, s = i = e, typeof t == \"function\" && (i.callback = i.callback || t)) : (o = this.connectionParameters.query_timeout, i = new Ps(e, t, n), i.callback || (s = new this._Promise((h, l)=>{\n                i.callback = (y, E)=>y ? l(y) : h(E);\n            }))), o && (c = i.callback, u = setTimeout(()=>{\n                var h = new Error(\"Query read timeout\");\n                m.nextTick(()=>{\n                    i.handleError(h, this.connection);\n                }), c(h), i.callback = ()=>{};\n                var l = this.queryQueue.indexOf(i);\n                l > -1 && this.queryQueue.splice(l, 1), this._pulseQueryQueue();\n            }, o), i.callback = (h, l)=>{\n                clearTimeout(u), c(h, l);\n            }), this.binary && !i.binary && (i.binary = !0), i._result && !i._result._types && (i._result._types = this._types), this._queryable ? this._ending ? (m.nextTick(()=>{\n                i.handleError(new Error(\"Client was closed and is not queryable\"), this.connection);\n            }), s) : (this.queryQueue.push(i), this._pulseQueryQueue(), s) : (m.nextTick(()=>{\n                i.handleError(new Error(\"Client has encountered a connection error and is not queryable\"), this.connection);\n            }), s);\n        }\n        ref() {\n            this.connection.ref();\n        }\n        unref() {\n            this.connection.unref();\n        }\n        end(e) {\n            if (this._ending = !0, !this.connection._connecting) if (e) e();\n            else return this._Promise.resolve();\n            if (this.activeQuery || !this._queryable ? this.connection.stream.destroy() : this.connection.end(), e) this.connection.once(\"end\", e);\n            else return new this._Promise((t)=>{\n                this.connection.once(\"end\", t);\n            });\n        }\n    };\n    a(ln, \"Client\");\n    var vt = ln;\n    vt.Query = Ps;\n    Bs.exports = vt;\n});\nvar Ds = I((uf, Ms)=>{\n    \"use strict\";\n    p();\n    var vc = ge().EventEmitter, Rs = a(function() {}, \"NOOP\"), Fs = a((r, e)=>{\n        let t = r.findIndex(e);\n        return t === -1 ? void 0 : r.splice(t, 1)[0];\n    }, \"removeWhere\"), dn = class dn {\n        constructor(e, t, n){\n            this.client = e, this.idleListener = t, this.timeoutId = n;\n        }\n    };\n    a(dn, \"IdleItem\");\n    var fn = dn, yn = class yn {\n        constructor(e){\n            this.callback = e;\n        }\n    };\n    a(yn, \"PendingItem\");\n    var Ne = yn;\n    function _c() {\n        throw new Error(\"Release called on client which has already been released to the pool.\");\n    }\n    a(_c, \"throwOnDoubleRelease\");\n    function _t(r, e) {\n        if (e) return {\n            callback: e,\n            result: void 0\n        };\n        let t, n, i = a(function(o, u) {\n            o ? t(o) : n(u);\n        }, \"cb\"), s = new r(function(o, u) {\n            n = o, t = u;\n        }).catch((o)=>{\n            throw Error.captureStackTrace(o), o;\n        });\n        return {\n            callback: i,\n            result: s\n        };\n    }\n    a(_t, \"promisify\");\n    function Ac(r, e) {\n        return a(function t(n) {\n            n.client = e, e.removeListener(\"error\", t), e.on(\"error\", ()=>{\n                r.log(\"additional client error after disconnection due to error\", n);\n            }), r._remove(e), r.emit(\"error\", n, e);\n        }, \"idleListener\");\n    }\n    a(Ac, \"makeIdleListener\");\n    var mn = class mn extends vc {\n        constructor(e, t){\n            super(), this.options = Object.assign({}, e), e != null && \"password\" in e && Object.defineProperty(this.options, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: e.password\n            }), e != null && e.ssl && e.ssl.key && Object.defineProperty(this.options.ssl, \"key\", {\n                enumerable: !1\n            }), this.options.max = this.options.max || this.options.poolSize || 10, this.options.maxUses = this.options.maxUses || 1 / 0, this.options.allowExitOnIdle = this.options.allowExitOnIdle || !1, this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0, this.log = this.options.log || function() {}, this.Client = this.options.Client || t || At().Client, this.Promise = this.options.Promise || b.Promise, typeof this.options.idleTimeoutMillis > \"u\" && (this.options.idleTimeoutMillis = 1e4), this._clients = [], this._idle = [], this._expired = new WeakSet, this._pendingQueue = [], this._endCallback = void 0, this.ending = !1, this.ended = !1;\n        }\n        _isFull() {\n            return this._clients.length >= this.options.max;\n        }\n        _pulseQueue() {\n            if (this.log(\"pulse queue\"), this.ended) {\n                this.log(\"pulse queue ended\");\n                return;\n            }\n            if (this.ending) {\n                this.log(\"pulse queue on ending\"), this._idle.length && this._idle.slice().map((t)=>{\n                    this._remove(t.client);\n                }), this._clients.length || (this.ended = !0, this._endCallback());\n                return;\n            }\n            if (!this._pendingQueue.length) {\n                this.log(\"no queued requests\");\n                return;\n            }\n            if (!this._idle.length && this._isFull()) return;\n            let e = this._pendingQueue.shift();\n            if (this._idle.length) {\n                let t = this._idle.pop();\n                clearTimeout(t.timeoutId);\n                let n = t.client;\n                n.ref && n.ref();\n                let i = t.idleListener;\n                return this._acquireClient(n, e, i, !1);\n            }\n            if (!this._isFull()) return this.newClient(e);\n            throw new Error(\"unexpected condition\");\n        }\n        _remove(e) {\n            let t = Fs(this._idle, (n)=>n.client === e);\n            t !== void 0 && clearTimeout(t.timeoutId), this._clients = this._clients.filter((n)=>n !== e), e.end(), this.emit(\"remove\", e);\n        }\n        connect(e) {\n            if (this.ending) {\n                let i = new Error(\"Cannot use a pool after calling end on the pool\");\n                return e ? e(i) : this.Promise.reject(i);\n            }\n            let t = _t(this.Promise, e), n = t.result;\n            if (this._isFull() || this._idle.length) {\n                if (this._idle.length && m.nextTick(()=>this._pulseQueue()), !this.options.connectionTimeoutMillis) return this._pendingQueue.push(new Ne(t.callback)), n;\n                let i = a((u, c, h)=>{\n                    clearTimeout(o), t.callback(u, c, h);\n                }, \"queueCallback\"), s = new Ne(i), o = setTimeout(()=>{\n                    Fs(this._pendingQueue, (u)=>u.callback === i), s.timedOut = !0, t.callback(new Error(\"timeout exceeded when trying to connect\"));\n                }, this.options.connectionTimeoutMillis);\n                return this._pendingQueue.push(s), n;\n            }\n            return this.newClient(new Ne(t.callback)), n;\n        }\n        newClient(e) {\n            let t = new this.Client(this.options);\n            this._clients.push(t);\n            let n = Ac(this, t);\n            this.log(\"checking client timeout\");\n            let i, s = !1;\n            this.options.connectionTimeoutMillis && (i = setTimeout(()=>{\n                this.log(\"ending client due to timeout\"), s = !0, t.connection ? t.connection.stream.destroy() : t.end();\n            }, this.options.connectionTimeoutMillis)), this.log(\"connecting new client\"), t.connect((o)=>{\n                if (i && clearTimeout(i), t.on(\"error\", n), o) this.log(\"client failed to connect\", o), this._clients = this._clients.filter((u)=>u !== t), s && (o.message = \"Connection terminated due to connection timeout\"), this._pulseQueue(), e.timedOut || e.callback(o, void 0, Rs);\n                else {\n                    if (this.log(\"new client connected\"), this.options.maxLifetimeSeconds !== 0) {\n                        let u = setTimeout(()=>{\n                            this.log(\"ending client due to expired lifetime\"), this._expired.add(t), this._idle.findIndex((h)=>h.client === t) !== -1 && this._acquireClient(t, new Ne((h, l, y)=>y()), n, !1);\n                        }, this.options.maxLifetimeSeconds * 1e3);\n                        u.unref(), t.once(\"end\", ()=>clearTimeout(u));\n                    }\n                    return this._acquireClient(t, e, n, !0);\n                }\n            });\n        }\n        _acquireClient(e, t, n, i) {\n            i && this.emit(\"connect\", e), this.emit(\"acquire\", e), e.release = this._releaseOnce(e, n), e.removeListener(\"error\", n), t.timedOut ? i && this.options.verify ? this.options.verify(e, e.release) : e.release() : i && this.options.verify ? this.options.verify(e, (s)=>{\n                if (s) return e.release(s), t.callback(s, void 0, Rs);\n                t.callback(void 0, e, e.release);\n            }) : t.callback(void 0, e, e.release);\n        }\n        _releaseOnce(e, t) {\n            let n = !1;\n            return (i)=>{\n                n && _c(), n = !0, this._release(e, t, i);\n            };\n        }\n        _release(e, t, n) {\n            if (e.on(\"error\", t), e._poolUseCount = (e._poolUseCount || 0) + 1, this.emit(\"release\", n, e), n || this.ending || !e._queryable || e._ending || e._poolUseCount >= this.options.maxUses) {\n                e._poolUseCount >= this.options.maxUses && this.log(\"remove expended client\"), this._remove(e), this._pulseQueue();\n                return;\n            }\n            if (this._expired.has(e)) {\n                this.log(\"remove expired client\"), this._expired.delete(e), this._remove(e), this._pulseQueue();\n                return;\n            }\n            let s;\n            this.options.idleTimeoutMillis && (s = setTimeout(()=>{\n                this.log(\"remove idle client\"), this._remove(e);\n            }, this.options.idleTimeoutMillis), this.options.allowExitOnIdle && s.unref()), this.options.allowExitOnIdle && e.unref(), this._idle.push(new fn(e, t, s)), this._pulseQueue();\n        }\n        query(e, t, n) {\n            if (typeof e == \"function\") {\n                let s = _t(this.Promise, e);\n                return S(function() {\n                    return s.callback(new Error(\"Passing a function as the first parameter to pool.query is not supported\"));\n                }), s.result;\n            }\n            typeof t == \"function\" && (n = t, t = void 0);\n            let i = _t(this.Promise, n);\n            return n = i.callback, this.connect((s, o)=>{\n                if (s) return n(s);\n                let u = !1, c = a((h)=>{\n                    u || (u = !0, o.release(h), n(h));\n                }, \"onError\");\n                o.once(\"error\", c), this.log(\"dispatching query\");\n                try {\n                    o.query(e, t, (h, l)=>{\n                        if (this.log(\"query dispatched\"), o.removeListener(\"error\", c), !u) return u = !0, o.release(h), h ? n(h) : n(void 0, l);\n                    });\n                } catch (h) {\n                    return o.release(h), n(h);\n                }\n            }), i.result;\n        }\n        end(e) {\n            if (this.log(\"ending\"), this.ending) {\n                let n = new Error(\"Called end on pool more than once\");\n                return e ? e(n) : this.Promise.reject(n);\n            }\n            this.ending = !0;\n            let t = _t(this.Promise, e);\n            return this._endCallback = t.callback, this._pulseQueue(), t.result;\n        }\n        get waitingCount() {\n            return this._pendingQueue.length;\n        }\n        get idleCount() {\n            return this._idle.length;\n        }\n        get expiredCount() {\n            return this._clients.reduce((e, t)=>e + (this._expired.has(t) ? 1 : 0), 0);\n        }\n        get totalCount() {\n            return this._clients.length;\n        }\n    };\n    a(mn, \"Pool\");\n    var pn = mn;\n    Ms.exports = pn;\n});\nvar Os = {};\nX(Os, {\n    default: ()=>Cc\n});\nvar Cc, ks = K(()=>{\n    \"use strict\";\n    p();\n    Cc = {};\n});\nvar Us = I((ff, Ic)=>{\n    Ic.exports = {\n        name: \"pg\",\n        version: \"8.8.0\",\n        description: \"PostgreSQL client - pure javascript & libpq with the same API\",\n        keywords: [\n            \"database\",\n            \"libpq\",\n            \"pg\",\n            \"postgre\",\n            \"postgres\",\n            \"postgresql\",\n            \"rdbms\"\n        ],\n        homepage: \"https://github.com/brianc/node-postgres\",\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/brianc/node-postgres.git\",\n            directory: \"packages/pg\"\n        },\n        author: \"Brian Carlson <brian.m.carlson@gmail.com>\",\n        main: \"./lib\",\n        dependencies: {\n            \"buffer-writer\": \"2.0.0\",\n            \"packet-reader\": \"1.0.0\",\n            \"pg-connection-string\": \"^2.5.0\",\n            \"pg-pool\": \"^3.5.2\",\n            \"pg-protocol\": \"^1.5.0\",\n            \"pg-types\": \"^2.1.0\",\n            pgpass: \"1.x\"\n        },\n        devDependencies: {\n            async: \"2.6.4\",\n            bluebird: \"3.5.2\",\n            co: \"4.6.0\",\n            \"pg-copy-streams\": \"0.3.0\"\n        },\n        peerDependencies: {\n            \"pg-native\": \">=3.0.1\"\n        },\n        peerDependenciesMeta: {\n            \"pg-native\": {\n                optional: !0\n            }\n        },\n        scripts: {\n            test: \"make test-all\"\n        },\n        files: [\n            \"lib\",\n            \"SPONSORS.md\"\n        ],\n        license: \"MIT\",\n        engines: {\n            node: \">= 8.0.0\"\n        },\n        gitHead: \"c99fb2c127ddf8d712500db2c7b9a5491a178655\"\n    };\n});\nvar Qs = I((pf, Ns)=>{\n    \"use strict\";\n    p();\n    var qs = ge().EventEmitter, Tc = (Ge(), k(He)), gn = tt(), Qe = Ns.exports = function(r, e, t) {\n        qs.call(this), r = gn.normalizeQueryConfig(r, e, t), this.text = r.text, this.values = r.values, this.name = r.name, this.callback = r.callback, this.state = \"new\", this._arrayMode = r.rowMode === \"array\", this._emitRowEvents = !1, this.on(\"newListener\", (function(n) {\n            n === \"row\" && (this._emitRowEvents = !0);\n        }).bind(this));\n    };\n    Tc.inherits(Qe, qs);\n    var Pc = {\n        sqlState: \"code\",\n        statementPosition: \"position\",\n        messagePrimary: \"message\",\n        context: \"where\",\n        schemaName: \"schema\",\n        tableName: \"table\",\n        columnName: \"column\",\n        dataTypeName: \"dataType\",\n        constraintName: \"constraint\",\n        sourceFile: \"file\",\n        sourceLine: \"line\",\n        sourceFunction: \"routine\"\n    };\n    Qe.prototype.handleError = function(r) {\n        var e = this.native.pq.resultErrorFields();\n        if (e) for(var t in e){\n            var n = Pc[t] || t;\n            r[n] = e[t];\n        }\n        this.callback ? this.callback(r) : this.emit(\"error\", r), this.state = \"error\";\n    };\n    Qe.prototype.then = function(r, e) {\n        return this._getPromise().then(r, e);\n    };\n    Qe.prototype.catch = function(r) {\n        return this._getPromise().catch(r);\n    };\n    Qe.prototype._getPromise = function() {\n        return this._promise ? this._promise : (this._promise = new Promise((function(r, e) {\n            this._once(\"end\", r), this._once(\"error\", e);\n        }).bind(this)), this._promise);\n    };\n    Qe.prototype.submit = function(r) {\n        this.state = \"running\";\n        var e = this;\n        this.native = r.native, r.native.arrayMode = this._arrayMode;\n        var t = a(function(s, o, u) {\n            if (r.native.arrayMode = !1, S(function() {\n                e.emit(\"_done\");\n            }), s) return e.handleError(s);\n            e._emitRowEvents && (u.length > 1 ? o.forEach((c, h)=>{\n                c.forEach((l)=>{\n                    e.emit(\"row\", l, u[h]);\n                });\n            }) : o.forEach(function(c) {\n                e.emit(\"row\", c, u);\n            })), e.state = \"end\", e.emit(\"end\", u), e.callback && e.callback(null, u);\n        }, \"after\");\n        if (m.domain && (t = m.domain.bind(t)), this.name) {\n            this.name.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", this.name, this.name.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n            var n = (this.values || []).map(gn.prepareValue);\n            if (r.namedQueries[this.name]) {\n                if (this.text && r.namedQueries[this.name] !== this.text) {\n                    let s = new Error(`Pre\\\npared statements must be unique - '${this.name}' was used for a different statem\\\nent`);\n                    return t(s);\n                }\n                return r.native.execute(this.name, n, t);\n            }\n            return r.native.prepare(this.name, this.text, n.length, function(s) {\n                return s ? t(s) : (r.namedQueries[e.name] = e.text, e.native.execute(e.name, n, t));\n            });\n        } else if (this.values) {\n            if (!Array.isArray(this.values)) {\n                let s = new Error(\"Query values must be an array\");\n                return t(s);\n            }\n            var i = this.values.map(gn.prepareValue);\n            r.native.query(this.text, i, t);\n        } else r.native.query(this.text, t);\n    };\n});\nvar Gs = I((gf, Hs)=>{\n    \"use strict\";\n    p();\n    var Bc = (ks(), k(Os)), Lc = hr(), mf = Us(), Ws = ge().EventEmitter, Rc = (Ge(), k(He)), Fc = gt(), js = Qs(), Z = Hs.exports = function(r) {\n        Ws.call(this), r = r || {}, this._Promise = r.Promise || b.Promise, this._types = new Lc(r.types), this.native = new Bc({\n            types: this._types\n        }), this._queryQueue = [], this._ending = !1, this._connecting = !1, this._connected = !1, this._queryable = !0;\n        var e = this.connectionParameters = new Fc(r);\n        this.user = e.user, Object.defineProperty(this, \"password\", {\n            configurable: !0,\n            enumerable: !1,\n            writable: !0,\n            value: e.password\n        }), this.database = e.database, this.host = e.host, this.port = e.port, this.namedQueries = {};\n    };\n    Z.Query = js;\n    Rc.inherits(Z, Ws);\n    Z.prototype._errorAllQueries = function(r) {\n        let e = a((t)=>{\n            m.nextTick(()=>{\n                t.native = this.native, t.handleError(r);\n            });\n        }, \"enqueueError\");\n        this._hasActiveQuery() && (e(this._activeQuery), this._activeQuery = null), this._queryQueue.forEach(e), this._queryQueue.length = 0;\n    };\n    Z.prototype._connect = function(r) {\n        var e = this;\n        if (this._connecting) {\n            m.nextTick(()=>r(new Error(\"Client has already been connected. You cannot reuse a client.\")));\n            return;\n        }\n        this._connecting = !0, this.connectionParameters.getLibpqConnectionString(function(t, n) {\n            if (t) return r(t);\n            e.native.connect(n, function(i) {\n                if (i) return e.native.end(), r(i);\n                e._connected = !0, e.native.on(\"error\", function(s) {\n                    e._queryable = !1, e._errorAllQueries(s), e.emit(\"error\", s);\n                }), e.native.on(\"notification\", function(s) {\n                    e.emit(\"notification\", {\n                        channel: s.relname,\n                        payload: s.extra\n                    });\n                }), e.emit(\"connect\"), e._pulseQueryQueue(!0), r();\n            });\n        });\n    };\n    Z.prototype.connect = function(r) {\n        if (r) {\n            this._connect(r);\n            return;\n        }\n        return new this._Promise((e, t)=>{\n            this._connect((n)=>{\n                n ? t(n) : e();\n            });\n        });\n    };\n    Z.prototype.query = function(r, e, t) {\n        var n, i, s, o, u;\n        if (r == null) throw new TypeError(\"Client was passed a null or undefined query\");\n        if (typeof r.submit == \"function\") s = r.query_timeout || this.connectionParameters.query_timeout, i = n = r, typeof e == \"function\" && (r.callback = e);\n        else if (s = this.connectionParameters.query_timeout, n = new js(r, e, t), !n.callback) {\n            let c, h;\n            i = new this._Promise((l, y)=>{\n                c = l, h = y;\n            }), n.callback = (l, y)=>l ? h(l) : c(y);\n        }\n        return s && (u = n.callback, o = setTimeout(()=>{\n            var c = new Error(\"Query read timeout\");\n            m.nextTick(()=>{\n                n.handleError(c, this.connection);\n            }), u(c), n.callback = ()=>{};\n            var h = this._queryQueue.indexOf(n);\n            h > -1 && this._queryQueue.splice(h, 1), this._pulseQueryQueue();\n        }, s), n.callback = (c, h)=>{\n            clearTimeout(o), u(c, h);\n        }), this._queryable ? this._ending ? (n.native = this.native, m.nextTick(()=>{\n            n.handleError(new Error(\"Client was closed and is not queryable\"));\n        }), i) : (this._queryQueue.push(n), this._pulseQueryQueue(), i) : (n.native = this.native, m.nextTick(()=>{\n            n.handleError(new Error(\"Client has encountered a connection error and is not queryable\"));\n        }), i);\n    };\n    Z.prototype.end = function(r) {\n        var e = this;\n        this._ending = !0, this._connected || this.once(\"connect\", this.end.bind(this, r));\n        var t;\n        return r || (t = new this._Promise(function(n, i) {\n            r = a((s)=>s ? i(s) : n(), \"cb\");\n        })), this.native.end(function() {\n            e._errorAllQueries(new Error(\"Connection terminated\")), m.nextTick(()=>{\n                e.emit(\"end\"), r && r();\n            });\n        }), t;\n    };\n    Z.prototype._hasActiveQuery = function() {\n        return this._activeQuery && this._activeQuery.state !== \"error\" && this._activeQuery.state !== \"end\";\n    };\n    Z.prototype._pulseQueryQueue = function(r) {\n        if (this._connected && !this._hasActiveQuery()) {\n            var e = this._queryQueue.shift();\n            if (!e) {\n                r || this.emit(\"drain\");\n                return;\n            }\n            this._activeQuery = e, e.submit(this);\n            var t = this;\n            e.once(\"_done\", function() {\n                t._pulseQueryQueue();\n            });\n        }\n    };\n    Z.prototype.cancel = function(r) {\n        this._activeQuery === r ? this.native.cancel(function() {}) : this._queryQueue.indexOf(r) !== -1 && this._queryQueue.splice(this._queryQueue.indexOf(r), 1);\n    };\n    Z.prototype.ref = function() {};\n    Z.prototype.unref = function() {};\n    Z.prototype.setTypeParser = function(r, e, t) {\n        return this._types.setTypeParser(r, e, t);\n    };\n    Z.prototype.getTypeParser = function(r, e) {\n        return this._types.getTypeParser(r, e);\n    };\n});\nvar wn = I((Sf, $s)=>{\n    \"use strict\";\n    p();\n    $s.exports = Gs();\n});\nvar At = I((Ef, nt)=>{\n    \"use strict\";\n    p();\n    var Mc = Ls(), Dc = et(), Oc = cn(), kc = Ds(), { DatabaseError: Uc } = on(), qc = a((r)=>{\n        var e;\n        return e = class extends kc {\n            constructor(n){\n                super(n, r);\n            }\n        }, a(e, \"BoundPool\"), e;\n    }, \"poolFactory\"), bn = a(function(r) {\n        this.defaults = Dc, this.Client = r, this.Query = this.Client.Query, this.Pool = qc(this.Client), this._pools = [], this.Connection = Oc, this.types = Xe(), this.DatabaseError = Uc;\n    }, \"PG\");\n    typeof m.env.NODE_PG_FORCE_NATIVE < \"u\" ? nt.exports = new bn(wn()) : (nt.exports = new bn(Mc), Object.defineProperty(nt.exports, \"native\", {\n        configurable: !0,\n        enumerable: !1,\n        get () {\n            var r = null;\n            try {\n                r = new bn(wn());\n            } catch (e) {\n                if (e.code !== \"MODULE_NOT_FOUND\") throw e;\n            }\n            return Object.defineProperty(nt.exports, \"native\", {\n                value: r\n            }), r;\n        }\n    }));\n});\np();\nvar Ct = We(At());\nwt();\np();\nfr();\nwt();\nvar zs = We(tt());\nvar Sn = class Sn extends Error {\n    constructor(){\n        super(...arguments);\n        T(this, \"name\", \"NeonDbError\");\n        T(this, \"code\", null);\n        T(this, \"sourceError\");\n    }\n};\na(Sn, \"NeonDbError\");\nvar Ae = Sn, Ks = \"transaction() expects an array of queries, or a function returning an array of queries\";\nfunction Ys(r, { arrayMode: e, fullResults: t, fetchOptions: n, isolationLevel: i, readOnly: s, deferrable: o, queryCallback: u, resultCallback: c } = {}) {\n    if (!r) throw new Error(\"No database connection string was provided to `neon()`. Perhaps an environment variable has not been set?\");\n    let h;\n    try {\n        h = lr(r);\n    } catch  {\n        throw new Error(\"Database connection string provided to `neon()` is not a valid URL. Connection string: \" + String(r));\n    }\n    let { protocol: l, username: y, password: E, hostname: _, port: P, pathname: N } = h;\n    if (l !== \"postgres:\" && l !== \"postgresql:\" || !y || !E || !_ || !N) throw new Error(\"Database connection string format for `neon()` should be: postgresql://user:password@host.tld/dbname?option=value\");\n    function J(A, ...g) {\n        let D, H;\n        if (typeof A == \"string\") D = A, H = g[1], g = g[0] ?? [];\n        else {\n            D = \"\";\n            for(let W = 0; W < A.length; W++)D += A[W], W < g.length && (D += \"$\" + (W + 1));\n        }\n        g = g.map((W)=>(0, zs.prepareValue)(W));\n        let Q = {\n            query: D,\n            params: g\n        };\n        return u && u(Q), Nc(pe, Q, H);\n    }\n    a(J, \"resolve\"), J.transaction = async (A, g)=>{\n        if (typeof A == \"function\" && (A = A(J)), !Array.isArray(A)) throw new Error(Ks);\n        let D = A.map((H)=>{\n            if (H[Symbol.toStringTag] !== \"NeonQueryPromise\") throw new Error(Ks);\n            return H.parameterizedQuery;\n        });\n        return pe(D, g);\n    };\n    async function pe(A, g) {\n        let D = n ?? {}, { fetchEndpoint: H, fetchConnectionCache: Q, fetchFunction: W } = _e, ue = typeof H == \"function\" ? H(_, P) : H, de = Array.isArray(A) ? {\n            queries: A\n        } : A, L = e ?? !1, G = t ?? !1, ce = i, ye = s, xe = o;\n        g !== void 0 && (g.arrayMode !== void 0 && (L = g.arrayMode), g.fullResults !== void 0 && (G = g.fullResults), g.fetchOptions !== void 0 && (D = {\n            ...D,\n            ...g.fetchOptions\n        }), g.isolationLevel !== void 0 && (ce = g.isolationLevel), g.readOnly !== void 0 && (ye = g.readOnly), g.deferrable !== void 0 && (xe = g.deferrable));\n        let he = {\n            \"Neon-Connection-String\": r,\n            \"Neon-Raw-Text-Output\": \"true\",\n            \"Neon-Array-Mode\": \"true\"\n        };\n        Q === !0 && (he[\"Neon-Pool-Opt-In\"] = \"true\"), Array.isArray(A) && (ce !== void 0 && (he[\"Neon-Batch-Isolation-Level\"] = ce), ye !== void 0 && (he[\"Neon-Batch-Read-Only\"] = String(ye)), xe !== void 0 && (he[\"Neon-Batch-Deferrable\"] = String(xe)));\n        let ie;\n        try {\n            ie = await (W ?? fetch)(ue, {\n                method: \"POST\",\n                body: JSON.stringify(de),\n                headers: he,\n                ...D\n            });\n        } catch (se) {\n            let $ = new Ae(`Error connecting to data\\\nbase: ${se.message}`);\n            throw $.sourceError = se, $;\n        }\n        if (ie.ok) {\n            let se = await ie.json();\n            if (Array.isArray(A)) {\n                let $ = se.results;\n                if (!Array.isArray($)) throw new Ae(\"Neon internal error: unexpected result format\");\n                return $.map((ne, Ce)=>Vs(ne, {\n                        arrayMode: L,\n                        fullResults: G,\n                        parameterizedQuery: A[Ce],\n                        resultCallback: c\n                    }));\n            } else return Vs(se, {\n                arrayMode: L,\n                fullResults: G,\n                parameterizedQuery: A,\n                resultCallback: c\n            });\n        } else {\n            let { status: se } = ie;\n            if (se === 400) {\n                let { message: $, code: ne } = await ie.json(), Ce = new Ae($);\n                throw Ce.code = ne, Ce;\n            } else {\n                let $ = await ie.text();\n                throw new Ae(`Server error (HTTP status ${se}): ${$}`);\n            }\n        }\n    }\n    return a(pe, \"execute\"), J;\n}\na(Ys, \"neon\");\nfunction Nc(r, e, t) {\n    return {\n        [Symbol.toStringTag]: \"NeonQueryPromise\",\n        parameterizedQuery: e,\n        opts: t,\n        then: (n, i)=>r(e, t).then(n, i),\n        catch: (n)=>r(e, t).catch(n),\n        finally: (n)=>r(e, t).finally(n)\n    };\n}\na(Nc, \"createNeonQueryPromise\");\nfunction Vs(r, { arrayMode: e, fullResults: t, parameterizedQuery: n, resultCallback: i }) {\n    let s = r.fields.map((c)=>c.name), o = r.fields.map((c)=>Se.types.getTypeParser(c.dataTypeID)), u = e === !0 ? r.rows.map((c)=>c.map((h, l)=>h === null ? null : o[l](h))) : r.rows.map((c)=>Object.fromEntries(c.map((h, l)=>[\n                s[l],\n                h === null ? null : o[l](h)\n            ])));\n    return i && i(n, r, u, {\n        arrayMode: e,\n        fullResults: t\n    }), t ? (r.viaNeonFetch = !0, r.rowAsArray = e, r.rows = u, r) : u;\n}\na(Vs, \"processQueryResult\");\nvar Js = We(gt()), Se = We(At());\nvar En = class En extends Ct.Client {\n    constructor(t){\n        super(t);\n        this.config = t;\n    }\n    get neonConfig() {\n        return this.connection.stream;\n    }\n    connect(t) {\n        let { neonConfig: n } = this;\n        n.forceDisablePgSSL && (this.ssl = this.connection.ssl = !1), this.ssl && n.useSecureWebSocket && console.warn(\"SSL is enabled for both Postgres (e.g. ?sslmode=require in the connection string + forceDisablePgSSL = false) and the WebSocket tunnel (useSecureWebSocket = true). Double encryption will increase latency and CPU usage. It may be appropriate to disable SSL in the Postgres connection parameters or set forceDisablePgSSL = true.\");\n        let i = this.config?.host !== void 0 || this.config?.connectionString !== void 0 || m.env.PGHOST !== void 0, s = m.env.USER ?? m.env.USERNAME;\n        if (!i && this.host === \"localhost\" && this.user === s && this.database === s && this.password === null) throw new Error(`No datab\\\nase host or connection string was set, and key parameters have default values (h\\\nost: localhost, user: ${s}, db: ${s}, password: null). Is an environment variabl\\\ne missing? Alternatively, if you intended to connect with these parameters, plea\\\nse set the host to 'localhost' explicitly.`);\n        let o = super.connect(t), u = n.pipelineTLS && this.ssl, c = n.pipelineConnect === \"password\";\n        if (!u && !n.pipelineConnect) return o;\n        let h = this.connection;\n        if (u && h.on(\"connect\", ()=>h.stream.emit(\"data\", \"S\")), c) {\n            h.removeAllListeners(\"authenticationCleartextPassword\"), h.removeAllListeners(\"readyForQuery\"), h.once(\"readyForQuery\", ()=>h.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)));\n            let l = this.ssl ? \"sslconnect\" : \"connect\";\n            h.on(l, ()=>{\n                this._handleAuthCleartextPassword(), this._handleReadyForQuery();\n            });\n        }\n        return o;\n    }\n    async _handleAuthSASLContinue(t) {\n        let n = this.saslSession, i = this.password, s = t.data;\n        if (n.message !== \"SASLInitialResponse\" || typeof i != \"string\" || typeof s != \"string\") throw new Error(\"SASL: protocol error\");\n        let o = Object.fromEntries(s.split(\",\").map(($)=>{\n            if (!/^.=/.test($)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let ne = $[0], Ce = $.substring(2);\n            return [\n                ne,\n                Ce\n            ];\n        })), u = o.r, c = o.s, h = o.i;\n        if (!u || !/^[!-+--~]+$/.test(u)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing/unprintable\");\n        if (!c || !/^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(c)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing/not base64\");\n        if (!h || !/^[1-9][0-9]*$/.test(h)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: missing/invalid iteration count\");\n        if (!u.startsWith(n.clientNonce)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        if (u.length === n.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        let l = parseInt(h, 10), y = d.from(c, \"base64\"), E = new TextEncoder, _ = E.encode(i), P = await w.subtle.importKey(\"raw\", _, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), N = new Uint8Array(await w.subtle.sign(\"HMAC\", P, d.concat([\n            y,\n            d.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ]))), J = N;\n        for(var pe = 0; pe < l - 1; pe++)N = new Uint8Array(await w.subtle.sign(\"HMAC\", P, N)), J = d.from(J.map(($, ne)=>J[ne] ^ N[ne]));\n        let A = J, g = await w.subtle.importKey(\"raw\", A, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), D = new Uint8Array(await w.subtle.sign(\"HMAC\", g, E.encode(\"Client Key\"))), H = await w.subtle.digest(\"SHA-256\", D), Q = \"n=*,r=\" + n.clientNonce, W = \"r=\" + u + \",s=\" + c + \",i=\" + l, ue = \"c=biws,r=\" + u, de = Q + \",\" + W + \",\" + ue, L = await w.subtle.importKey(\"raw\", H, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var G = new Uint8Array(await w.subtle.sign(\"HMAC\", L, E.encode(de))), ce = d.from(D.map(($, ne)=>D[ne] ^ G[ne])), ye = ce.toString(\"base64\");\n        let xe = await w.subtle.importKey(\"raw\", A, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), he = await w.subtle.sign(\"HMAC\", xe, E.encode(\"Server Key\")), ie = await w.subtle.importKey(\"raw\", he, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var se = d.from(await w.subtle.sign(\"HMAC\", ie, E.encode(de)));\n        n.message = \"SASLResponse\", n.serverSignature = se.toString(\"base64\"), n.response = ue + \",p=\" + ye, this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n    }\n};\na(En, \"NeonClient\");\nvar xn = En;\nfunction Qc(r, e) {\n    if (e) return {\n        callback: e,\n        result: void 0\n    };\n    let t, n, i = a(function(o, u) {\n        o ? t(o) : n(u);\n    }, \"cb\"), s = new r(function(o, u) {\n        n = o, t = u;\n    });\n    return {\n        callback: i,\n        result: s\n    };\n}\na(Qc, \"promisify\");\nvar vn = class vn extends Ct.Pool {\n    constructor(){\n        super(...arguments);\n        T(this, \"Client\", xn);\n        T(this, \"hasFetchUnsupportedListeners\", !1);\n    }\n    on(t, n) {\n        return t !== \"error\" && (this.hasFetchUnsupportedListeners = !0), super.on(t, n);\n    }\n    query(t, n, i) {\n        if (!_e.poolQueryViaFetch || this.hasFetchUnsupportedListeners || typeof t == \"function\") return super.query(t, n, i);\n        typeof n == \"function\" && (i = n, n = void 0);\n        let s = Qc(this.Promise, i);\n        i = s.callback;\n        try {\n            let o = new Js.default(this.options), u = encodeURIComponent, c = encodeURI, h = `postgresql://${u(o.user)}:${u(o.password)}@${u(o.host)}/${c(o.database)}`, l = typeof t == \"string\" ? t : t.text, y = n ?? t.values ?? [];\n            Ys(h, {\n                fullResults: !0,\n                arrayMode: t.rowMode === \"array\"\n            })(l, y).then((_)=>i(void 0, _)).catch((_)=>i(_));\n        } catch (o) {\n            i(o);\n        }\n        return s.result;\n    }\n};\na(vn, \"NeonPool\");\nvar Zs = vn;\nvar export_ClientBase = Se.ClientBase;\nvar export_Connection = Se.Connection;\nvar export_DatabaseError = Se.DatabaseError;\nvar export_Query = Se.Query;\nvar export_defaults = Se.defaults;\nvar export_types = Se.types;\n /*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5lb25kYXRhYmFzZS9zZXJ2ZXJsZXNzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLEtBQUdDLE9BQU9DLE1BQU07QUFBQyxJQUFJQyxLQUFHRixPQUFPRyxjQUFjO0FBQUMsSUFBSUMsS0FBR0osT0FBT0ssd0JBQXdCO0FBQUMsSUFBSUMsS0FBR04sT0FBT08sbUJBQW1CO0FBQUMsSUFBSUMsS0FBR1IsT0FBT1MsY0FBYyxFQUFDQyxLQUFHVixPQUFPVyxTQUFTLENBQUNDLGNBQWM7QUFBQyxJQUFJQyxLQUFHLENBQUNDLEdBQUVDLEdBQUVDLElBQUlELEtBQUtELElBQUVaLEdBQUdZLEdBQUVDLEdBQUU7UUFBQ0UsWUFBVyxDQUFDO1FBQUVDLGNBQWEsQ0FBQztRQUFFQyxVQUFTLENBQUM7UUFBRUMsT0FBTUo7SUFBQyxLQUMzUUYsQ0FBQyxDQUFDQyxFQUFFLEdBQUNDO0FBQUUsSUFBSUssSUFBRSxDQUFDUCxHQUFFQyxJQUFJYixHQUFHWSxHQUFFLFFBQU87UUFBQ00sT0FBTUw7UUFBRUcsY0FBYSxDQUFDO0lBQUM7QUFBRyxJQUFJSSxJQUFFLENBQUNSLEdBQUVDLElBQUksSUFBS0QsQ0FBQUEsS0FBSUMsQ0FBQUEsSUFBRUQsRUFBRUEsSUFBRSxFQUFDLEdBQUdDLENBQUFBO0FBQUcsSUFBSVEsSUFBRSxDQUFDVCxHQUFFQyxJQUFJLElBQUtBLENBQUFBLEtBQUdELEVBQUUsQ0FBQ0MsSUFBRTtZQUFDUyxTQUFRLENBQUM7UUFBQyxHQUFHQSxPQUFPLEVBQUNULElBQUdBLEVBQUVTLE9BQU8sR0FBRUMsSUFBRSxDQUFDWCxHQUFFQztJQUFLLElBQUksSUFBSUMsS0FBS0QsRUFDbkxiLEdBQUdZLEdBQUVFLEdBQUU7UUFBQ1UsS0FBSVgsQ0FBQyxDQUFDQyxFQUFFO1FBQUNDLFlBQVcsQ0FBQztJQUFDO0FBQUUsR0FBRVUsS0FBRyxDQUFDYixHQUFFQyxHQUFFQyxHQUFFWTtJ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O2dCQUFFeEMsV0FBVWozQyxFQUFFdzVCLE9BQU8sS0FBRztZQUN6RSxHQUFHbDJCLEdBQUVDLEdBQUdvTyxJQUFJLENBQUNsTyxDQUFBQSxJQUFHNUMsRUFBRSxLQUFLLEdBQUU0QyxJQUFJdTZCLEtBQUssQ0FBQ3Y2QixDQUFBQSxJQUFHNUMsRUFBRTRDO1FBQUcsRUFBQyxPQUFNZCxHQUFFO1lBQUM5QixFQUFFOEI7UUFBRTtRQUFDLE9BQU9ELEVBQUUydUMsTUFBTTtJQUFBO0FBQUM7QUFDaEZoeEMsRUFBRXc3QyxJQUFHO0FBQVksSUFBSUcsS0FBR0g7QUFBRyxJQUFJSSxvQkFBa0JmLEdBQUdnQixVQUFVO0FBQUMsSUFBSUMsb0JBQWtCakIsR0FBR2pDLFVBQVU7QUFBQyxJQUFJbUQsdUJBQXFCbEIsR0FBR2xiLGFBQWE7QUFDNUksSUFBSXFjLGVBQWFuQixHQUFHOUssS0FBSztBQUFDLElBQUlrTSxrQkFBZ0JwQixHQUFHbGYsUUFBUTtBQUFDLElBQUl1Z0IsZUFBYXJCLEdBQUc3aEIsS0FBSztBQUdKLENBQy9FOzs7Ozs7Ozs7Ozs7QUFZQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MvaW5kZXgubWpzPzcwOTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFhzPU9iamVjdC5jcmVhdGU7dmFyIEllPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgZW89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgdG89T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIHJvPU9iamVjdC5nZXRQcm90b3R5cGVPZixubz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBpbz0ocixlLHQpPT5lIGluIHI/SWUocixlLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTp0fSk6XG5yW2VdPXQ7dmFyIGE9KHIsZSk9PkllKHIsXCJuYW1lXCIse3ZhbHVlOmUsY29uZmlndXJhYmxlOiEwfSk7dmFyIEs9KHIsZSk9PigpPT4ociYmKGU9cihyPTApKSxlKTt2YXIgST0ocixlKT0+KCk9PihlfHxyKChlPXtleHBvcnRzOnt9fSkuZXhwb3J0cyxlKSxlLmV4cG9ydHMpLFg9KHIsZSk9Pntmb3IodmFyIHQgaW4gZSlcbkllKHIsdCx7Z2V0OmVbdF0sZW51bWVyYWJsZTohMH0pfSxfbj0ocixlLHQsbik9PntpZihlJiZ0eXBlb2YgZT09XCJvYmplY3RcInx8dHlwZW9mIGU9PVxuXCJmdW5jdGlvblwiKWZvcihsZXQgaSBvZiB0byhlKSkhbm8uY2FsbChyLGkpJiZpIT09dCYmSWUocixpLHtnZXQ6KCk9PmVbaV0sZW51bWVyYWJsZTohKG49XG5lbyhlLGkpKXx8bi5lbnVtZXJhYmxlfSk7cmV0dXJuIHJ9O3ZhciBXZT0ocixlLHQpPT4odD1yIT1udWxsP1hzKHJvKHIpKTp7fSxfbihlfHwhcnx8IXIuX19lc01vZHVsZT9JZSh0LFwiZGVmYXVsdFwiLHtcbnZhbHVlOnIsZW51bWVyYWJsZTohMH0pOnQscikpLGs9cj0+X24oSWUoe30sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSkscik7dmFyIFQ9KHIsZSx0KT0+KGlvKHIsdHlwZW9mIGUhPVwic3ltYm9sXCI/ZStcIlwiOmUsdCksdCk7dmFyIEluPUkoaXQ9PntcInVzZSBzdHJpY3RcIjtwKCk7aXQuYnl0ZUxlbmd0aD1vbztpdC50b0J5dGVBcnJheT11bztpdC5mcm9tQnl0ZUFycmF5PVxubG87dmFyIG9lPVtdLGVlPVtdLHNvPXR5cGVvZiBVaW50OEFycmF5PFwidVwiP1VpbnQ4QXJyYXk6QXJyYXksSXQ9XCJBQkNERUZHSElKS0xNTk9cXFxuUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO2ZvcihFZT0wLEFuPUl0Lmxlbmd0aDtFZTxBbjsrK0VlKVxub2VbRWVdPUl0W0VlXSxlZVtJdC5jaGFyQ29kZUF0KEVlKV09RWU7dmFyIEVlLEFuO2VlWzQ1XT02MjtlZVs5NV09NjM7ZnVuY3Rpb24gQ24ocil7XG52YXIgZT1yLmxlbmd0aDtpZihlJTQ+MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBcXFxubGUgb2YgNFwiKTt2YXIgdD1yLmluZGV4T2YoXCI9XCIpO3Q9PT0tMSYmKHQ9ZSk7dmFyIG49dD09PWU/MDo0LXQlNDtyZXR1cm5bdCxuXX1hKENuLFxuXCJnZXRMZW5zXCIpO2Z1bmN0aW9uIG9vKHIpe3ZhciBlPUNuKHIpLHQ9ZVswXSxuPWVbMV07cmV0dXJuKHQrbikqMy80LW59YShvbyxcImJ5dGVcXFxuTGVuZ3RoXCIpO2Z1bmN0aW9uIGFvKHIsZSx0KXtyZXR1cm4oZSt0KSozLzQtdH1hKGFvLFwiX2J5dGVMZW5ndGhcIik7ZnVuY3Rpb24gdW8ocil7XG52YXIgZSx0PUNuKHIpLG49dFswXSxpPXRbMV0scz1uZXcgc28oYW8ocixuLGkpKSxvPTAsdT1pPjA/bi00Om4sYztmb3IoYz0wO2M8dTtjKz1cbjQpZT1lZVtyLmNoYXJDb2RlQXQoYyldPDwxOHxlZVtyLmNoYXJDb2RlQXQoYysxKV08PDEyfGVlW3IuY2hhckNvZGVBdChjKzIpXTw8NnxlZVtyLlxuY2hhckNvZGVBdChjKzMpXSxzW28rK109ZT4+MTYmMjU1LHNbbysrXT1lPj44JjI1NSxzW28rK109ZSYyNTU7cmV0dXJuIGk9PT0yJiYoZT1cbmVlW3IuY2hhckNvZGVBdChjKV08PDJ8ZWVbci5jaGFyQ29kZUF0KGMrMSldPj40LHNbbysrXT1lJjI1NSksaT09PTEmJihlPWVlW3IuY2hhckNvZGVBdChcbmMpXTw8MTB8ZWVbci5jaGFyQ29kZUF0KGMrMSldPDw0fGVlW3IuY2hhckNvZGVBdChjKzIpXT4+MixzW28rK109ZT4+OCYyNTUsc1tvKytdPVxuZSYyNTUpLHN9YSh1byxcInRvQnl0ZUFycmF5XCIpO2Z1bmN0aW9uIGNvKHIpe3JldHVybiBvZVtyPj4xOCY2M10rb2Vbcj4+MTImNjNdK29lW3I+PlxuNiY2M10rb2VbciY2M119YShjbyxcInRyaXBsZXRUb0Jhc2U2NFwiKTtmdW5jdGlvbiBobyhyLGUsdCl7Zm9yKHZhciBuLGk9W10scz1lO3M8dDtzKz1cbjMpbj0ocltzXTw8MTYmMTY3MTE2ODApKyhyW3MrMV08PDgmNjUyODApKyhyW3MrMl0mMjU1KSxpLnB1c2goY28obikpO3JldHVybiBpLmpvaW4oXG5cIlwiKX1hKGhvLFwiZW5jb2RlQ2h1bmtcIik7ZnVuY3Rpb24gbG8ocil7Zm9yKHZhciBlLHQ9ci5sZW5ndGgsbj10JTMsaT1bXSxzPTE2MzgzLG89MCxcbnU9dC1uO288dTtvKz1zKWkucHVzaChobyhyLG8sbytzPnU/dTpvK3MpKTtyZXR1cm4gbj09PTE/KGU9clt0LTFdLGkucHVzaChvZVtlPj4yXStcbm9lW2U8PDQmNjNdK1wiPT1cIikpOm49PT0yJiYoZT0oclt0LTJdPDw4KStyW3QtMV0saS5wdXNoKG9lW2U+PjEwXStvZVtlPj40JjYzXStvZVtlPDxcbjImNjNdK1wiPVwiKSksaS5qb2luKFwiXCIpfWEobG8sXCJmcm9tQnl0ZUFycmF5XCIpfSk7dmFyIFRuPUkoVHQ9PntwKCk7VHQucmVhZD1mdW5jdGlvbihyLGUsdCxuLGkpe3ZhciBzLG8sdT1pKjgtbi0xLGM9KDE8PHUpLTEsaD1jPj5cbjEsbD0tNyx5PXQ/aS0xOjAsRT10Py0xOjEsXz1yW2UreV07Zm9yKHkrPUUscz1fJigxPDwtbCktMSxfPj49LWwsbCs9dTtsPjA7cz1zKjI1NitcbnJbZSt5XSx5Kz1FLGwtPTgpO2ZvcihvPXMmKDE8PC1sKS0xLHM+Pj0tbCxsKz1uO2w+MDtvPW8qMjU2K3JbZSt5XSx5Kz1FLGwtPTgpO2lmKHM9PT1cbjApcz0xLWg7ZWxzZXtpZihzPT09YylyZXR1cm4gbz9OYU46KF8/LTE6MSkqKDEvMCk7bz1vK01hdGgucG93KDIsbikscz1zLWh9cmV0dXJuKF8/XG4tMToxKSpvKk1hdGgucG93KDIscy1uKX07VHQud3JpdGU9ZnVuY3Rpb24ocixlLHQsbixpLHMpe3ZhciBvLHUsYyxoPXMqOC1pLTEsbD0oMTw8XG5oKS0xLHk9bD4+MSxFPWk9PT0yMz9NYXRoLnBvdygyLC0yNCktTWF0aC5wb3coMiwtNzcpOjAsXz1uPzA6cy0xLFA9bj8xOi0xLE49ZTwwfHxcbmU9PT0wJiYxL2U8MD8xOjA7Zm9yKGU9TWF0aC5hYnMoZSksaXNOYU4oZSl8fGU9PT0xLzA/KHU9aXNOYU4oZSk/MTowLG89bCk6KG89TWF0aC5cbmZsb29yKE1hdGgubG9nKGUpL01hdGguTE4yKSxlKihjPU1hdGgucG93KDIsLW8pKTwxJiYoby0tLGMqPTIpLG8reT49MT9lKz1FL2M6ZSs9XG5FKk1hdGgucG93KDIsMS15KSxlKmM+PTImJihvKyssYy89Miksbyt5Pj1sPyh1PTAsbz1sKTpvK3k+PTE/KHU9KGUqYy0xKSpNYXRoLnBvdyhcbjIsaSksbz1vK3kpOih1PWUqTWF0aC5wb3coMix5LTEpKk1hdGgucG93KDIsaSksbz0wKSk7aT49ODtyW3QrX109dSYyNTUsXys9UCx1Lz0yNTYsXG5pLT04KTtmb3Iobz1vPDxpfHUsaCs9aTtoPjA7clt0K19dPW8mMjU1LF8rPVAsby89MjU2LGgtPTgpO3JbdCtfLVBdfD1OKjEyOH19KTt2YXIgR249SShMZT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgUHQ9SW4oKSxQZT1UbigpLFBuPXR5cGVvZiBTeW1ib2w9PVwiZnVuY3Rpb25cIiYmXG50eXBlb2YgU3ltYm9sLmZvcj09XCJmdW5jdGlvblwiP1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKTpudWxsO0xlLkJ1ZmZlcj1cbmY7TGUuU2xvd0J1ZmZlcj13bztMZS5JTlNQRUNUX01BWF9CWVRFUz01MDt2YXIgc3Q9MjE0NzQ4MzY0NztMZS5rTWF4TGVuZ3RoPXN0O2YuXG5UWVBFRF9BUlJBWV9TVVBQT1JUPWZvKCk7IWYuVFlQRURfQVJSQVlfU1VQUE9SVCYmdHlwZW9mIGNvbnNvbGU8XCJ1XCImJnR5cGVvZiBjb25zb2xlLlxuZXJyb3I9PVwiZnVuY3Rpb25cIiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VcXFxucHBvcnQgd2hpY2ggaXMgcmVxdWlyZWQgYnkgYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJcXFxucm93c2VyIHN1cHBvcnQuXCIpO2Z1bmN0aW9uIGZvKCl7dHJ5e2xldCByPW5ldyBVaW50OEFycmF5KDEpLGU9e2ZvbzpmdW5jdGlvbigpe3JldHVybiA0Mn19O1xucmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihlLFVpbnQ4QXJyYXkucHJvdG90eXBlKSxPYmplY3Quc2V0UHJvdG90eXBlT2YocixlKSxcbnIuZm9vKCk9PT00Mn1jYXRjaHtyZXR1cm4hMX19YShmbyxcInR5cGVkQXJyYXlTdXBwb3J0XCIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShmLnByb3RvdHlwZSxcblwicGFyZW50XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7aWYoZi5pc0J1ZmZlcih0aGlzKSlyZXR1cm4gdGhpcy5idWZmZXJ9fSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZi5wcm90b3R5cGUsXCJvZmZzZXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtpZihmLmlzQnVmZmVyKFxudGhpcykpcmV0dXJuIHRoaXMuYnl0ZU9mZnNldH19KTtmdW5jdGlvbiBsZShyKXtpZihyPnN0KXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGVcXFxuIHZhbHVlIFwiJytyKydcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKTtsZXQgZT1uZXcgVWludDhBcnJheShyKTtyZXR1cm4gT2JqZWN0Llxuc2V0UHJvdG90eXBlT2YoZSxmLnByb3RvdHlwZSksZX1hKGxlLFwiY3JlYXRlQnVmZmVyXCIpO2Z1bmN0aW9uIGYocixlLHQpe2lmKHR5cGVvZiByPT1cblwibnVtYmVyXCIpe2lmKHR5cGVvZiBlPT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgXFxcbmJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcicpO3JldHVybiBGdChyKX1yZXR1cm4gRm4ocixlLHQpfWEoZixcIkJ1ZlxcXG5mZXJcIik7Zi5wb29sU2l6ZT04MTkyO2Z1bmN0aW9uIEZuKHIsZSx0KXtpZih0eXBlb2Ygcj09XCJzdHJpbmdcIilyZXR1cm4geW8ocixlKTtpZihBcnJheUJ1ZmZlci5cbmlzVmlldyhyKSlyZXR1cm4gbW8ocik7aWYocj09bnVsbCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYlxcXG5lIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZFxcXG4gdHlwZSBcIit0eXBlb2Ygcik7aWYoYWUocixBcnJheUJ1ZmZlcil8fHImJmFlKHIuYnVmZmVyLEFycmF5QnVmZmVyKXx8dHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyPFxuXCJ1XCImJihhZShyLFNoYXJlZEFycmF5QnVmZmVyKXx8ciYmYWUoci5idWZmZXIsU2hhcmVkQXJyYXlCdWZmZXIpKSlyZXR1cm4gTHQocixlLFxudCk7aWYodHlwZW9mIHI9PVwibnVtYmVyXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvXFxcbmYgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJyk7bGV0IG49ci52YWx1ZU9mJiZyLnZhbHVlT2YoKTtpZihuIT1udWxsJiZuIT09XG5yKXJldHVybiBmLmZyb20obixlLHQpO2xldCBpPWdvKHIpO2lmKGkpcmV0dXJuIGk7aWYodHlwZW9mIFN5bWJvbDxcInVcIiYmU3ltYm9sLnRvUHJpbWl0aXZlIT1cbm51bGwmJnR5cGVvZiByW1N5bWJvbC50b1ByaW1pdGl2ZV09PVwiZnVuY3Rpb25cIilyZXR1cm4gZi5mcm9tKHJbU3ltYm9sLnRvUHJpbWl0aXZlXShcblwic3RyaW5nXCIpLGUsdCk7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluXFxcbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSBcIit0eXBlb2Ygcil9YShcbkZuLFwiZnJvbVwiKTtmLmZyb209ZnVuY3Rpb24ocixlLHQpe3JldHVybiBGbihyLGUsdCl9O09iamVjdC5zZXRQcm90b3R5cGVPZihmLnByb3RvdHlwZSxcblVpbnQ4QXJyYXkucHJvdG90eXBlKTtPYmplY3Quc2V0UHJvdG90eXBlT2YoZixVaW50OEFycmF5KTtmdW5jdGlvbiBNbihyKXtpZih0eXBlb2YgciE9XG5cIm51bWJlclwiKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKTtpZihyPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4nVGhlIHZhbHVlIFwiJytyKydcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKX1hKE1uLFwiYXNzZXJ0U2l6ZVwiKTtmdW5jdGlvbiBwbyhyLGUsdCl7XG5yZXR1cm4gTW4ocikscjw9MD9sZShyKTplIT09dm9pZCAwP3R5cGVvZiB0PT1cInN0cmluZ1wiP2xlKHIpLmZpbGwoZSx0KTpsZShyKS5maWxsKFxuZSk6bGUocil9YShwbyxcImFsbG9jXCIpO2YuYWxsb2M9ZnVuY3Rpb24ocixlLHQpe3JldHVybiBwbyhyLGUsdCl9O2Z1bmN0aW9uIEZ0KHIpe1xucmV0dXJuIE1uKHIpLGxlKHI8MD8wOk10KHIpfDApfWEoRnQsXCJhbGxvY1Vuc2FmZVwiKTtmLmFsbG9jVW5zYWZlPWZ1bmN0aW9uKHIpe3JldHVybiBGdChcbnIpfTtmLmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbihyKXtyZXR1cm4gRnQocil9O2Z1bmN0aW9uIHlvKHIsZSl7aWYoKHR5cGVvZiBlIT1cIlxcXG5zdHJpbmdcInx8ZT09PVwiXCIpJiYoZT1cInV0ZjhcIiksIWYuaXNFbmNvZGluZyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZFxcXG5pbmc6IFwiK2UpO2xldCB0PURuKHIsZSl8MCxuPWxlKHQpLGk9bi53cml0ZShyLGUpO3JldHVybiBpIT09dCYmKG49bi5zbGljZSgwLGkpKSxcbm59YSh5byxcImZyb21TdHJpbmdcIik7ZnVuY3Rpb24gQnQocil7bGV0IGU9ci5sZW5ndGg8MD8wOk10KHIubGVuZ3RoKXwwLHQ9bGUoZSk7Zm9yKGxldCBuPTA7bjxcbmU7bis9MSl0W25dPXJbbl0mMjU1O3JldHVybiB0fWEoQnQsXCJmcm9tQXJyYXlMaWtlXCIpO2Z1bmN0aW9uIG1vKHIpe2lmKGFlKHIsVWludDhBcnJheSkpe1xubGV0IGU9bmV3IFVpbnQ4QXJyYXkocik7cmV0dXJuIEx0KGUuYnVmZmVyLGUuYnl0ZU9mZnNldCxlLmJ5dGVMZW5ndGgpfXJldHVybiBCdChcbnIpfWEobW8sXCJmcm9tQXJyYXlWaWV3XCIpO2Z1bmN0aW9uIEx0KHIsZSx0KXtpZihlPDB8fHIuYnl0ZUxlbmd0aDxlKXRocm93IG5ldyBSYW5nZUVycm9yKFxuJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyk7aWYoci5ieXRlTGVuZ3RoPGUrKHR8fDApKXRocm93IG5ldyBSYW5nZUVycm9yKFxuJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyk7bGV0IG47cmV0dXJuIGU9PT12b2lkIDAmJnQ9PT12b2lkIDA/bj1uZXcgVWludDhBcnJheShcbnIpOnQ9PT12b2lkIDA/bj1uZXcgVWludDhBcnJheShyLGUpOm49bmV3IFVpbnQ4QXJyYXkocixlLHQpLE9iamVjdC5zZXRQcm90b3R5cGVPZihcbm4sZi5wcm90b3R5cGUpLG59YShMdCxcImZyb21BcnJheUJ1ZmZlclwiKTtmdW5jdGlvbiBnbyhyKXtpZihmLmlzQnVmZmVyKHIpKXtsZXQgZT1NdChcbnIubGVuZ3RoKXwwLHQ9bGUoZSk7cmV0dXJuIHQubGVuZ3RoPT09MHx8ci5jb3B5KHQsMCwwLGUpLHR9aWYoci5sZW5ndGghPT12b2lkIDApXG5yZXR1cm4gdHlwZW9mIHIubGVuZ3RoIT1cIm51bWJlclwifHxPdChyLmxlbmd0aCk/bGUoMCk6QnQocik7aWYoci50eXBlPT09XCJCdWZmZXJcIiYmXG5BcnJheS5pc0FycmF5KHIuZGF0YSkpcmV0dXJuIEJ0KHIuZGF0YSl9YShnbyxcImZyb21PYmplY3RcIik7ZnVuY3Rpb24gTXQocil7aWYocj49XG5zdCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gc2l6ZTogMHhcIitcbnN0LnRvU3RyaW5nKDE2KStcIiBieXRlc1wiKTtyZXR1cm4gcnwwfWEoTXQsXCJjaGVja2VkXCIpO2Z1bmN0aW9uIHdvKHIpe3JldHVybityIT1yJiZcbihyPTApLGYuYWxsb2MoK3IpfWEod28sXCJTbG93QnVmZmVyXCIpO2YuaXNCdWZmZXI9YShmdW5jdGlvbihlKXtyZXR1cm4gZSE9bnVsbCYmZS5cbl9pc0J1ZmZlcj09PSEwJiZlIT09Zi5wcm90b3R5cGV9LFwiaXNCdWZmZXJcIik7Zi5jb21wYXJlPWEoZnVuY3Rpb24oZSx0KXtpZihhZShlLFVpbnQ4QXJyYXkpJiZcbihlPWYuZnJvbShlLGUub2Zmc2V0LGUuYnl0ZUxlbmd0aCkpLGFlKHQsVWludDhBcnJheSkmJih0PWYuZnJvbSh0LHQub2Zmc2V0LHQuYnl0ZUxlbmd0aCkpLFxuIWYuaXNCdWZmZXIoZSl8fCFmLmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzXFxcbiBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5Jyk7aWYoZT09PXQpcmV0dXJuIDA7bGV0IG49ZS5sZW5ndGgsaT10LlxubGVuZ3RoO2ZvcihsZXQgcz0wLG89TWF0aC5taW4obixpKTtzPG87KytzKWlmKGVbc10hPT10W3NdKXtuPWVbc10saT10W3NdO2JyZWFrfXJldHVybiBuPFxuaT8tMTppPG4/MTowfSxcImNvbXBhcmVcIik7Zi5pc0VuY29kaW5nPWEoZnVuY3Rpb24oZSl7c3dpdGNoKFN0cmluZyhlKS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJcXFxuaGV4XCI6Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpjYXNlXCJiYXNlNjRcIjpjYXNlXCJcXFxudWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LFwiaXNFblxcXG5jb2RpbmdcIik7Zi5jb25jYXQ9YShmdW5jdGlvbihlLHQpe2lmKCFBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzXFxcbnRcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKTtpZihlLmxlbmd0aD09PTApcmV0dXJuIGYuYWxsb2MoMCk7bGV0IG47XG5pZih0PT09dm9pZCAwKWZvcih0PTAsbj0wO248ZS5sZW5ndGg7KytuKXQrPWVbbl0ubGVuZ3RoO2xldCBpPWYuYWxsb2NVbnNhZmUodCkscz0wO1xuZm9yKG49MDtuPGUubGVuZ3RoOysrbil7bGV0IG89ZVtuXTtpZihhZShvLFVpbnQ4QXJyYXkpKXMrby5sZW5ndGg+aS5sZW5ndGg/KGYuaXNCdWZmZXIoXG5vKXx8KG89Zi5mcm9tKG8pKSxvLmNvcHkoaSxzKSk6VWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoaSxvLHMpO2Vsc2UgaWYoZi5pc0J1ZmZlcihcbm8pKW8uY29weShpLHMpO2Vsc2UgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZcXFxuZmVycycpO3MrPW8ubGVuZ3RofXJldHVybiBpfSxcImNvbmNhdFwiKTtmdW5jdGlvbiBEbihyLGUpe2lmKGYuaXNCdWZmZXIocikpcmV0dXJuIHIuXG5sZW5ndGg7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KHIpfHxhZShyLEFycmF5QnVmZmVyKSlyZXR1cm4gci5ieXRlTGVuZ3RoO2lmKHR5cGVvZiByIT1cblwic3RyaW5nXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIFxcXG5CdWZmZXIsIG9yIEFycmF5QnVmZmVyLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHIpO2xldCB0PXIubGVuZ3RoLG49YXJndW1lbnRzLmxlbmd0aD5cbjImJmFyZ3VtZW50c1syXT09PSEwO2lmKCFuJiZ0PT09MClyZXR1cm4gMDtsZXQgaT0hMTtmb3IoOzspc3dpdGNoKGUpe2Nhc2VcImFzY2lpXCI6Y2FzZVwiXFxcbmxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiB0O2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBSdChyKS5sZW5ndGg7Y2FzZVwidWNcXFxuczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiB0KjI7Y2FzZVwiaGV4XCI6cmV0dXJuIHQ+Pj4xO2Nhc2VcIlxcXG5iYXNlNjRcIjpyZXR1cm4gSG4ocikubGVuZ3RoO2RlZmF1bHQ6aWYoaSlyZXR1cm4gbj8tMTpSdChyKS5sZW5ndGg7ZT0oXCJcIitlKS50b0xvd2VyQ2FzZSgpLFxuaT0hMH19YShEbixcImJ5dGVMZW5ndGhcIik7Zi5ieXRlTGVuZ3RoPURuO2Z1bmN0aW9uIGJvKHIsZSx0KXtsZXQgbj0hMTtpZigoZT09PXZvaWQgMHx8XG5lPDApJiYoZT0wKSxlPnRoaXMubGVuZ3RofHwoKHQ9PT12b2lkIDB8fHQ+dGhpcy5sZW5ndGgpJiYodD10aGlzLmxlbmd0aCksdDw9MCl8fFxuKHQ+Pj49MCxlPj4+PTAsdDw9ZSkpcmV0dXJuXCJcIjtmb3Iocnx8KHI9XCJ1dGY4XCIpOzspc3dpdGNoKHIpe2Nhc2VcImhleFwiOnJldHVybiBQbyhcbnRoaXMsZSx0KTtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm4ga24odGhpcyxlLHQpO2Nhc2VcImFzY2lpXCI6cmV0dXJuIElvKHRoaXMsXG5lLHQpO2Nhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiBUbyh0aGlzLGUsdCk7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIEFvKHRoaXMsZSxcbnQpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiBCbyh0aGlzLGUsdCk7ZGVmYXVsdDpcbmlmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK3IpO3I9KHIrXCJcIikudG9Mb3dlckNhc2UoKSxuPSEwfX1hKFxuYm8sXCJzbG93VG9TdHJpbmdcIik7Zi5wcm90b3R5cGUuX2lzQnVmZmVyPSEwO2Z1bmN0aW9uIHZlKHIsZSx0KXtsZXQgbj1yW2VdO3JbZV09clt0XSxcbnJbdF09bn1hKHZlLFwic3dhcFwiKTtmLnByb3RvdHlwZS5zd2FwMTY9YShmdW5jdGlvbigpe2xldCBlPXRoaXMubGVuZ3RoO2lmKGUlMiE9PTApXG50aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzXCIpO2ZvcihsZXQgdD0wO3Q8XG5lO3QrPTIpdmUodGhpcyx0LHQrMSk7cmV0dXJuIHRoaXN9LFwic3dhcDE2XCIpO2YucHJvdG90eXBlLnN3YXAzMj1hKGZ1bmN0aW9uKCl7bGV0IGU9dGhpcy5cbmxlbmd0aDtpZihlJTQhPT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdFxcXG5zXCIpO2ZvcihsZXQgdD0wO3Q8ZTt0Kz00KXZlKHRoaXMsdCx0KzMpLHZlKHRoaXMsdCsxLHQrMik7cmV0dXJuIHRoaXN9LFwic3dhcDMyXCIpO1xuZi5wcm90b3R5cGUuc3dhcDY0PWEoZnVuY3Rpb24oKXtsZXQgZT10aGlzLmxlbmd0aDtpZihlJTghPT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFxuXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0c1wiKTtmb3IobGV0IHQ9MDt0PGU7dCs9OCl2ZSh0aGlzLHQsdCs3KSxcbnZlKHRoaXMsdCsxLHQrNiksdmUodGhpcyx0KzIsdCs1KSx2ZSh0aGlzLHQrMyx0KzQpO3JldHVybiB0aGlzfSxcInN3YXA2NFwiKTtmLnByb3RvdHlwZS5cbnRvU3RyaW5nPWEoZnVuY3Rpb24oKXtsZXQgZT10aGlzLmxlbmd0aDtyZXR1cm4gZT09PTA/XCJcIjphcmd1bWVudHMubGVuZ3RoPT09MD9rbihcbnRoaXMsMCxlKTpiby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LFwidG9TdHJpbmdcIik7Zi5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmc9Zi5wcm90b3R5cGUuXG50b1N0cmluZztmLnByb3RvdHlwZS5lcXVhbHM9YShmdW5jdGlvbihlKXtpZighZi5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFxuXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO3JldHVybiB0aGlzPT09ZT8hMDpmLmNvbXBhcmUodGhpcyxlKT09PTB9LFwiZXF1YWxzXCIpO1xuZi5wcm90b3R5cGUuaW5zcGVjdD1hKGZ1bmN0aW9uKCl7bGV0IGU9XCJcIix0PUxlLklOU1BFQ1RfTUFYX0JZVEVTO3JldHVybiBlPXRoaXMudG9TdHJpbmcoXG5cImhleFwiLDAsdCkucmVwbGFjZSgvKC57Mn0pL2csXCIkMSBcIikudHJpbSgpLHRoaXMubGVuZ3RoPnQmJihlKz1cIiAuLi4gXCIpLFwiPEJ1ZmZlciBcIitcbmUrXCI+XCJ9LFwiaW5zcGVjdFwiKTtQbiYmKGYucHJvdG90eXBlW1BuXT1mLnByb3RvdHlwZS5pbnNwZWN0KTtmLnByb3RvdHlwZS5jb21wYXJlPVxuYShmdW5jdGlvbihlLHQsbixpLHMpe2lmKGFlKGUsVWludDhBcnJheSkmJihlPWYuZnJvbShlLGUub2Zmc2V0LGUuYnl0ZUxlbmd0aCkpLCFmLlxuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZVxcXG5yIG9yIFVpbnQ4QXJyYXkuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgZSk7aWYodD09PXZvaWQgMCYmKHQ9MCksbj09PXZvaWQgMCYmKG49ZT9cbmUubGVuZ3RoOjApLGk9PT12b2lkIDAmJihpPTApLHM9PT12b2lkIDAmJihzPXRoaXMubGVuZ3RoKSx0PDB8fG4+ZS5sZW5ndGh8fGk8MHx8XG5zPnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwib3V0IG9mIHJhbmdlIGluZGV4XCIpO2lmKGk+PXMmJnQ+PW4pcmV0dXJuIDA7XG5pZihpPj1zKXJldHVybi0xO2lmKHQ+PW4pcmV0dXJuIDE7aWYodD4+Pj0wLG4+Pj49MCxpPj4+PTAscz4+Pj0wLHRoaXM9PT1lKXJldHVybiAwO1xubGV0IG89cy1pLHU9bi10LGM9TWF0aC5taW4obyx1KSxoPXRoaXMuc2xpY2UoaSxzKSxsPWUuc2xpY2UodCxuKTtmb3IobGV0IHk9MDt5PGM7Kyt5KVxuaWYoaFt5XSE9PWxbeV0pe289aFt5XSx1PWxbeV07YnJlYWt9cmV0dXJuIG88dT8tMTp1PG8/MTowfSxcImNvbXBhcmVcIik7ZnVuY3Rpb24gT24ocixlLHQsbixpKXtcbmlmKHIubGVuZ3RoPT09MClyZXR1cm4tMTtpZih0eXBlb2YgdD09XCJzdHJpbmdcIj8obj10LHQ9MCk6dD4yMTQ3NDgzNjQ3P3Q9MjE0NzQ4MzY0NzpcbnQ8LTIxNDc0ODM2NDgmJih0PS0yMTQ3NDgzNjQ4KSx0PSt0LE90KHQpJiYodD1pPzA6ci5sZW5ndGgtMSksdDwwJiYodD1yLmxlbmd0aCt0KSxcbnQ+PXIubGVuZ3RoKXtpZihpKXJldHVybi0xO3Q9ci5sZW5ndGgtMX1lbHNlIGlmKHQ8MClpZihpKXQ9MDtlbHNlIHJldHVybi0xO2lmKHR5cGVvZiBlPT1cblwic3RyaW5nXCImJihlPWYuZnJvbShlLG4pKSxmLmlzQnVmZmVyKGUpKXJldHVybiBlLmxlbmd0aD09PTA/LTE6Qm4ocixlLHQsbixpKTtpZih0eXBlb2YgZT09XG5cIm51bWJlclwiKXJldHVybiBlPWUmMjU1LHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mPT1cImZ1bmN0aW9uXCI/aT9VaW50OEFycmF5LlxucHJvdG90eXBlLmluZGV4T2YuY2FsbChyLGUsdCk6VWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChyLGUsdCk6Qm4ocixcbltlXSx0LG4saSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcInZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlclwiKX1hKE9uLFwiYmlkXFxcbmlyZWN0aW9uYWxJbmRleE9mXCIpO2Z1bmN0aW9uIEJuKHIsZSx0LG4saSl7bGV0IHM9MSxvPXIubGVuZ3RoLHU9ZS5sZW5ndGg7aWYobiE9PVxudm9pZCAwJiYobj1TdHJpbmcobikudG9Mb3dlckNhc2UoKSxuPT09XCJ1Y3MyXCJ8fG49PT1cInVjcy0yXCJ8fG49PT1cInV0ZjE2bGVcInx8bj09PVwiXFxcbnV0Zi0xNmxlXCIpKXtpZihyLmxlbmd0aDwyfHxlLmxlbmd0aDwyKXJldHVybi0xO3M9MixvLz0yLHUvPTIsdC89Mn1mdW5jdGlvbiBjKGwseSl7XG5yZXR1cm4gcz09PTE/bFt5XTpsLnJlYWRVSW50MTZCRSh5KnMpfWEoYyxcInJlYWRcIik7bGV0IGg7aWYoaSl7bGV0IGw9LTE7Zm9yKGg9dDtoPFxubztoKyspaWYoYyhyLGgpPT09YyhlLGw9PT0tMT8wOmgtbCkpe2lmKGw9PT0tMSYmKGw9aCksaC1sKzE9PT11KXJldHVybiBsKnN9ZWxzZSBsIT09XG4tMSYmKGgtPWgtbCksbD0tMX1lbHNlIGZvcih0K3U+byYmKHQ9by11KSxoPXQ7aD49MDtoLS0pe2xldCBsPSEwO2ZvcihsZXQgeT0wO3k8dTt5KyspXG5pZihjKHIsaCt5KSE9PWMoZSx5KSl7bD0hMTticmVha31pZihsKXJldHVybiBofXJldHVybi0xfWEoQm4sXCJhcnJheUluZGV4T2ZcIik7Zi5wcm90b3R5cGUuXG5pbmNsdWRlcz1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5pbmRleE9mKGUsdCxuKSE9PS0xfSxcImluY2x1ZGVzXCIpO2YucHJvdG90eXBlLlxuaW5kZXhPZj1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gT24odGhpcyxlLHQsbiwhMCl9LFwiaW5kZXhPZlwiKTtmLnByb3RvdHlwZS5sYXN0SW5kZXhPZj1cbmEoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBPbih0aGlzLGUsdCxuLCExKX0sXCJsYXN0SW5kZXhPZlwiKTtmdW5jdGlvbiBTbyhyLGUsdCxuKXtcbnQ9TnVtYmVyKHQpfHwwO2xldCBpPXIubGVuZ3RoLXQ7bj8obj1OdW1iZXIobiksbj5pJiYobj1pKSk6bj1pO2xldCBzPWUubGVuZ3RoO24+XG5zLzImJihuPXMvMik7bGV0IG87Zm9yKG89MDtvPG47KytvKXtsZXQgdT1wYXJzZUludChlLnN1YnN0cihvKjIsMiksMTYpO2lmKE90KHUpKVxucmV0dXJuIG87clt0K29dPXV9cmV0dXJuIG99YShTbyxcImhleFdyaXRlXCIpO2Z1bmN0aW9uIHhvKHIsZSx0LG4pe3JldHVybiBvdChSdChlLFxuci5sZW5ndGgtdCkscix0LG4pfWEoeG8sXCJ1dGY4V3JpdGVcIik7ZnVuY3Rpb24gRW8ocixlLHQsbil7cmV0dXJuIG90KE1vKGUpLHIsdCxuKX1cbmEoRW8sXCJhc2NpaVdyaXRlXCIpO2Z1bmN0aW9uIHZvKHIsZSx0LG4pe3JldHVybiBvdChIbihlKSxyLHQsbil9YSh2byxcImJhc2U2NFdyaXRlXCIpO1xuZnVuY3Rpb24gX28ocixlLHQsbil7cmV0dXJuIG90KERvKGUsci5sZW5ndGgtdCkscix0LG4pfWEoX28sXCJ1Y3MyV3JpdGVcIik7Zi5wcm90b3R5cGUuXG53cml0ZT1hKGZ1bmN0aW9uKGUsdCxuLGkpe2lmKHQ9PT12b2lkIDApaT1cInV0ZjhcIixuPXRoaXMubGVuZ3RoLHQ9MDtlbHNlIGlmKG49PT12b2lkIDAmJlxudHlwZW9mIHQ9PVwic3RyaW5nXCIpaT10LG49dGhpcy5sZW5ndGgsdD0wO2Vsc2UgaWYoaXNGaW5pdGUodCkpdD10Pj4+MCxpc0Zpbml0ZShuKT9cbihuPW4+Pj4wLGk9PT12b2lkIDAmJihpPVwidXRmOFwiKSk6KGk9bixuPXZvaWQgMCk7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXIud3JpXFxcbnRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWRcIik7bGV0IHM9dGhpcy5sZW5ndGgtXG50O2lmKChuPT09dm9pZCAwfHxuPnMpJiYobj1zKSxlLmxlbmd0aD4wJiYobjwwfHx0PDApfHx0PnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFxuXCJBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kc1wiKTtpfHwoaT1cInV0ZjhcIik7bGV0IG89ITE7Zm9yKDs7KXN3aXRjaChpKXtjYXNlXCJcXFxuaGV4XCI6cmV0dXJuIFNvKHRoaXMsZSx0LG4pO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiB4byh0aGlzLGUsdCxuKTtjYXNlXCJhc2NcXFxuaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gRW8odGhpcyxlLHQsbik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIHZvKHRoaXMsXG5lLHQsbik7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIF9vKHRoaXMsZSx0LG4pO2RlZmF1bHQ6XG5pZihvKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitpKTtpPShcIlwiK2kpLnRvTG93ZXJDYXNlKCksbz0hMH19LFwiXFxcbndyaXRlXCIpO2YucHJvdG90eXBlLnRvSlNPTj1hKGZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6XCJCdWZmZXJcIixkYXRhOkFycmF5LnByb3RvdHlwZS5cbnNsaWNlLmNhbGwodGhpcy5fYXJyfHx0aGlzLDApfX0sXCJ0b0pTT05cIik7ZnVuY3Rpb24gQW8ocixlLHQpe3JldHVybiBlPT09MCYmdD09PXIuXG5sZW5ndGg/UHQuZnJvbUJ5dGVBcnJheShyKTpQdC5mcm9tQnl0ZUFycmF5KHIuc2xpY2UoZSx0KSl9YShBbyxcImJhc2U2NFNsaWNlXCIpO2Z1bmN0aW9uIGtuKHIsZSx0KXtcbnQ9TWF0aC5taW4oci5sZW5ndGgsdCk7bGV0IG49W10saT1lO2Zvcig7aTx0Oyl7bGV0IHM9cltpXSxvPW51bGwsdT1zPjIzOT80OnM+MjIzP1xuMzpzPjE5MT8yOjE7aWYoaSt1PD10KXtsZXQgYyxoLGwseTtzd2l0Y2godSl7Y2FzZSAxOnM8MTI4JiYobz1zKTticmVhaztjYXNlIDI6Yz1cbnJbaSsxXSwoYyYxOTIpPT09MTI4JiYoeT0ocyYzMSk8PDZ8YyY2Myx5PjEyNyYmKG89eSkpO2JyZWFrO2Nhc2UgMzpjPXJbaSsxXSxoPXJbaStcbjJdLChjJjE5Mik9PT0xMjgmJihoJjE5Mik9PT0xMjgmJih5PShzJjE1KTw8MTJ8KGMmNjMpPDw2fGgmNjMseT4yMDQ3JiYoeTw1NTI5Nnx8XG55PjU3MzQzKSYmKG89eSkpO2JyZWFrO2Nhc2UgNDpjPXJbaSsxXSxoPXJbaSsyXSxsPXJbaSszXSwoYyYxOTIpPT09MTI4JiYoaCYxOTIpPT09XG4xMjgmJihsJjE5Mik9PT0xMjgmJih5PShzJjE1KTw8MTh8KGMmNjMpPDwxMnwoaCY2Myk8PDZ8bCY2Myx5PjY1NTM1JiZ5PDExMTQxMTImJlxuKG89eSkpfX1vPT09bnVsbD8obz02NTUzMyx1PTEpOm8+NjU1MzUmJihvLT02NTUzNixuLnB1c2gobz4+PjEwJjEwMjN8NTUyOTYpLG89NTYzMjB8XG5vJjEwMjMpLG4ucHVzaChvKSxpKz11fXJldHVybiBDbyhuKX1hKGtuLFwidXRmOFNsaWNlXCIpO3ZhciBMbj00MDk2O2Z1bmN0aW9uIENvKHIpe1xubGV0IGU9ci5sZW5ndGg7aWYoZTw9TG4pcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLHIpO2xldCB0PVwiXCIsbj0wO1xuZm9yKDtuPGU7KXQrPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLHIuc2xpY2UobixuKz1MbikpO3JldHVybiB0fWEoQ28sXCJkXFxcbmVjb2RlQ29kZVBvaW50c0FycmF5XCIpO2Z1bmN0aW9uIElvKHIsZSx0KXtsZXQgbj1cIlwiO3Q9TWF0aC5taW4oci5sZW5ndGgsdCk7Zm9yKGxldCBpPWU7aTxcbnQ7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUocltpXSYxMjcpO3JldHVybiBufWEoSW8sXCJhc2NpaVNsaWNlXCIpO2Z1bmN0aW9uIFRvKHIsZSx0KXtcbmxldCBuPVwiXCI7dD1NYXRoLm1pbihyLmxlbmd0aCx0KTtmb3IobGV0IGk9ZTtpPHQ7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUocltpXSk7XG5yZXR1cm4gbn1hKFRvLFwibGF0aW4xU2xpY2VcIik7ZnVuY3Rpb24gUG8ocixlLHQpe2xldCBuPXIubGVuZ3RoOyghZXx8ZTwwKSYmKGU9MCksXG4oIXR8fHQ8MHx8dD5uKSYmKHQ9bik7bGV0IGk9XCJcIjtmb3IobGV0IHM9ZTtzPHQ7KytzKWkrPU9vW3Jbc11dO3JldHVybiBpfWEoUG8sXCJoZVxcXG54U2xpY2VcIik7ZnVuY3Rpb24gQm8ocixlLHQpe2xldCBuPXIuc2xpY2UoZSx0KSxpPVwiXCI7Zm9yKGxldCBzPTA7czxuLmxlbmd0aC0xO3MrPVxuMilpKz1TdHJpbmcuZnJvbUNoYXJDb2RlKG5bc10rbltzKzFdKjI1Nik7cmV0dXJuIGl9YShCbyxcInV0ZjE2bGVTbGljZVwiKTtmLnByb3RvdHlwZS5cbnNsaWNlPWEoZnVuY3Rpb24oZSx0KXtsZXQgbj10aGlzLmxlbmd0aDtlPX5+ZSx0PXQ9PT12b2lkIDA/bjp+fnQsZTwwPyhlKz1uLGU8MCYmXG4oZT0wKSk6ZT5uJiYoZT1uKSx0PDA/KHQrPW4sdDwwJiYodD0wKSk6dD5uJiYodD1uKSx0PGUmJih0PWUpO2xldCBpPXRoaXMuc3ViYXJyYXkoXG5lLHQpO3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YoaSxmLnByb3RvdHlwZSksaX0sXCJzbGljZVwiKTtmdW5jdGlvbiBVKHIsZSx0KXtpZihyJVxuMSE9PTB8fHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm9mZnNldCBpcyBub3QgdWludFwiKTtpZihyK2U+dCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcblwiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aFwiKX1hKFUsXCJjaGVja09mZnNldFwiKTtmLnByb3RvdHlwZS5yZWFkVWludExFPVxuZi5wcm90b3R5cGUucmVhZFVJbnRMRT1hKGZ1bmN0aW9uKGUsdCxuKXtlPWU+Pj4wLHQ9dD4+PjAsbnx8VShlLHQsdGhpcy5sZW5ndGgpO2xldCBpPXRoaXNbZV0sXG5zPTEsbz0wO2Zvcig7KytvPHQmJihzKj0yNTYpOylpKz10aGlzW2Urb10qcztyZXR1cm4gaX0sXCJyZWFkVUludExFXCIpO2YucHJvdG90eXBlLlxucmVhZFVpbnRCRT1mLnByb3RvdHlwZS5yZWFkVUludEJFPWEoZnVuY3Rpb24oZSx0LG4pe2U9ZT4+PjAsdD10Pj4+MCxufHxVKGUsdCx0aGlzLlxubGVuZ3RoKTtsZXQgaT10aGlzW2UrLS10XSxzPTE7Zm9yKDt0PjAmJihzKj0yNTYpOylpKz10aGlzW2UrLS10XSpzO3JldHVybiBpfSxcInJlXFxcbmFkVUludEJFXCIpO2YucHJvdG90eXBlLnJlYWRVaW50OD1mLnByb3RvdHlwZS5yZWFkVUludDg9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPVxuZT4+PjAsdHx8VShlLDEsdGhpcy5sZW5ndGgpLHRoaXNbZV19LFwicmVhZFVJbnQ4XCIpO2YucHJvdG90eXBlLnJlYWRVaW50MTZMRT1mLnByb3RvdHlwZS5cbnJlYWRVSW50MTZMRT1hKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9ZT4+PjAsdHx8VShlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV18dGhpc1tlK1xuMV08PDh9LFwicmVhZFVJbnQxNkxFXCIpO2YucHJvdG90eXBlLnJlYWRVaW50MTZCRT1mLnByb3RvdHlwZS5yZWFkVUludDE2QkU9YShmdW5jdGlvbihlLHQpe1xucmV0dXJuIGU9ZT4+PjAsdHx8VShlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV08PDh8dGhpc1tlKzFdfSxcInJlYWRVSW50MTZCRVwiKTtmLnByb3RvdHlwZS5cbnJlYWRVaW50MzJMRT1mLnByb3RvdHlwZS5yZWFkVUludDMyTEU9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPWU+Pj4wLHR8fFUoZSw0LHRoaXMuXG5sZW5ndGgpLCh0aGlzW2VdfHRoaXNbZSsxXTw8OHx0aGlzW2UrMl08PDE2KSt0aGlzW2UrM10qMTY3NzcyMTZ9LFwicmVhZFVJbnQzMkxFXCIpO1xuZi5wcm90b3R5cGUucmVhZFVpbnQzMkJFPWYucHJvdG90eXBlLnJlYWRVSW50MzJCRT1hKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9ZT4+PjAsXG50fHxVKGUsNCx0aGlzLmxlbmd0aCksdGhpc1tlXSoxNjc3NzIxNisodGhpc1tlKzFdPDwxNnx0aGlzW2UrMl08PDh8dGhpc1tlKzNdKX0sXCJcXFxucmVhZFVJbnQzMkJFXCIpO2YucHJvdG90eXBlLnJlYWRCaWdVSW50NjRMRT1tZShhKGZ1bmN0aW9uKGUpe2U9ZT4+PjAsQmUoZSxcIm9mZnNldFwiKTtcbmxldCB0PXRoaXNbZV0sbj10aGlzW2UrN107KHQ9PT12b2lkIDB8fG49PT12b2lkIDApJiZqZShlLHRoaXMubGVuZ3RoLTgpO2xldCBpPXQrXG50aGlzWysrZV0qMioqOCt0aGlzWysrZV0qMioqMTYrdGhpc1srK2VdKjIqKjI0LHM9dGhpc1srK2VdK3RoaXNbKytlXSoyKio4K3RoaXNbKytlXSpcbjIqKjE2K24qMioqMjQ7cmV0dXJuIEJpZ0ludChpKSsoQmlnSW50KHMpPDxCaWdJbnQoMzIpKX0sXCJyZWFkQmlnVUludDY0TEVcIikpO2YucHJvdG90eXBlLlxucmVhZEJpZ1VJbnQ2NEJFPW1lKGEoZnVuY3Rpb24oZSl7ZT1lPj4+MCxCZShlLFwib2Zmc2V0XCIpO2xldCB0PXRoaXNbZV0sbj10aGlzW2UrN107XG4odD09PXZvaWQgMHx8bj09PXZvaWQgMCkmJmplKGUsdGhpcy5sZW5ndGgtOCk7bGV0IGk9dCoyKioyNCt0aGlzWysrZV0qMioqMTYrdGhpc1srK2VdKlxuMioqOCt0aGlzWysrZV0scz10aGlzWysrZV0qMioqMjQrdGhpc1srK2VdKjIqKjE2K3RoaXNbKytlXSoyKio4K247cmV0dXJuKEJpZ0ludChcbmkpPDxCaWdJbnQoMzIpKStCaWdJbnQocyl9LFwicmVhZEJpZ1VJbnQ2NEJFXCIpKTtmLnByb3RvdHlwZS5yZWFkSW50TEU9YShmdW5jdGlvbihlLHQsbil7XG5lPWU+Pj4wLHQ9dD4+PjAsbnx8VShlLHQsdGhpcy5sZW5ndGgpO2xldCBpPXRoaXNbZV0scz0xLG89MDtmb3IoOysrbzx0JiYocyo9MjU2KTspXG5pKz10aGlzW2Urb10qcztyZXR1cm4gcyo9MTI4LGk+PXMmJihpLT1NYXRoLnBvdygyLDgqdCkpLGl9LFwicmVhZEludExFXCIpO2YucHJvdG90eXBlLlxucmVhZEludEJFPWEoZnVuY3Rpb24oZSx0LG4pe2U9ZT4+PjAsdD10Pj4+MCxufHxVKGUsdCx0aGlzLmxlbmd0aCk7bGV0IGk9dCxzPTEsbz10aGlzW2UrXG4tLWldO2Zvcig7aT4wJiYocyo9MjU2KTspbys9dGhpc1tlKy0taV0qcztyZXR1cm4gcyo9MTI4LG8+PXMmJihvLT1NYXRoLnBvdygyLDgqdCkpLFxub30sXCJyZWFkSW50QkVcIik7Zi5wcm90b3R5cGUucmVhZEludDg9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPWU+Pj4wLHR8fFUoZSwxLHRoaXMuXG5sZW5ndGgpLHRoaXNbZV0mMTI4PygyNTUtdGhpc1tlXSsxKSotMTp0aGlzW2VdfSxcInJlYWRJbnQ4XCIpO2YucHJvdG90eXBlLnJlYWRJbnQxNkxFPVxuYShmdW5jdGlvbihlLHQpe2U9ZT4+PjAsdHx8VShlLDIsdGhpcy5sZW5ndGgpO2xldCBuPXRoaXNbZV18dGhpc1tlKzFdPDw4O3JldHVybiBuJlxuMzI3Njg/bnw0Mjk0OTAxNzYwOm59LFwicmVhZEludDE2TEVcIik7Zi5wcm90b3R5cGUucmVhZEludDE2QkU9YShmdW5jdGlvbihlLHQpe2U9ZT4+PlxuMCx0fHxVKGUsMix0aGlzLmxlbmd0aCk7bGV0IG49dGhpc1tlKzFdfHRoaXNbZV08PDg7cmV0dXJuIG4mMzI3Njg/bnw0Mjk0OTAxNzYwOm59LFxuXCJyZWFkSW50MTZCRVwiKTtmLnByb3RvdHlwZS5yZWFkSW50MzJMRT1hKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9ZT4+PjAsdHx8VShlLDQsdGhpcy5cbmxlbmd0aCksdGhpc1tlXXx0aGlzW2UrMV08PDh8dGhpc1tlKzJdPDwxNnx0aGlzW2UrM108PDI0fSxcInJlYWRJbnQzMkxFXCIpO2YucHJvdG90eXBlLlxucmVhZEludDMyQkU9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPWU+Pj4wLHR8fFUoZSw0LHRoaXMubGVuZ3RoKSx0aGlzW2VdPDwyNHx0aGlzW2UrXG4xXTw8MTZ8dGhpc1tlKzJdPDw4fHRoaXNbZSszXX0sXCJyZWFkSW50MzJCRVwiKTtmLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRT1tZShhKGZ1bmN0aW9uKGUpe1xuZT1lPj4+MCxCZShlLFwib2Zmc2V0XCIpO2xldCB0PXRoaXNbZV0sbj10aGlzW2UrN107KHQ9PT12b2lkIDB8fG49PT12b2lkIDApJiZqZShlLFxudGhpcy5sZW5ndGgtOCk7bGV0IGk9dGhpc1tlKzRdK3RoaXNbZSs1XSoyKio4K3RoaXNbZSs2XSoyKioxNisobjw8MjQpO3JldHVybihCaWdJbnQoXG5pKTw8QmlnSW50KDMyKSkrQmlnSW50KHQrdGhpc1srK2VdKjIqKjgrdGhpc1srK2VdKjIqKjE2K3RoaXNbKytlXSoyKioyNCl9LFwicmVhZEJcXFxuaWdJbnQ2NExFXCIpKTtmLnByb3RvdHlwZS5yZWFkQmlnSW50NjRCRT1tZShhKGZ1bmN0aW9uKGUpe2U9ZT4+PjAsQmUoZSxcIm9mZnNldFwiKTtcbmxldCB0PXRoaXNbZV0sbj10aGlzW2UrN107KHQ9PT12b2lkIDB8fG49PT12b2lkIDApJiZqZShlLHRoaXMubGVuZ3RoLTgpO2xldCBpPSh0PDxcbjI0KSt0aGlzWysrZV0qMioqMTYrdGhpc1srK2VdKjIqKjgrdGhpc1srK2VdO3JldHVybihCaWdJbnQoaSk8PEJpZ0ludCgzMikpK0JpZ0ludChcbnRoaXNbKytlXSoyKioyNCt0aGlzWysrZV0qMioqMTYrdGhpc1srK2VdKjIqKjgrbil9LFwicmVhZEJpZ0ludDY0QkVcIikpO2YucHJvdG90eXBlLlxucmVhZEZsb2F0TEU9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPWU+Pj4wLHR8fFUoZSw0LHRoaXMubGVuZ3RoKSxQZS5yZWFkKHRoaXMsZSxcbiEwLDIzLDQpfSxcInJlYWRGbG9hdExFXCIpO2YucHJvdG90eXBlLnJlYWRGbG9hdEJFPWEoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1lPj4+MCxcbnR8fFUoZSw0LHRoaXMubGVuZ3RoKSxQZS5yZWFkKHRoaXMsZSwhMSwyMyw0KX0sXCJyZWFkRmxvYXRCRVwiKTtmLnByb3RvdHlwZS5yZWFkRG91YmxlTEU9XG5hKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9ZT4+PjAsdHx8VShlLDgsdGhpcy5sZW5ndGgpLFBlLnJlYWQodGhpcyxlLCEwLDUyLDgpfSxcInJcXFxuZWFkRG91YmxlTEVcIik7Zi5wcm90b3R5cGUucmVhZERvdWJsZUJFPWEoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1lPj4+MCx0fHxVKGUsOCx0aGlzLlxubGVuZ3RoKSxQZS5yZWFkKHRoaXMsZSwhMSw1Miw4KX0sXCJyZWFkRG91YmxlQkVcIik7ZnVuY3Rpb24geihyLGUsdCxuLGkscyl7aWYoIWYuaXNCdWZmZXIoXG5yKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtpZihlPml8fGU8XG5zKXRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpO2lmKHQrbj5yLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcblwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfWEoeixcImNoZWNrSW50XCIpO2YucHJvdG90eXBlLndyaXRlVWludExFPWYucHJvdG90eXBlLndyaXRlVUludExFPVxuYShmdW5jdGlvbihlLHQsbixpKXtpZihlPStlLHQ9dD4+PjAsbj1uPj4+MCwhaSl7bGV0IHU9TWF0aC5wb3coMiw4Km4pLTE7eih0aGlzLGUsXG50LG4sdSwwKX1sZXQgcz0xLG89MDtmb3IodGhpc1t0XT1lJjI1NTsrK288biYmKHMqPTI1Nik7KXRoaXNbdCtvXT1lL3MmMjU1O3JldHVybiB0K1xubn0sXCJ3cml0ZVVJbnRMRVwiKTtmLnByb3RvdHlwZS53cml0ZVVpbnRCRT1mLnByb3RvdHlwZS53cml0ZVVJbnRCRT1hKGZ1bmN0aW9uKGUsdCxuLGkpe1xuaWYoZT0rZSx0PXQ+Pj4wLG49bj4+PjAsIWkpe2xldCB1PU1hdGgucG93KDIsOCpuKS0xO3oodGhpcyxlLHQsbix1LDApfWxldCBzPW4tMSxcbm89MTtmb3IodGhpc1t0K3NdPWUmMjU1Oy0tcz49MCYmKG8qPTI1Nik7KXRoaXNbdCtzXT1lL28mMjU1O3JldHVybiB0K259LFwid3JpdGVVSVxcXG5udEJFXCIpO2YucHJvdG90eXBlLndyaXRlVWludDg9Zi5wcm90b3R5cGUud3JpdGVVSW50OD1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT1cbitlLHQ9dD4+PjAsbnx8eih0aGlzLGUsdCwxLDI1NSwwKSx0aGlzW3RdPWUmMjU1LHQrMX0sXCJ3cml0ZVVJbnQ4XCIpO2YucHJvdG90eXBlLndyaXRlVWludDE2TEU9XG5mLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFPWEoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPStlLHQ9dD4+PjAsbnx8eih0aGlzLGUsdCwyLFxuNjU1MzUsMCksdGhpc1t0XT1lJjI1NSx0aGlzW3QrMV09ZT4+PjgsdCsyfSxcIndyaXRlVUludDE2TEVcIik7Zi5wcm90b3R5cGUud3JpdGVVaW50MTZCRT1cbmYucHJvdG90eXBlLndyaXRlVUludDE2QkU9YShmdW5jdGlvbihlLHQsbil7cmV0dXJuIGU9K2UsdD10Pj4+MCxufHx6KHRoaXMsZSx0LDIsXG42NTUzNSwwKSx0aGlzW3RdPWU+Pj44LHRoaXNbdCsxXT1lJjI1NSx0KzJ9LFwid3JpdGVVSW50MTZCRVwiKTtmLnByb3RvdHlwZS53cml0ZVVpbnQzMkxFPVxuZi5wcm90b3R5cGUud3JpdGVVSW50MzJMRT1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT0rZSx0PXQ+Pj4wLG58fHoodGhpcyxlLHQsNCxcbjQyOTQ5NjcyOTUsMCksdGhpc1t0KzNdPWU+Pj4yNCx0aGlzW3QrMl09ZT4+PjE2LHRoaXNbdCsxXT1lPj4+OCx0aGlzW3RdPWUmMjU1LHQrXG40fSxcIndyaXRlVUludDMyTEVcIik7Zi5wcm90b3R5cGUud3JpdGVVaW50MzJCRT1mLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFPWEoZnVuY3Rpb24oZSx0LG4pe1xucmV0dXJuIGU9K2UsdD10Pj4+MCxufHx6KHRoaXMsZSx0LDQsNDI5NDk2NzI5NSwwKSx0aGlzW3RdPWU+Pj4yNCx0aGlzW3QrMV09ZT4+PjE2LFxudGhpc1t0KzJdPWU+Pj44LHRoaXNbdCszXT1lJjI1NSx0KzR9LFwid3JpdGVVSW50MzJCRVwiKTtmdW5jdGlvbiBVbihyLGUsdCxuLGkpe2puKFxuZSxuLGkscix0LDcpO2xldCBzPU51bWJlcihlJkJpZ0ludCg0Mjk0OTY3Mjk1KSk7clt0KytdPXMscz1zPj44LHJbdCsrXT1zLHM9cz4+OCxcbnJbdCsrXT1zLHM9cz4+OCxyW3QrK109cztsZXQgbz1OdW1iZXIoZT4+QmlnSW50KDMyKSZCaWdJbnQoNDI5NDk2NzI5NSkpO3JldHVybiByW3QrK109XG5vLG89bz4+OCxyW3QrK109byxvPW8+Pjgsclt0KytdPW8sbz1vPj44LHJbdCsrXT1vLHR9YShVbixcIndydEJpZ1VJbnQ2NExFXCIpO2Z1bmN0aW9uIHFuKHIsZSx0LG4saSl7XG5qbihlLG4saSxyLHQsNyk7bGV0IHM9TnVtYmVyKGUmQmlnSW50KDQyOTQ5NjcyOTUpKTtyW3QrN109cyxzPXM+Pjgsclt0KzZdPXMscz1zPj5cbjgsclt0KzVdPXMscz1zPj44LHJbdCs0XT1zO2xldCBvPU51bWJlcihlPj5CaWdJbnQoMzIpJkJpZ0ludCg0Mjk0OTY3Mjk1KSk7cmV0dXJuIHJbdCtcbjNdPW8sbz1vPj44LHJbdCsyXT1vLG89bz4+OCxyW3QrMV09byxvPW8+Pjgsclt0XT1vLHQrOH1hKHFuLFwid3J0QmlnVUludDY0QkVcIik7Zi5cbnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFPW1lKGEoZnVuY3Rpb24oZSx0PTApe3JldHVybiBVbih0aGlzLGUsdCxCaWdJbnQoMCksQmlnSW50KFxuXCIweGZmZmZmZmZmZmZmZmZmZmZcIikpfSxcIndyaXRlQmlnVUludDY0TEVcIikpO2YucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkU9bWUoYShmdW5jdGlvbihlLHQ9MCl7XG5yZXR1cm4gcW4odGhpcyxlLHQsQmlnSW50KDApLEJpZ0ludChcIjB4ZmZmZmZmZmZmZmZmZmZmZlwiKSl9LFwid3JpdGVCaWdVSW50NjRCRVwiKSk7XG5mLnByb3RvdHlwZS53cml0ZUludExFPWEoZnVuY3Rpb24oZSx0LG4saSl7aWYoZT0rZSx0PXQ+Pj4wLCFpKXtsZXQgYz1NYXRoLnBvdygyLFxuOCpuLTEpO3oodGhpcyxlLHQsbixjLTEsLWMpfWxldCBzPTAsbz0xLHU9MDtmb3IodGhpc1t0XT1lJjI1NTsrK3M8biYmKG8qPTI1Nik7KWU8XG4wJiZ1PT09MCYmdGhpc1t0K3MtMV0hPT0wJiYodT0xKSx0aGlzW3Qrc109KGUvbz4+MCktdSYyNTU7cmV0dXJuIHQrbn0sXCJ3cml0ZUludExcXFxuRVwiKTtmLnByb3RvdHlwZS53cml0ZUludEJFPWEoZnVuY3Rpb24oZSx0LG4saSl7aWYoZT0rZSx0PXQ+Pj4wLCFpKXtsZXQgYz1NYXRoLnBvdyhcbjIsOCpuLTEpO3oodGhpcyxlLHQsbixjLTEsLWMpfWxldCBzPW4tMSxvPTEsdT0wO2Zvcih0aGlzW3Qrc109ZSYyNTU7LS1zPj0wJiYobyo9XG4yNTYpOyllPDAmJnU9PT0wJiZ0aGlzW3QrcysxXSE9PTAmJih1PTEpLHRoaXNbdCtzXT0oZS9vPj4wKS11JjI1NTtyZXR1cm4gdCtufSxcIndcXFxucml0ZUludEJFXCIpO2YucHJvdG90eXBlLndyaXRlSW50OD1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT0rZSx0PXQ+Pj4wLG58fHoodGhpcyxcbmUsdCwxLDEyNywtMTI4KSxlPDAmJihlPTI1NStlKzEpLHRoaXNbdF09ZSYyNTUsdCsxfSxcIndyaXRlSW50OFwiKTtmLnByb3RvdHlwZS53cml0ZUludDE2TEU9XG5hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT0rZSx0PXQ+Pj4wLG58fHoodGhpcyxlLHQsMiwzMjc2NywtMzI3NjgpLHRoaXNbdF09ZSYyNTUsXG50aGlzW3QrMV09ZT4+PjgsdCsyfSxcIndyaXRlSW50MTZMRVwiKTtmLnByb3RvdHlwZS53cml0ZUludDE2QkU9YShmdW5jdGlvbihlLHQsbil7XG5yZXR1cm4gZT0rZSx0PXQ+Pj4wLG58fHoodGhpcyxlLHQsMiwzMjc2NywtMzI3NjgpLHRoaXNbdF09ZT4+PjgsdGhpc1t0KzFdPWUmMjU1LFxudCsyfSxcIndyaXRlSW50MTZCRVwiKTtmLnByb3RvdHlwZS53cml0ZUludDMyTEU9YShmdW5jdGlvbihlLHQsbil7cmV0dXJuIGU9K2UsdD10Pj4+XG4wLG58fHoodGhpcyxlLHQsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSx0aGlzW3RdPWUmMjU1LHRoaXNbdCsxXT1lPj4+OCx0aGlzW3QrMl09XG5lPj4+MTYsdGhpc1t0KzNdPWU+Pj4yNCx0KzR9LFwid3JpdGVJbnQzMkxFXCIpO2YucHJvdG90eXBlLndyaXRlSW50MzJCRT1hKGZ1bmN0aW9uKGUsdCxuKXtcbnJldHVybiBlPStlLHQ9dD4+PjAsbnx8eih0aGlzLGUsdCw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLGU8MCYmKGU9NDI5NDk2NzI5NStlK1xuMSksdGhpc1t0XT1lPj4+MjQsdGhpc1t0KzFdPWU+Pj4xNix0aGlzW3QrMl09ZT4+PjgsdGhpc1t0KzNdPWUmMjU1LHQrNH0sXCJ3cml0ZUluXFxcbnQzMkJFXCIpO2YucHJvdG90eXBlLndyaXRlQmlnSW50NjRMRT1tZShhKGZ1bmN0aW9uKGUsdD0wKXtyZXR1cm4gVW4odGhpcyxlLHQsLUJpZ0ludChcblwiMHg4MDAwMDAwMDAwMDAwMDAwXCIpLEJpZ0ludChcIjB4N2ZmZmZmZmZmZmZmZmZmZlwiKSl9LFwid3JpdGVCaWdJbnQ2NExFXCIpKTtmLnByb3RvdHlwZS5cbndyaXRlQmlnSW50NjRCRT1tZShhKGZ1bmN0aW9uKGUsdD0wKXtyZXR1cm4gcW4odGhpcyxlLHQsLUJpZ0ludChcIjB4ODAwMDAwMDAwMDAwMFxcXG4wMDBcIiksQmlnSW50KFwiMHg3ZmZmZmZmZmZmZmZmZmZmXCIpKX0sXCJ3cml0ZUJpZ0ludDY0QkVcIikpO2Z1bmN0aW9uIE5uKHIsZSx0LG4saSxzKXtcbmlmKHQrbj5yLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG5cIkluZGV4IG91dCBvZiByYW5nZVwiKX1hKE5uLFwiY2hlY2tJRUVFNzU0XCIpO2Z1bmN0aW9uIFFuKHIsZSx0LG4saSl7cmV0dXJuIGU9K2UsdD1cbnQ+Pj4wLGl8fE5uKHIsZSx0LDQsMzQwMjgyMzQ2NjM4NTI4ODZlMjIsLTM0MDI4MjM0NjYzODUyODg2ZTIyKSxQZS53cml0ZShyLGUsdCxuLFxuMjMsNCksdCs0fWEoUW4sXCJ3cml0ZUZsb2F0XCIpO2YucHJvdG90eXBlLndyaXRlRmxvYXRMRT1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gUW4oXG50aGlzLGUsdCwhMCxuKX0sXCJ3cml0ZUZsb2F0TEVcIik7Zi5wcm90b3R5cGUud3JpdGVGbG9hdEJFPWEoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBRbihcbnRoaXMsZSx0LCExLG4pfSxcIndyaXRlRmxvYXRCRVwiKTtmdW5jdGlvbiBXbihyLGUsdCxuLGkpe3JldHVybiBlPStlLHQ9dD4+PjAsaXx8Tm4oXG5yLGUsdCw4LDE3OTc2OTMxMzQ4NjIzMTU3ZTI5MiwtMTc5NzY5MzEzNDg2MjMxNTdlMjkyKSxQZS53cml0ZShyLGUsdCxuLDUyLDgpLHQrOH1cbmEoV24sXCJ3cml0ZURvdWJsZVwiKTtmLnByb3RvdHlwZS53cml0ZURvdWJsZUxFPWEoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBXbih0aGlzLGUsXG50LCEwLG4pfSxcIndyaXRlRG91YmxlTEVcIik7Zi5wcm90b3R5cGUud3JpdGVEb3VibGVCRT1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gV24oXG50aGlzLGUsdCwhMSxuKX0sXCJ3cml0ZURvdWJsZUJFXCIpO2YucHJvdG90eXBlLmNvcHk9YShmdW5jdGlvbihlLHQsbixpKXtpZighZi5pc0J1ZmZlcihcbmUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXJcIik7aWYobnx8KG49MCksIWkmJmkhPT0wJiYoaT1cbnRoaXMubGVuZ3RoKSx0Pj1lLmxlbmd0aCYmKHQ9ZS5sZW5ndGgpLHR8fCh0PTApLGk+MCYmaTxuJiYoaT1uKSxpPT09bnx8ZS5sZW5ndGg9PT1cbjB8fHRoaXMubGVuZ3RoPT09MClyZXR1cm4gMDtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJ0YXJnZXRTdGFydCBvdXQgb2YgYm91blxcXG5kc1wiKTtpZihuPDB8fG4+PXRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKGk8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcblwic291cmNlRW5kIG91dCBvZiBib3VuZHNcIik7aT50aGlzLmxlbmd0aCYmKGk9dGhpcy5sZW5ndGgpLGUubGVuZ3RoLXQ8aS1uJiYoaT1lLmxlbmd0aC1cbnQrbik7bGV0IHM9aS1uO3JldHVybiB0aGlzPT09ZSYmdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW49PVwiZnVuY3Rpb1xcXG5uXCI/dGhpcy5jb3B5V2l0aGluKHQsbixpKTpVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChlLHRoaXMuc3ViYXJyYXkobixpKSx0KSxcbnN9LFwiY29weVwiKTtmLnByb3RvdHlwZS5maWxsPWEoZnVuY3Rpb24oZSx0LG4saSl7aWYodHlwZW9mIGU9PVwic3RyaW5nXCIpe2lmKHR5cGVvZiB0PT1cblwic3RyaW5nXCI/KGk9dCx0PTAsbj10aGlzLmxlbmd0aCk6dHlwZW9mIG49PVwic3RyaW5nXCImJihpPW4sbj10aGlzLmxlbmd0aCksaSE9PXZvaWQgMCYmXG50eXBlb2YgaSE9XCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZih0eXBlb2YgaT09XG5cInN0cmluZ1wiJiYhZi5pc0VuY29kaW5nKGkpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitpKTtpZihlLmxlbmd0aD09PVxuMSl7bGV0IG89ZS5jaGFyQ29kZUF0KDApOyhpPT09XCJ1dGY4XCImJm88MTI4fHxpPT09XCJsYXRpbjFcIikmJihlPW8pfX1lbHNlIHR5cGVvZiBlPT1cblwibnVtYmVyXCI/ZT1lJjI1NTp0eXBlb2YgZT09XCJib29sZWFuXCImJihlPU51bWJlcihlKSk7aWYodDwwfHx0aGlzLmxlbmd0aDx0fHx0aGlzLlxubGVuZ3RoPG4pdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJPdXQgb2YgcmFuZ2UgaW5kZXhcIik7aWYobjw9dClyZXR1cm4gdGhpczt0PXQ+Pj4wLFxubj1uPT09dm9pZCAwP3RoaXMubGVuZ3RoOm4+Pj4wLGV8fChlPTApO2xldCBzO2lmKHR5cGVvZiBlPT1cIm51bWJlclwiKWZvcihzPXQ7czxuOysrcylcbnRoaXNbc109ZTtlbHNle2xldCBvPWYuaXNCdWZmZXIoZSk/ZTpmLmZyb20oZSxpKSx1PW8ubGVuZ3RoO2lmKHU9PT0wKXRocm93IG5ldyBUeXBlRXJyb3IoXG4nVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKTtmb3Iocz0wO3M8bi10Oysrcyl0aGlzW3MrdF09XG5vW3MldV19cmV0dXJuIHRoaXN9LFwiZmlsbFwiKTt2YXIgVGU9e307ZnVuY3Rpb24gRHQocixlLHQpe3ZhciBuO1RlW3JdPShuPWNsYXNzIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe1xuc3VwZXIoKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIm1lc3NhZ2VcIix7dmFsdWU6ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksd3JpdGFibGU6ITAsXG5jb25maWd1cmFibGU6ITB9KSx0aGlzLm5hbWU9YCR7dGhpcy5uYW1lfSBbJHtyfV1gLHRoaXMuc3RhY2ssZGVsZXRlIHRoaXMubmFtZX1nZXQgY29kZSgpe1xucmV0dXJuIHJ9c2V0IGNvZGUocyl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJjb2RlXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLFxudmFsdWU6cyx3cml0YWJsZTohMH0pfXRvU3RyaW5nKCl7cmV0dXJuYCR7dGhpcy5uYW1lfSBbJHtyfV06ICR7dGhpcy5tZXNzYWdlfWB9fSxcbmEobixcIk5vZGVFcnJvclwiKSxuKX1hKER0LFwiRVwiKTtEdChcIkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EU1wiLGZ1bmN0aW9uKHIpe3JldHVybiByP1xuYCR7cn0gaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzYDpcIkF0dGVtcHQgdG8gYWNjZXNzIG1lbW9yeSBvdXRzaWRlIGJ1ZmZlciBib3VuXFxcbmRzXCJ9LFJhbmdlRXJyb3IpO0R0KFwiRVJSX0lOVkFMSURfQVJHX1RZUEVcIixmdW5jdGlvbihyLGUpe3JldHVybmBUaGUgXCIke3J9XCIgYXJndW1cXFxuZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgZX1gfSxUeXBlRXJyb3IpO0R0KFwiRVJSX09VVF9PXFxcbkZfUkFOR0VcIixmdW5jdGlvbihyLGUsdCl7bGV0IG49YFRoZSB2YWx1ZSBvZiBcIiR7cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYCxpPXQ7cmV0dXJuIE51bWJlci5cbmlzSW50ZWdlcih0KSYmTWF0aC5hYnModCk+MioqMzI/aT1SbihTdHJpbmcodCkpOnR5cGVvZiB0PT1cImJpZ2ludFwiJiYoaT1TdHJpbmcodCksXG4odD5CaWdJbnQoMikqKkJpZ0ludCgzMil8fHQ8LShCaWdJbnQoMikqKkJpZ0ludCgzMikpKSYmKGk9Um4oaSkpLGkrPVwiblwiKSxuKz1gIEl0XFxcbiBtdXN0IGJlICR7ZX0uIFJlY2VpdmVkICR7aX1gLG59LFJhbmdlRXJyb3IpO2Z1bmN0aW9uIFJuKHIpe2xldCBlPVwiXCIsdD1yLmxlbmd0aCxcbm49clswXT09PVwiLVwiPzE6MDtmb3IoO3Q+PW4rNDt0LT0zKWU9YF8ke3Iuc2xpY2UodC0zLHQpfSR7ZX1gO3JldHVybmAke3Iuc2xpY2UoMCxcbnQpfSR7ZX1gfWEoUm4sXCJhZGROdW1lcmljYWxTZXBhcmF0b3JcIik7ZnVuY3Rpb24gTG8ocixlLHQpe0JlKGUsXCJvZmZzZXRcIiksKHJbZV09PT1cbnZvaWQgMHx8cltlK3RdPT09dm9pZCAwKSYmamUoZSxyLmxlbmd0aC0odCsxKSl9YShMbyxcImNoZWNrQm91bmRzXCIpO2Z1bmN0aW9uIGpuKHIsZSx0LG4saSxzKXtcbmlmKHI+dHx8cjxlKXtsZXQgbz10eXBlb2YgZT09XCJiaWdpbnRcIj9cIm5cIjpcIlwiLHU7dGhyb3cgcz4zP2U9PT0wfHxlPT09QmlnSW50KDApP3U9XG5gPj0gMCR7b30gYW5kIDwgMiR7b30gKiogJHsocysxKSo4fSR7b31gOnU9YD49IC0oMiR7b30gKiogJHsocysxKSo4LTF9JHtvfSkgYW5kIFxcXG48IDIgKiogJHsocysxKSo4LTF9JHtvfWA6dT1gPj0gJHtlfSR7b30gYW5kIDw9ICR7dH0ke299YCxuZXcgVGUuRVJSX09VVF9PRl9SQU5HRShcblwidmFsdWVcIix1LHIpfUxvKG4saSxzKX1hKGpuLFwiY2hlY2tJbnRCSVwiKTtmdW5jdGlvbiBCZShyLGUpe2lmKHR5cGVvZiByIT1cIm51bWJlclwiKVxudGhyb3cgbmV3IFRlLkVSUl9JTlZBTElEX0FSR19UWVBFKGUsXCJudW1iZXJcIixyKX1hKEJlLFwidmFsaWRhdGVOdW1iZXJcIik7ZnVuY3Rpb24gamUocixlLHQpe1xudGhyb3cgTWF0aC5mbG9vcihyKSE9PXI/KEJlKHIsdCksbmV3IFRlLkVSUl9PVVRfT0ZfUkFOR0UodHx8XCJvZmZzZXRcIixcImFuIGludGVnZXJcIixcbnIpKTplPDA/bmV3IFRlLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUzpuZXcgVGUuRVJSX09VVF9PRl9SQU5HRSh0fHxcIm9mZnNldFwiLGA+PSAke3Q/XG4xOjB9IGFuZCA8PSAke2V9YCxyKX1hKGplLFwiYm91bmRzRXJyb3JcIik7dmFyIFJvPS9bXisvMC05QS1aYS16LV9dL2c7ZnVuY3Rpb24gRm8ocil7XG5pZihyPXIuc3BsaXQoXCI9XCIpWzBdLHI9ci50cmltKCkucmVwbGFjZShSbyxcIlwiKSxyLmxlbmd0aDwyKXJldHVyblwiXCI7Zm9yKDtyLmxlbmd0aCVcbjQhPT0wOylyPXIrXCI9XCI7cmV0dXJuIHJ9YShGbyxcImJhc2U2NGNsZWFuXCIpO2Z1bmN0aW9uIFJ0KHIsZSl7ZT1lfHwxLzA7bGV0IHQsbj1yLlxubGVuZ3RoLGk9bnVsbCxzPVtdO2ZvcihsZXQgbz0wO288bjsrK28pe2lmKHQ9ci5jaGFyQ29kZUF0KG8pLHQ+NTUyOTUmJnQ8NTczNDQpe2lmKCFpKXtcbmlmKHQ+NTYzMTkpeyhlLT0zKT4tMSYmcy5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1lbHNlIGlmKG8rMT09PW4peyhlLT0zKT4tMSYmXG5zLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWk9dDtjb250aW51ZX1pZih0PDU2MzIwKXsoZS09Myk+LTEmJnMucHVzaCgyMzksMTkxLFxuMTg5KSxpPXQ7Y29udGludWV9dD0oaS01NTI5Njw8MTB8dC01NjMyMCkrNjU1MzZ9ZWxzZSBpJiYoZS09Myk+LTEmJnMucHVzaCgyMzksMTkxLFxuMTg5KTtpZihpPW51bGwsdDwxMjgpe2lmKChlLT0xKTwwKWJyZWFrO3MucHVzaCh0KX1lbHNlIGlmKHQ8MjA0OCl7aWYoKGUtPTIpPDApYnJlYWs7XG5zLnB1c2godD4+NnwxOTIsdCY2M3wxMjgpfWVsc2UgaWYodDw2NTUzNil7aWYoKGUtPTMpPDApYnJlYWs7cy5wdXNoKHQ+PjEyfDIyNCx0Pj5cbjYmNjN8MTI4LHQmNjN8MTI4KX1lbHNlIGlmKHQ8MTExNDExMil7aWYoKGUtPTQpPDApYnJlYWs7cy5wdXNoKHQ+PjE4fDI0MCx0Pj4xMiY2M3xcbjEyOCx0Pj42JjYzfDEyOCx0JjYzfDEyOCl9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvZGUgcG9pbnRcIil9cmV0dXJuIHN9YShcblJ0LFwidXRmOFRvQnl0ZXNcIik7ZnVuY3Rpb24gTW8ocil7bGV0IGU9W107Zm9yKGxldCB0PTA7dDxyLmxlbmd0aDsrK3QpZS5wdXNoKHIuY2hhckNvZGVBdChcbnQpJjI1NSk7cmV0dXJuIGV9YShNbyxcImFzY2lpVG9CeXRlc1wiKTtmdW5jdGlvbiBEbyhyLGUpe2xldCB0LG4saSxzPVtdO2ZvcihsZXQgbz0wO288XG5yLmxlbmd0aCYmISgoZS09Mik8MCk7KytvKXQ9ci5jaGFyQ29kZUF0KG8pLG49dD4+OCxpPXQlMjU2LHMucHVzaChpKSxzLnB1c2gobik7cmV0dXJuIHN9XG5hKERvLFwidXRmMTZsZVRvQnl0ZXNcIik7ZnVuY3Rpb24gSG4ocil7cmV0dXJuIFB0LnRvQnl0ZUFycmF5KEZvKHIpKX1hKEhuLFwiYmFzZTY0VFxcXG5vQnl0ZXNcIik7ZnVuY3Rpb24gb3QocixlLHQsbil7bGV0IGk7Zm9yKGk9MDtpPG4mJiEoaSt0Pj1lLmxlbmd0aHx8aT49ci5sZW5ndGgpOysraSlcbmVbaSt0XT1yW2ldO3JldHVybiBpfWEob3QsXCJibGl0QnVmZmVyXCIpO2Z1bmN0aW9uIGFlKHIsZSl7cmV0dXJuIHIgaW5zdGFuY2VvZiBlfHxcbnIhPW51bGwmJnIuY29uc3RydWN0b3IhPW51bGwmJnIuY29uc3RydWN0b3IubmFtZSE9bnVsbCYmci5jb25zdHJ1Y3Rvci5uYW1lPT09ZS5uYW1lfVxuYShhZSxcImlzSW5zdGFuY2VcIik7ZnVuY3Rpb24gT3Qocil7cmV0dXJuIHIhPT1yfWEoT3QsXCJudW1iZXJJc05hTlwiKTt2YXIgT289ZnVuY3Rpb24oKXtcbmxldCByPVwiMDEyMzQ1Njc4OWFiY2RlZlwiLGU9bmV3IEFycmF5KDI1Nik7Zm9yKGxldCB0PTA7dDwxNjsrK3Qpe2xldCBuPXQqMTY7Zm9yKGxldCBpPTA7aTxcbjE2OysraSllW24raV09clt0XStyW2ldfXJldHVybiBlfSgpO2Z1bmN0aW9uIG1lKHIpe3JldHVybiB0eXBlb2YgQmlnSW50PlwidVwiP2tvOnJ9XG5hKG1lLFwiZGVmaW5lQmlnSW50TWV0aG9kXCIpO2Z1bmN0aW9uIGtvKCl7dGhyb3cgbmV3IEVycm9yKFwiQmlnSW50IG5vdCBzdXBwb3J0ZWRcIil9XG5hKGtvLFwiQnVmZmVyQmlnSW50Tm90RGVmaW5lZFwiKX0pO3ZhciBiLFMsdix3LGQsbSxwPUsoKCk9PntcInVzZSBzdHJpY3RcIjtiPWdsb2JhbFRoaXMsUz1nbG9iYWxUaGlzLnNldEltbWVkaWF0ZT8/KHI9PnNldFRpbWVvdXQoXG5yLDApKSx2PWdsb2JhbFRoaXMuY2xlYXJJbW1lZGlhdGU/PyhyPT5jbGVhclRpbWVvdXQocikpLHc9Z2xvYmFsVGhpcy5jcnlwdG8/P3t9O1xudy5zdWJ0bGU/Pyh3LnN1YnRsZT17fSk7ZD10eXBlb2YgZ2xvYmFsVGhpcy5CdWZmZXI9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIGdsb2JhbFRoaXMuXG5CdWZmZXIuYWxsb2NVbnNhZmU9PVwiZnVuY3Rpb25cIj9nbG9iYWxUaGlzLkJ1ZmZlcjpHbigpLkJ1ZmZlcixtPWdsb2JhbFRoaXMucHJvY2Vzcz8/XG57fTttLmVudj8/KG0uZW52PXt9KTt0cnl7bS5uZXh0VGljaygoKT0+e30pfWNhdGNoe2xldCBlPVByb21pc2UucmVzb2x2ZSgpO20ubmV4dFRpY2s9XG5lLnRoZW4uYmluZChlKX19KTt2YXIgZ2U9SSgoSmMsa3QpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBSZT10eXBlb2YgUmVmbGVjdD09XCJvYmplY3RcIj9SZWZsZWN0Om51bGwsXG4kbj1SZSYmdHlwZW9mIFJlLmFwcGx5PT1cImZ1bmN0aW9uXCI/UmUuYXBwbHk6YShmdW5jdGlvbihlLHQsbil7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5cbmFwcGx5LmNhbGwoZSx0LG4pfSxcIlJlZmxlY3RBcHBseVwiKSxhdDtSZSYmdHlwZW9mIFJlLm93bktleXM9PVwiZnVuY3Rpb25cIj9hdD1SZS5vd25LZXlzOlxuT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9hdD1hKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhcbmUpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpKX0sXCJSZWZsZWN0T3duS2V5c1wiKTphdD1hKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuXG5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpfSxcIlJlZmxlY3RPd25LZXlzXCIpO2Z1bmN0aW9uIFVvKHIpe2NvbnNvbGUmJmNvbnNvbGUud2FybiYmXG5jb25zb2xlLndhcm4ocil9YShVbyxcIlByb2Nlc3NFbWl0V2FybmluZ1wiKTt2YXIgVm49TnVtYmVyLmlzTmFOfHxhKGZ1bmN0aW9uKGUpe3JldHVybiBlIT09XG5lfSxcIk51bWJlcklzTmFOXCIpO2Z1bmN0aW9uIEIoKXtCLmluaXQuY2FsbCh0aGlzKX1hKEIsXCJFdmVudEVtaXR0ZXJcIik7a3QuZXhwb3J0cz1cbkI7a3QuZXhwb3J0cy5vbmNlPVdvO0IuRXZlbnRFbWl0dGVyPUI7Qi5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDA7Qi5wcm90b3R5cGUuX2V2ZW50c0NvdW50PVxuMDtCLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzPXZvaWQgMDt2YXIgS249MTA7ZnVuY3Rpb24gdXQocil7aWYodHlwZW9mIHIhPVwiZnVuY3RpXFxcbm9uXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpXFxcbnZlZCB0eXBlICcrdHlwZW9mIHIpfWEodXQsXCJjaGVja0xpc3RlbmVyXCIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShCLFwiZGVmYXVsdE1heExpXFxcbnN0ZW5lcnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gS259LHNldDpmdW5jdGlvbihyKXtpZih0eXBlb2YgciE9XCJcXFxubnVtYmVyXCJ8fHI8MHx8Vm4ocikpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBcXFxub3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytyK1wiLlwiKTtLbj1yfX0pO0IuaW5pdD1cbmZ1bmN0aW9uKCl7KHRoaXMuX2V2ZW50cz09PXZvaWQgMHx8dGhpcy5fZXZlbnRzPT09T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpJiZcbih0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKSx0aGlzLl9tYXhMaXN0ZW5lcnM9dGhpcy5fbWF4TGlzdGVuZXJzfHxcbnZvaWQgMH07Qi5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzPWEoZnVuY3Rpb24oZSl7aWYodHlwZW9mIGUhPVwibnVtYmVyXCJ8fGU8MHx8Vm4oXG5lKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhXFxcbnRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK2UrXCIuXCIpO3JldHVybiB0aGlzLl9tYXhMaXN0ZW5lcnM9ZSx0aGlzfSxcInNldE1heExpc3RlbmVyXFxcbnNcIik7ZnVuY3Rpb24gem4ocil7cmV0dXJuIHIuX21heExpc3RlbmVycz09PXZvaWQgMD9CLmRlZmF1bHRNYXhMaXN0ZW5lcnM6ci5fbWF4TGlzdGVuZXJzfVxuYSh6bixcIl9nZXRNYXhMaXN0ZW5lcnNcIik7Qi5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzPWEoZnVuY3Rpb24oKXtyZXR1cm4gem4odGhpcyl9LFxuXCJnZXRNYXhMaXN0ZW5lcnNcIik7Qi5wcm90b3R5cGUuZW1pdD1hKGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKylcbnQucHVzaChhcmd1bWVudHNbbl0pO3ZhciBpPWU9PT1cImVycm9yXCIscz10aGlzLl9ldmVudHM7aWYocyE9PXZvaWQgMClpPWkmJnMuZXJyb3I9PT1cbnZvaWQgMDtlbHNlIGlmKCFpKXJldHVybiExO2lmKGkpe3ZhciBvO2lmKHQubGVuZ3RoPjAmJihvPXRbMF0pLG8gaW5zdGFuY2VvZiBFcnJvcilcbnRocm93IG87dmFyIHU9bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhvP1wiIChcIitvLm1lc3NhZ2UrXCIpXCI6XCJcIikpO3Rocm93IHUuY29udGV4dD1cbm8sdX12YXIgYz1zW2VdO2lmKGM9PT12b2lkIDApcmV0dXJuITE7aWYodHlwZW9mIGM9PVwiZnVuY3Rpb25cIikkbihjLHRoaXMsdCk7ZWxzZSBmb3IodmFyIGg9Yy5cbmxlbmd0aCxsPWVpKGMsaCksbj0wO248aDsrK24pJG4obFtuXSx0aGlzLHQpO3JldHVybiEwfSxcImVtaXRcIik7ZnVuY3Rpb24gWW4ocixlLHQsbil7XG52YXIgaSxzLG87aWYodXQodCkscz1yLl9ldmVudHMscz09PXZvaWQgMD8ocz1yLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSxyLl9ldmVudHNDb3VudD1cbjApOihzLm5ld0xpc3RlbmVyIT09dm9pZCAwJiYoci5lbWl0KFwibmV3TGlzdGVuZXJcIixlLHQubGlzdGVuZXI/dC5saXN0ZW5lcjp0KSxzPXIuXG5fZXZlbnRzKSxvPXNbZV0pLG89PT12b2lkIDApbz1zW2VdPXQsKytyLl9ldmVudHNDb3VudDtlbHNlIGlmKHR5cGVvZiBvPT1cImZ1bmN0aW9cXFxublwiP289c1tlXT1uP1t0LG9dOltvLHRdOm4/by51bnNoaWZ0KHQpOm8ucHVzaCh0KSxpPXpuKHIpLGk+MCYmby5sZW5ndGg+aSYmIW8ud2FybmVkKXtcbm8ud2FybmVkPSEwO3ZhciB1PW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrby5sZW5ndGgrXG5cIiBcIitTdHJpbmcoZSkrXCIgbGlzdGVuZXJzIGFkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdFwiKTtcbnUubmFtZT1cIk1heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZ1wiLHUuZW1pdHRlcj1yLHUudHlwZT1lLHUuY291bnQ9by5sZW5ndGgsVW8odSl9XG5yZXR1cm4gcn1hKFluLFwiX2FkZExpc3RlbmVyXCIpO0IucHJvdG90eXBlLmFkZExpc3RlbmVyPWEoZnVuY3Rpb24oZSx0KXtyZXR1cm4gWW4oXG50aGlzLGUsdCwhMSl9LFwiYWRkTGlzdGVuZXJcIik7Qi5wcm90b3R5cGUub249Qi5wcm90b3R5cGUuYWRkTGlzdGVuZXI7Qi5wcm90b3R5cGUuXG5wcmVwZW5kTGlzdGVuZXI9YShmdW5jdGlvbihlLHQpe3JldHVybiBZbih0aGlzLGUsdCwhMCl9LFwicHJlcGVuZExpc3RlbmVyXCIpO2Z1bmN0aW9uIHFvKCl7XG5pZighdGhpcy5maXJlZClyZXR1cm4gdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLHRoaXMud3JhcEZuKSx0aGlzLmZpcmVkPVxuITAsYXJndW1lbnRzLmxlbmd0aD09PTA/dGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTp0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMuXG50YXJnZXQsYXJndW1lbnRzKX1hKHFvLFwib25jZVdyYXBwZXJcIik7ZnVuY3Rpb24gWm4ocixlLHQpe3ZhciBuPXtmaXJlZDohMSx3cmFwRm46dm9pZCAwLFxudGFyZ2V0OnIsdHlwZTplLGxpc3RlbmVyOnR9LGk9cW8uYmluZChuKTtyZXR1cm4gaS5saXN0ZW5lcj10LG4ud3JhcEZuPWksaX1hKFpuLFwiXFxcbl9vbmNlV3JhcFwiKTtCLnByb3RvdHlwZS5vbmNlPWEoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdXQodCksdGhpcy5vbihlLFpuKHRoaXMsZSx0KSksXG50aGlzfSxcIm9uY2VcIik7Qi5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lcj1hKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHV0KHQpLHRoaXMuXG5wcmVwZW5kTGlzdGVuZXIoZSxabih0aGlzLGUsdCkpLHRoaXN9LFwicHJlcGVuZE9uY2VMaXN0ZW5lclwiKTtCLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1cbmEoZnVuY3Rpb24oZSx0KXt2YXIgbixpLHMsbyx1O2lmKHV0KHQpLGk9dGhpcy5fZXZlbnRzLGk9PT12b2lkIDApcmV0dXJuIHRoaXM7aWYobj1cbmlbZV0sbj09PXZvaWQgMClyZXR1cm4gdGhpcztpZihuPT09dHx8bi5saXN0ZW5lcj09PXQpLS10aGlzLl9ldmVudHNDb3VudD09PTA/dGhpcy5cbl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTooZGVsZXRlIGlbZV0saS5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdFxcXG5lbmVyXCIsZSxuLmxpc3RlbmVyfHx0KSk7ZWxzZSBpZih0eXBlb2YgbiE9XCJmdW5jdGlvblwiKXtmb3Iocz0tMSxvPW4ubGVuZ3RoLTE7bz49MDtvLS0pXG5pZihuW29dPT09dHx8bltvXS5saXN0ZW5lcj09PXQpe3U9bltvXS5saXN0ZW5lcixzPW87YnJlYWt9aWYoczwwKXJldHVybiB0aGlzO3M9PT1cbjA/bi5zaGlmdCgpOk5vKG4scyksbi5sZW5ndGg9PT0xJiYoaVtlXT1uWzBdKSxpLnJlbW92ZUxpc3RlbmVyIT09dm9pZCAwJiZ0aGlzLmVtaXQoXG5cInJlbW92ZUxpc3RlbmVyXCIsZSx1fHx0KX1yZXR1cm4gdGhpc30sXCJyZW1vdmVMaXN0ZW5lclwiKTtCLnByb3RvdHlwZS5vZmY9Qi5wcm90b3R5cGUuXG5yZW1vdmVMaXN0ZW5lcjtCLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9YShmdW5jdGlvbihlKXt2YXIgdCxuLGk7aWYobj10aGlzLlxuX2V2ZW50cyxuPT09dm9pZCAwKXJldHVybiB0aGlzO2lmKG4ucmVtb3ZlTGlzdGVuZXI9PT12b2lkIDApcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg9PT1cbjA/KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApOm5bZV0hPT12b2lkIDAmJigtLXRoaXMuXG5fZXZlbnRzQ291bnQ9PT0wP3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOmRlbGV0ZSBuW2VdKSx0aGlzO2lmKGFyZ3VtZW50cy5cbmxlbmd0aD09PTApe3ZhciBzPU9iamVjdC5rZXlzKG4pLG87Zm9yKGk9MDtpPHMubGVuZ3RoOysraSlvPXNbaV0sbyE9PVwicmVtb3ZlTGlzdFxcXG5lbmVyXCImJnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKG8pO3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpLFxudGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCx0aGlzfWlmKHQ9bltlXSx0eXBlb2YgdD09XCJmXFxcbnVuY3Rpb25cIil0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdCk7ZWxzZSBpZih0IT09dm9pZCAwKWZvcihpPXQubGVuZ3RoLTE7aT49MDtpLS0pdGhpcy5cbnJlbW92ZUxpc3RlbmVyKGUsdFtpXSk7cmV0dXJuIHRoaXN9LFwicmVtb3ZlQWxsTGlzdGVuZXJzXCIpO2Z1bmN0aW9uIEpuKHIsZSx0KXt2YXIgbj1yLlxuX2V2ZW50cztpZihuPT09dm9pZCAwKXJldHVybltdO3ZhciBpPW5bZV07cmV0dXJuIGk9PT12b2lkIDA/W106dHlwZW9mIGk9PVwiZnVuY3RpXFxcbm9uXCI/dD9baS5saXN0ZW5lcnx8aV06W2ldOnQ/UW8oaSk6ZWkoaSxpLmxlbmd0aCl9YShKbixcIl9saXN0ZW5lcnNcIik7Qi5wcm90b3R5cGUuXG5saXN0ZW5lcnM9YShmdW5jdGlvbihlKXtyZXR1cm4gSm4odGhpcyxlLCEwKX0sXCJsaXN0ZW5lcnNcIik7Qi5wcm90b3R5cGUucmF3TGlzdGVuZXJzPVxuYShmdW5jdGlvbihlKXtyZXR1cm4gSm4odGhpcyxlLCExKX0sXCJyYXdMaXN0ZW5lcnNcIik7Qi5saXN0ZW5lckNvdW50PWZ1bmN0aW9uKHIsZSl7XG5yZXR1cm4gdHlwZW9mIHIubGlzdGVuZXJDb3VudD09XCJmdW5jdGlvblwiP3IubGlzdGVuZXJDb3VudChlKTpYbi5jYWxsKHIsZSl9O0IucHJvdG90eXBlLlxubGlzdGVuZXJDb3VudD1YbjtmdW5jdGlvbiBYbihyKXt2YXIgZT10aGlzLl9ldmVudHM7aWYoZSE9PXZvaWQgMCl7dmFyIHQ9ZVtyXTtpZih0eXBlb2YgdD09XG5cImZ1bmN0aW9uXCIpcmV0dXJuIDE7aWYodCE9PXZvaWQgMClyZXR1cm4gdC5sZW5ndGh9cmV0dXJuIDB9YShYbixcImxpc3RlbmVyQ291bnRcIik7XG5CLnByb3RvdHlwZS5ldmVudE5hbWVzPWEoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9hdCh0aGlzLl9ldmVudHMpOlxuW119LFwiZXZlbnROYW1lc1wiKTtmdW5jdGlvbiBlaShyLGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZSksbj0wO248ZTsrK24pdFtuXT1yW25dO1xucmV0dXJuIHR9YShlaSxcImFycmF5Q2xvbmVcIik7ZnVuY3Rpb24gTm8ocixlKXtmb3IoO2UrMTxyLmxlbmd0aDtlKyspcltlXT1yW2UrMV07ci5cbnBvcCgpfWEoTm8sXCJzcGxpY2VPbmVcIik7ZnVuY3Rpb24gUW8ocil7Zm9yKHZhciBlPW5ldyBBcnJheShyLmxlbmd0aCksdD0wO3Q8ZS5sZW5ndGg7Kyt0KVxuZVt0XT1yW3RdLmxpc3RlbmVyfHxyW3RdO3JldHVybiBlfWEoUW8sXCJ1bndyYXBMaXN0ZW5lcnNcIik7ZnVuY3Rpb24gV28ocixlKXtyZXR1cm4gbmV3IFByb21pc2UoXG5mdW5jdGlvbih0LG4pe2Z1bmN0aW9uIGkobyl7ci5yZW1vdmVMaXN0ZW5lcihlLHMpLG4obyl9YShpLFwiZXJyb3JMaXN0ZW5lclwiKTtmdW5jdGlvbiBzKCl7XG50eXBlb2Ygci5yZW1vdmVMaXN0ZW5lcj09XCJmdW5jdGlvblwiJiZyLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixpKSx0KFtdLnNsaWNlLmNhbGwoXG5hcmd1bWVudHMpKX1hKHMsXCJyZXNvbHZlclwiKSx0aShyLGUscyx7b25jZTohMH0pLGUhPT1cImVycm9yXCImJmpvKHIsaSx7b25jZTohMH0pfSl9XG5hKFdvLFwib25jZVwiKTtmdW5jdGlvbiBqbyhyLGUsdCl7dHlwZW9mIHIub249PVwiZnVuY3Rpb25cIiYmdGkocixcImVycm9yXCIsZSx0KX1hKGpvLFxuXCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlclwiKTtmdW5jdGlvbiB0aShyLGUsdCxuKXtpZih0eXBlb2Ygci5vbj09XCJmdW5jdGlvblwiKVxubi5vbmNlP3Iub25jZShlLHQpOnIub24oZSx0KTtlbHNlIGlmKHR5cGVvZiByLmFkZEV2ZW50TGlzdGVuZXI9PVwiZnVuY3Rpb25cIilyLmFkZEV2ZW50TGlzdGVuZXIoXG5lLGEoZnVuY3Rpb24gaShzKXtuLm9uY2UmJnIucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLGkpLHQocyl9LFwid3JhcExpc3RlbmVyXCIpKTtlbHNlXG50aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJlbWl0dGVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEV2ZW50RW1pdHRlci4gUmVjZWl2XFxcbmVkIHR5cGUgJyt0eXBlb2Ygcil9YSh0aSxcImV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lclwiKX0pO3ZhciBIZT17fTtYKEhlLHtkZWZhdWx0OigpPT5Ib30pO3ZhciBIbyxHZT1LKCgpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO0hvPXt9fSk7ZnVuY3Rpb24gJGUocil7bGV0IGU9MTc3OTAzMzcwMyx0PTMxNDQxMzQyNzcsbj0xMDEzOTA0MjQyLGk9Mjc3MzQ4MDc2MixzPTEzNTk4OTMxMTksXG5vPTI2MDA4MjI5MjQsdT01Mjg3MzQ2MzUsYz0xNTQxNDU5MjI1LGg9MCxsPTAseT1bMTExNjM1MjQwOCwxODk5NDQ3NDQxLDMwNDkzMjM0NzEsXG4zOTIxMDA5NTczLDk2MTk4NzE2MywxNTA4OTcwOTkzLDI0NTM2MzU3NDgsMjg3MDc2MzIyMSwzNjI0MzgxMDgwLDMxMDU5ODQwMSw2MDcyMjUyNzgsXG4xNDI2ODgxOTg3LDE5MjUwNzgzODgsMjE2MjA3ODIwNiwyNjE0ODg4MTAzLDMyNDgyMjI1ODAsMzgzNTM5MDQwMSw0MDIyMjI0Nzc0LDI2NDM0NzA3OCxcbjYwNDgwNzYyOCw3NzAyNTU5ODMsMTI0OTE1MDEyMiwxNTU1MDgxNjkyLDE5OTYwNjQ5ODYsMjU1NDIyMDg4MiwyODIxODM0MzQ5LDI5NTI5OTY4MDgsXG4zMjEwMzEzNjcxLDMzMzY1NzE4OTEsMzU4NDUyODcxMSwxMTM5MjY5OTMsMzM4MjQxODk1LDY2NjMwNzIwNSw3NzM1Mjk5MTIsMTI5NDc1NzM3MixcbjEzOTYxODIyOTEsMTY5NTE4MzcwMCwxOTg2NjYxMDUxLDIxNzcwMjYzNTAsMjQ1Njk1NjAzNywyNzMwNDg1OTIxLDI4MjAzMDI0MTEsMzI1OTczMDgwMCxcbjMzNDU3NjQ3NzEsMzUxNjA2NTgxNywzNjAwMzUyODA0LDQwOTQ1NzE5MDksMjc1NDIzMzQ0LDQzMDIyNzczNCw1MDY5NDg2MTYsNjU5MDYwNTU2LFxuODgzOTk3ODc3LDk1ODEzOTU3MSwxMzIyODIyMjE4LDE1MzcwMDIwNjMsMTc0Nzg3Mzc3OSwxOTU1NTYyMjIyLDIwMjQxMDQ4MTUsMjIyNzczMDQ1MixcbjIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF0sRT1hKChBLGcpPT5BPj4+Z3xBPDwzMi1nLFxuXCJycm90XCIpLF89bmV3IFVpbnQzMkFycmF5KDY0KSxQPW5ldyBVaW50OEFycmF5KDY0KSxOPWEoKCk9Pntmb3IobGV0IEw9MCxHPTA7TDwxNjtMKyssXG5HKz00KV9bTF09UFtHXTw8MjR8UFtHKzFdPDwxNnxQW0crMl08PDh8UFtHKzNdO2ZvcihsZXQgTD0xNjtMPDY0O0wrKyl7bGV0IEc9RShfW0wtXG4xNV0sNyleRShfW0wtMTVdLDE4KV5fW0wtMTVdPj4+MyxjZT1FKF9bTC0yXSwxNyleRShfW0wtMl0sMTkpXl9bTC0yXT4+PjEwO19bTF09X1tMLVxuMTZdK0crX1tMLTddK2NlfDB9bGV0IEE9ZSxnPXQsRD1uLEg9aSxRPXMsVz1vLHVlPXUsZGU9Yztmb3IobGV0IEw9MDtMPDY0O0wrKyl7bGV0IEc9RShcblEsNileRShRLDExKV5FKFEsMjUpLGNlPVEmV15+USZ1ZSx5ZT1kZStHK2NlK3lbTF0rX1tMXXwwLHhlPUUoQSwyKV5FKEEsMTMpXkUoQSwyMiksXG5oZT1BJmdeQSZEXmcmRCxpZT14ZStoZXwwO2RlPXVlLHVlPVcsVz1RLFE9SCt5ZXwwLEg9RCxEPWcsZz1BLEE9eWUraWV8MH1lPWUrQXwwLFxudD10K2d8MCxuPW4rRHwwLGk9aStIfDAscz1zK1F8MCxvPW8rV3wwLHU9dSt1ZXwwLGM9YytkZXwwLGw9MH0sXCJwcm9jZXNzXCIpLEo9YShBPT57XG50eXBlb2YgQT09XCJzdHJpbmdcIiYmKEE9bmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKEEpKTtmb3IobGV0IGc9MDtnPEEubGVuZ3RoO2crKylQW2wrK109XG5BW2ddLGw9PT02NCYmTigpO2grPUEubGVuZ3RofSxcImFkZFwiKSxwZT1hKCgpPT57aWYoUFtsKytdPTEyOCxsPT02NCYmTigpLGwrOD42NCl7XG5mb3IoO2w8NjQ7KVBbbCsrXT0wO04oKX1mb3IoO2w8NTg7KVBbbCsrXT0wO2xldCBBPWgqODtQW2wrK109QS8xMDk5NTExNjI3Nzc2JjI1NSxcblBbbCsrXT1BLzQyOTQ5NjcyOTYmMjU1LFBbbCsrXT1BPj4+MjQsUFtsKytdPUE+Pj4xNiYyNTUsUFtsKytdPUE+Pj44JjI1NSxQW2wrK109XG5BJjI1NSxOKCk7bGV0IGc9bmV3IFVpbnQ4QXJyYXkoMzIpO3JldHVybiBnWzBdPWU+Pj4yNCxnWzFdPWU+Pj4xNiYyNTUsZ1syXT1lPj4+OCZcbjI1NSxnWzNdPWUmMjU1LGdbNF09dD4+PjI0LGdbNV09dD4+PjE2JjI1NSxnWzZdPXQ+Pj44JjI1NSxnWzddPXQmMjU1LGdbOF09bj4+PjI0LFxuZ1s5XT1uPj4+MTYmMjU1LGdbMTBdPW4+Pj44JjI1NSxnWzExXT1uJjI1NSxnWzEyXT1pPj4+MjQsZ1sxM109aT4+PjE2JjI1NSxnWzE0XT1cbmk+Pj44JjI1NSxnWzE1XT1pJjI1NSxnWzE2XT1zPj4+MjQsZ1sxN109cz4+PjE2JjI1NSxnWzE4XT1zPj4+OCYyNTUsZ1sxOV09cyYyNTUsXG5nWzIwXT1vPj4+MjQsZ1syMV09bz4+PjE2JjI1NSxnWzIyXT1vPj4+OCYyNTUsZ1syM109byYyNTUsZ1syNF09dT4+PjI0LGdbMjVdPXU+Pj5cbjE2JjI1NSxnWzI2XT11Pj4+OCYyNTUsZ1syN109dSYyNTUsZ1syOF09Yz4+PjI0LGdbMjldPWM+Pj4xNiYyNTUsZ1szMF09Yz4+PjgmMjU1LFxuZ1szMV09YyYyNTUsZ30sXCJkaWdlc3RcIik7cmV0dXJuIHI9PT12b2lkIDA/e2FkZDpKLGRpZ2VzdDpwZX06KEoocikscGUoKSl9dmFyIHJpPUsoXG4oKT0+e1widXNlIHN0cmljdFwiO3AoKTthKCRlLFwic2hhMjU2XCIpfSk7dmFyIE8sS2Usbmk9SygoKT0+e1widXNlIHN0cmljdFwiO3AoKTtPPWNsYXNzIE97Y29uc3RydWN0b3IoKXtUKHRoaXMsXCJfZGF0YUxlbmd0aFwiLFxuMCk7VCh0aGlzLFwiX2J1ZmZlckxlbmd0aFwiLDApO1QodGhpcyxcIl9zdGF0ZVwiLG5ldyBJbnQzMkFycmF5KDQpKTtUKHRoaXMsXCJfYnVmZmVyXCIsXG5uZXcgQXJyYXlCdWZmZXIoNjgpKTtUKHRoaXMsXCJfYnVmZmVyOFwiKTtUKHRoaXMsXCJfYnVmZmVyMzJcIik7dGhpcy5fYnVmZmVyOD1uZXcgVWludDhBcnJheShcbnRoaXMuX2J1ZmZlciwwLDY4KSx0aGlzLl9idWZmZXIzMj1uZXcgVWludDMyQXJyYXkodGhpcy5fYnVmZmVyLDAsMTcpLHRoaXMuc3RhcnQoKX1zdGF0aWMgaGFzaEJ5dGVBcnJheShlLHQ9ITEpe1xucmV0dXJuIHRoaXMub25lUGFzc0hhc2hlci5zdGFydCgpLmFwcGVuZEJ5dGVBcnJheShlKS5lbmQodCl9c3RhdGljIGhhc2hTdHIoZSx0PSExKXtcbnJldHVybiB0aGlzLm9uZVBhc3NIYXNoZXIuc3RhcnQoKS5hcHBlbmRTdHIoZSkuZW5kKHQpfXN0YXRpYyBoYXNoQXNjaWlTdHIoZSx0PSExKXtcbnJldHVybiB0aGlzLm9uZVBhc3NIYXNoZXIuc3RhcnQoKS5hcHBlbmRBc2NpaVN0cihlKS5lbmQodCl9c3RhdGljIF9oZXgoZSl7bGV0IHQ9Ty5cbmhleENoYXJzLG49Ty5oZXhPdXQsaSxzLG8sdTtmb3IodT0wO3U8NDt1Kz0xKWZvcihzPXUqOCxpPWVbdV0sbz0wO288ODtvKz0yKW5bcysxK1xub109dC5jaGFyQXQoaSYxNSksaT4+Pj00LG5bcyswK29dPXQuY2hhckF0KGkmMTUpLGk+Pj49NDtyZXR1cm4gbi5qb2luKFwiXCIpfXN0YXRpYyBfbWQ1Y3ljbGUoZSx0KXtcbmxldCBuPWVbMF0saT1lWzFdLHM9ZVsyXSxvPWVbM107bis9KGkmc3x+aSZvKSt0WzBdLTY4MDg3NjkzNnwwLG49KG48PDd8bj4+PjI1KStpfFxuMCxvKz0obiZpfH5uJnMpK3RbMV0tMzg5NTY0NTg2fDAsbz0obzw8MTJ8bz4+PjIwKStufDAscys9KG8mbnx+byZpKSt0WzJdKzYwNjEwNTgxOXxcbjAscz0oczw8MTd8cz4+PjE1KStvfDAsaSs9KHMmb3x+cyZuKSt0WzNdLTEwNDQ1MjUzMzB8MCxpPShpPDwyMnxpPj4+MTApK3N8MCxuKz0oaSZcbnN8fmkmbykrdFs0XS0xNzY0MTg4OTd8MCxuPShuPDw3fG4+Pj4yNSkraXwwLG8rPShuJml8fm4mcykrdFs1XSsxMjAwMDgwNDI2fDAsbz0obzw8XG4xMnxvPj4+MjApK258MCxzKz0obyZufH5vJmkpK3RbNl0tMTQ3MzIzMTM0MXwwLHM9KHM8PDE3fHM+Pj4xNSkrb3wwLGkrPShzJm98fnMmbikrXG50WzddLTQ1NzA1OTgzfDAsaT0oaTw8MjJ8aT4+PjEwKStzfDAsbis9KGkmc3x+aSZvKSt0WzhdKzE3NzAwMzU0MTZ8MCxuPShuPDw3fG4+Pj5cbjI1KStpfDAsbys9KG4maXx+biZzKSt0WzldLTE5NTg0MTQ0MTd8MCxvPShvPDwxMnxvPj4+MjApK258MCxzKz0obyZufH5vJmkpK3RbMTBdLVxuNDIwNjN8MCxzPShzPDwxN3xzPj4+MTUpK298MCxpKz0ocyZvfH5zJm4pK3RbMTFdLTE5OTA0MDQxNjJ8MCxpPShpPDwyMnxpPj4+MTApK3N8XG4wLG4rPShpJnN8fmkmbykrdFsxMl0rMTgwNDYwMzY4MnwwLG49KG48PDd8bj4+PjI1KStpfDAsbys9KG4maXx+biZzKSt0WzEzXS00MDM0MTEwMXxcbjAsbz0obzw8MTJ8bz4+PjIwKStufDAscys9KG8mbnx+byZpKSt0WzE0XS0xNTAyMDAyMjkwfDAscz0oczw8MTd8cz4+PjE1KStvfDAsaSs9XG4ocyZvfH5zJm4pK3RbMTVdKzEyMzY1MzUzMjl8MCxpPShpPDwyMnxpPj4+MTApK3N8MCxuKz0oaSZvfHMmfm8pK3RbMV0tMTY1Nzk2NTEwfFxuMCxuPShuPDw1fG4+Pj4yNykraXwwLG8rPShuJnN8aSZ+cykrdFs2XS0xMDY5NTAxNjMyfDAsbz0obzw8OXxvPj4+MjMpK258MCxzKz0obyZcbml8biZ+aSkrdFsxMV0rNjQzNzE3NzEzfDAscz0oczw8MTR8cz4+PjE4KStvfDAsaSs9KHMmbnxvJn5uKSt0WzBdLTM3Mzg5NzMwMnwwLGk9XG4oaTw8MjB8aT4+PjEyKStzfDAsbis9KGkmb3xzJn5vKSt0WzVdLTcwMTU1ODY5MXwwLG49KG48PDV8bj4+PjI3KStpfDAsbys9KG4mc3xpJlxufnMpK3RbMTBdKzM4MDE2MDgzfDAsbz0obzw8OXxvPj4+MjMpK258MCxzKz0obyZpfG4mfmkpK3RbMTVdLTY2MDQ3ODMzNXwwLHM9KHM8PDE0fFxucz4+PjE4KStvfDAsaSs9KHMmbnxvJn5uKSt0WzRdLTQwNTUzNzg0OHwwLGk9KGk8PDIwfGk+Pj4xMikrc3wwLG4rPShpJm98cyZ+bykrdFs5XStcbjU2ODQ0NjQzOHwwLG49KG48PDV8bj4+PjI3KStpfDAsbys9KG4mc3xpJn5zKSt0WzE0XS0xMDE5ODAzNjkwfDAsbz0obzw8OXxvPj4+MjMpK1xubnwwLHMrPShvJml8biZ+aSkrdFszXS0xODczNjM5NjF8MCxzPShzPDwxNHxzPj4+MTgpK298MCxpKz0ocyZufG8mfm4pK3RbOF0rMTE2MzUzMTUwMXxcbjAsaT0oaTw8MjB8aT4+PjEyKStzfDAsbis9KGkmb3xzJn5vKSt0WzEzXS0xNDQ0NjgxNDY3fDAsbj0objw8NXxuPj4+MjcpK2l8MCxvKz0obiZcbnN8aSZ+cykrdFsyXS01MTQwMzc4NHwwLG89KG88PDl8bz4+PjIzKStufDAscys9KG8maXxuJn5pKSt0WzddKzE3MzUzMjg0NzN8MCxzPShzPDxcbjE0fHM+Pj4xOCkrb3wwLGkrPShzJm58byZ+bikrdFsxMl0tMTkyNjYwNzczNHwwLGk9KGk8PDIwfGk+Pj4xMikrc3wwLG4rPShpXnNebykrXG50WzVdLTM3ODU1OHwwLG49KG48PDR8bj4+PjI4KStpfDAsbys9KG5eaV5zKSt0WzhdLTIwMjI1NzQ0NjN8MCxvPShvPDwxMXxvPj4+MjEpK1xubnwwLHMrPShvXm5eaSkrdFsxMV0rMTgzOTAzMDU2MnwwLHM9KHM8PDE2fHM+Pj4xNikrb3wwLGkrPShzXm9ebikrdFsxNF0tMzUzMDk1NTZ8XG4wLGk9KGk8PDIzfGk+Pj45KStzfDAsbis9KGlec15vKSt0WzFdLTE1MzA5OTIwNjB8MCxuPShuPDw0fG4+Pj4yOCkraXwwLG8rPShuXmlecykrXG50WzRdKzEyNzI4OTMzNTN8MCxvPShvPDwxMXxvPj4+MjEpK258MCxzKz0ob15uXmkpK3RbN10tMTU1NDk3NjMyfDAscz0oczw8MTZ8cz4+PlxuMTYpK298MCxpKz0oc15vXm4pK3RbMTBdLTEwOTQ3MzA2NDB8MCxpPShpPDwyM3xpPj4+OSkrc3wwLG4rPShpXnNebykrdFsxM10rNjgxMjc5MTc0fFxuMCxuPShuPDw0fG4+Pj4yOCkraXwwLG8rPShuXmlecykrdFswXS0zNTg1MzcyMjJ8MCxvPShvPDwxMXxvPj4+MjEpK258MCxzKz0ob15uXmkpK1xudFszXS03MjI1MjE5Nzl8MCxzPShzPDwxNnxzPj4+MTYpK298MCxpKz0oc15vXm4pK3RbNl0rNzYwMjkxODl8MCxpPShpPDwyM3xpPj4+OSkrXG5zfDAsbis9KGlec15vKSt0WzldLTY0MDM2NDQ4N3wwLG49KG48PDR8bj4+PjI4KStpfDAsbys9KG5eaV5zKSt0WzEyXS00MjE4MTU4MzV8MCxcbm89KG88PDExfG8+Pj4yMSkrbnwwLHMrPShvXm5eaSkrdFsxNV0rNTMwNzQyNTIwfDAscz0oczw8MTZ8cz4+PjE2KStvfDAsaSs9KHNeb15uKStcbnRbMl0tOTk1MzM4NjUxfDAsaT0oaTw8MjN8aT4+PjkpK3N8MCxuKz0oc14oaXx+bykpK3RbMF0tMTk4NjMwODQ0fDAsbj0objw8NnxuPj4+XG4yNikraXwwLG8rPShpXihufH5zKSkrdFs3XSsxMTI2ODkxNDE1fDAsbz0obzw8MTB8bz4+PjIyKStufDAscys9KG5eKG98fmkpKSt0WzE0XS1cbjE0MTYzNTQ5MDV8MCxzPShzPDwxNXxzPj4+MTcpK298MCxpKz0ob14oc3x+bikpK3RbNV0tNTc0MzQwNTV8MCxpPShpPDwyMXxpPj4+MTEpK1xuc3wwLG4rPShzXihpfH5vKSkrdFsxMl0rMTcwMDQ4NTU3MXwwLG49KG48PDZ8bj4+PjI2KStpfDAsbys9KGleKG58fnMpKSt0WzNdLTE4OTQ5ODY2MDZ8XG4wLG89KG88PDEwfG8+Pj4yMikrbnwwLHMrPShuXihvfH5pKSkrdFsxMF0tMTA1MTUyM3wwLHM9KHM8PDE1fHM+Pj4xNykrb3wwLGkrPShvXlxuKHN8fm4pKSt0WzFdLTIwNTQ5MjI3OTl8MCxpPShpPDwyMXxpPj4+MTEpK3N8MCxuKz0oc14oaXx+bykpK3RbOF0rMTg3MzMxMzM1OXwwLG49XG4objw8NnxuPj4+MjYpK2l8MCxvKz0oaV4obnx+cykpK3RbMTVdLTMwNjExNzQ0fDAsbz0obzw8MTB8bz4+PjIyKStufDAscys9KG5eKG98fmkpKStcbnRbNl0tMTU2MDE5ODM4MHwwLHM9KHM8PDE1fHM+Pj4xNykrb3wwLGkrPShvXihzfH5uKSkrdFsxM10rMTMwOTE1MTY0OXwwLGk9KGk8PDIxfFxuaT4+PjExKStzfDAsbis9KHNeKGl8fm8pKSt0WzRdLTE0NTUyMzA3MHwwLG49KG48PDZ8bj4+PjI2KStpfDAsbys9KGleKG58fnMpKSt0WzExXS1cbjExMjAyMTAzNzl8MCxvPShvPDwxMHxvPj4+MjIpK258MCxzKz0obl4ob3x+aSkpK3RbMl0rNzE4Nzg3MjU5fDAscz0oczw8MTV8cz4+PjE3KStcbm98MCxpKz0ob14oc3x+bikpK3RbOV0tMzQzNDg1NTUxfDAsaT0oaTw8MjF8aT4+PjExKStzfDAsZVswXT1uK2VbMF18MCxlWzFdPWkrZVsxXXxcbjAsZVsyXT1zK2VbMl18MCxlWzNdPW8rZVszXXwwfXN0YXJ0KCl7cmV0dXJuIHRoaXMuX2RhdGFMZW5ndGg9MCx0aGlzLl9idWZmZXJMZW5ndGg9XG4wLHRoaXMuX3N0YXRlLnNldChPLnN0YXRlSWRlbnRpdHkpLHRoaXN9YXBwZW5kU3RyKGUpe2xldCB0PXRoaXMuX2J1ZmZlcjgsbj10aGlzLlxuX2J1ZmZlcjMyLGk9dGhpcy5fYnVmZmVyTGVuZ3RoLHMsbztmb3Iobz0wO288ZS5sZW5ndGg7bys9MSl7aWYocz1lLmNoYXJDb2RlQXQobyksXG5zPDEyOCl0W2krK109cztlbHNlIGlmKHM8MjA0OCl0W2krK109KHM+Pj42KSsxOTIsdFtpKytdPXMmNjN8MTI4O2Vsc2UgaWYoczw1NTI5Nnx8XG5zPjU2MzE5KXRbaSsrXT0ocz4+PjEyKSsyMjQsdFtpKytdPXM+Pj42JjYzfDEyOCx0W2krK109cyY2M3wxMjg7ZWxzZXtpZihzPShzLTU1Mjk2KSpcbjEwMjQrKGUuY2hhckNvZGVBdCgrK28pLTU2MzIwKSs2NTUzNixzPjExMTQxMTEpdGhyb3cgbmV3IEVycm9yKFwiVW5pY29kZSBzdGFuZGFyZFxcXG4gc3VwcG9ydHMgY29kZSBwb2ludHMgdXAgdG8gVSsxMEZGRkZcIik7dFtpKytdPShzPj4+MTgpKzI0MCx0W2krK109cz4+PjEyJjYzfDEyOCxcbnRbaSsrXT1zPj4+NiY2M3wxMjgsdFtpKytdPXMmNjN8MTI4fWk+PTY0JiYodGhpcy5fZGF0YUxlbmd0aCs9NjQsTy5fbWQ1Y3ljbGUodGhpcy5cbl9zdGF0ZSxuKSxpLT02NCxuWzBdPW5bMTZdKX1yZXR1cm4gdGhpcy5fYnVmZmVyTGVuZ3RoPWksdGhpc31hcHBlbmRBc2NpaVN0cihlKXtsZXQgdD10aGlzLlxuX2J1ZmZlcjgsbj10aGlzLl9idWZmZXIzMixpPXRoaXMuX2J1ZmZlckxlbmd0aCxzLG89MDtmb3IoOzspe2ZvcihzPU1hdGgubWluKGUubGVuZ3RoLVxubyw2NC1pKTtzLS07KXRbaSsrXT1lLmNoYXJDb2RlQXQobysrKTtpZihpPDY0KWJyZWFrO3RoaXMuX2RhdGFMZW5ndGgrPTY0LE8uX21kNWN5Y2xlKFxudGhpcy5fc3RhdGUsbiksaT0wfXJldHVybiB0aGlzLl9idWZmZXJMZW5ndGg9aSx0aGlzfWFwcGVuZEJ5dGVBcnJheShlKXtsZXQgdD10aGlzLlxuX2J1ZmZlcjgsbj10aGlzLl9idWZmZXIzMixpPXRoaXMuX2J1ZmZlckxlbmd0aCxzLG89MDtmb3IoOzspe2ZvcihzPU1hdGgubWluKGUubGVuZ3RoLVxubyw2NC1pKTtzLS07KXRbaSsrXT1lW28rK107aWYoaTw2NClicmVhazt0aGlzLl9kYXRhTGVuZ3RoKz02NCxPLl9tZDVjeWNsZSh0aGlzLl9zdGF0ZSxcbm4pLGk9MH1yZXR1cm4gdGhpcy5fYnVmZmVyTGVuZ3RoPWksdGhpc31nZXRTdGF0ZSgpe2xldCBlPXRoaXMuX3N0YXRlO3JldHVybntidWZmZXI6U3RyaW5nLlxuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsQXJyYXkuZnJvbSh0aGlzLl9idWZmZXI4KSksYnVmbGVuOnRoaXMuX2J1ZmZlckxlbmd0aCxsZW5ndGg6dGhpcy5cbl9kYXRhTGVuZ3RoLHN0YXRlOltlWzBdLGVbMV0sZVsyXSxlWzNdXX19c2V0U3RhdGUoZSl7bGV0IHQ9ZS5idWZmZXIsbj1lLnN0YXRlLGk9dGhpcy5cbl9zdGF0ZSxzO2Zvcih0aGlzLl9kYXRhTGVuZ3RoPWUubGVuZ3RoLHRoaXMuX2J1ZmZlckxlbmd0aD1lLmJ1ZmxlbixpWzBdPW5bMF0saVsxXT1cbm5bMV0saVsyXT1uWzJdLGlbM109blszXSxzPTA7czx0Lmxlbmd0aDtzKz0xKXRoaXMuX2J1ZmZlcjhbc109dC5jaGFyQ29kZUF0KHMpfWVuZChlPSExKXtcbmxldCB0PXRoaXMuX2J1ZmZlckxlbmd0aCxuPXRoaXMuX2J1ZmZlcjgsaT10aGlzLl9idWZmZXIzMixzPSh0Pj4yKSsxO3RoaXMuX2RhdGFMZW5ndGgrPVxudDtsZXQgbz10aGlzLl9kYXRhTGVuZ3RoKjg7aWYoblt0XT0xMjgsblt0KzFdPW5bdCsyXT1uW3QrM109MCxpLnNldChPLmJ1ZmZlcjMySWRlbnRpdHkuXG5zdWJhcnJheShzKSxzKSx0PjU1JiYoTy5fbWQ1Y3ljbGUodGhpcy5fc3RhdGUsaSksaS5zZXQoTy5idWZmZXIzMklkZW50aXR5KSksbzw9NDI5NDk2NzI5NSlcbmlbMTRdPW87ZWxzZXtsZXQgdT1vLnRvU3RyaW5nKDE2KS5tYXRjaCgvKC4qPykoLnswLDh9KSQvKTtpZih1PT09bnVsbClyZXR1cm47bGV0IGM9cGFyc2VJbnQoXG51WzJdLDE2KSxoPXBhcnNlSW50KHVbMV0sMTYpfHwwO2lbMTRdPWMsaVsxNV09aH1yZXR1cm4gTy5fbWQ1Y3ljbGUodGhpcy5fc3RhdGUsaSksXG5lP3RoaXMuX3N0YXRlOk8uX2hleCh0aGlzLl9zdGF0ZSl9fTthKE8sXCJNZDVcIiksVChPLFwic3RhdGVJZGVudGl0eVwiLG5ldyBJbnQzMkFycmF5KFxuWzE3MzI1ODQxOTMsLTI3MTczMzg3OSwtMTczMjU4NDE5NCwyNzE3MzM4NzhdKSksVChPLFwiYnVmZmVyMzJJZGVudGl0eVwiLG5ldyBJbnQzMkFycmF5KFxuWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdKSksVChPLFwiaGV4Q2hhcnNcIixcIjAxMjM0NTY3ODlhYmNkZWZcIiksVChPLFwiaGV4T1xcXG51dFwiLFtdKSxUKE8sXCJvbmVQYXNzSGFzaGVyXCIsbmV3IE8pO0tlPU99KTt2YXIgVXQ9e307WChVdCx7Y3JlYXRlSGFzaDooKT0+JG8sY3JlYXRlSG1hYzooKT0+S28scmFuZG9tQnl0ZXM6KCk9PkdvfSk7ZnVuY3Rpb24gR28ocil7XG5yZXR1cm4gdy5nZXRSYW5kb21WYWx1ZXMoZC5hbGxvYyhyKSl9ZnVuY3Rpb24gJG8ocil7aWYocj09PVwic2hhMjU2XCIpcmV0dXJue3VwZGF0ZTpmdW5jdGlvbihlKXtcbnJldHVybntkaWdlc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gZC5mcm9tKCRlKGUpKX19fX07aWYocj09PVwibWQ1XCIpcmV0dXJue3VwZGF0ZTpmdW5jdGlvbihlKXtcbnJldHVybntkaWdlc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdHlwZW9mIGU9PVwic3RyaW5nXCI/S2UuaGFzaFN0cihlKTpLZS5oYXNoQnl0ZUFycmF5KFxuZSl9fX19O3Rocm93IG5ldyBFcnJvcihgSGFzaCB0eXBlICcke3J9JyBub3Qgc3VwcG9ydGVkYCl9ZnVuY3Rpb24gS28ocixlKXtpZihyIT09XG5cInNoYTI1NlwiKXRocm93IG5ldyBFcnJvcihgT25seSBzaGEyNTYgaXMgc3VwcG9ydGVkIChyZXF1ZXN0ZWQ6ICcke3J9JylgKTtyZXR1cm57XG51cGRhdGU6ZnVuY3Rpb24odCl7cmV0dXJue2RpZ2VzdDpmdW5jdGlvbigpe3R5cGVvZiBlPT1cInN0cmluZ1wiJiYoZT1uZXcgVGV4dEVuY29kZXIoKS5cbmVuY29kZShlKSksdHlwZW9mIHQ9PVwic3RyaW5nXCImJih0PW5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh0KSk7bGV0IG49ZS5sZW5ndGg7aWYobj5cbjY0KWU9JGUoZSk7ZWxzZSBpZihuPDY0KXtsZXQgYz1uZXcgVWludDhBcnJheSg2NCk7Yy5zZXQoZSksZT1jfWxldCBpPW5ldyBVaW50OEFycmF5KFxuNjQpLHM9bmV3IFVpbnQ4QXJyYXkoNjQpO2ZvcihsZXQgYz0wO2M8NjQ7YysrKWlbY109NTReZVtjXSxzW2NdPTkyXmVbY107bGV0IG89bmV3IFVpbnQ4QXJyYXkoXG50Lmxlbmd0aCs2NCk7by5zZXQoaSwwKSxvLnNldCh0LDY0KTtsZXQgdT1uZXcgVWludDhBcnJheSg5Nik7cmV0dXJuIHUuc2V0KHMsMCksdS5cbnNldCgkZShvKSw2NCksZC5mcm9tKCRlKHUpKX19fX19dmFyIHF0PUsoKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7cmkoKTtuaSgpO2EoR28sXCJyXFxcbmFuZG9tQnl0ZXNcIik7YSgkbyxcImNyZWF0ZUhhc2hcIik7YShLbyxcImNyZWF0ZUhtYWNcIil9KTt2YXIgUXQ9SShpaT0+e1widXNlIHN0cmljdFwiO3AoKTtpaS5wYXJzZT1mdW5jdGlvbihyLGUpe3JldHVybiBuZXcgTnQocixlKS5wYXJzZSgpfTtcbnZhciBjdD1jbGFzcyBjdHtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuc291cmNlPWUsdGhpcy50cmFuc2Zvcm09dHx8Vm8sdGhpcy5wb3NpdGlvbj1cbjAsdGhpcy5lbnRyaWVzPVtdLHRoaXMucmVjb3JkZWQ9W10sdGhpcy5kaW1lbnNpb249MH1pc0VvZigpe3JldHVybiB0aGlzLnBvc2l0aW9uPj1cbnRoaXMuc291cmNlLmxlbmd0aH1uZXh0Q2hhcmFjdGVyKCl7dmFyIGU9dGhpcy5zb3VyY2VbdGhpcy5wb3NpdGlvbisrXTtyZXR1cm4gZT09PVxuXCJcXFxcXCI/e3ZhbHVlOnRoaXMuc291cmNlW3RoaXMucG9zaXRpb24rK10sZXNjYXBlZDohMH06e3ZhbHVlOmUsZXNjYXBlZDohMX19cmVjb3JkKGUpe1xudGhpcy5yZWNvcmRlZC5wdXNoKGUpfW5ld0VudHJ5KGUpe3ZhciB0Oyh0aGlzLnJlY29yZGVkLmxlbmd0aD4wfHxlKSYmKHQ9dGhpcy5yZWNvcmRlZC5cbmpvaW4oXCJcIiksdD09PVwiTlVMTFwiJiYhZSYmKHQ9bnVsbCksdCE9PW51bGwmJih0PXRoaXMudHJhbnNmb3JtKHQpKSx0aGlzLmVudHJpZXMucHVzaChcbnQpLHRoaXMucmVjb3JkZWQ9W10pfWNvbnN1bWVEaW1lbnNpb25zKCl7aWYodGhpcy5zb3VyY2VbMF09PT1cIltcIilmb3IoOyF0aGlzLmlzRW9mKCk7KXtcbnZhciBlPXRoaXMubmV4dENoYXJhY3RlcigpO2lmKGUudmFsdWU9PT1cIj1cIilicmVha319cGFyc2UoZSl7dmFyIHQsbixpO2Zvcih0aGlzLmNvbnN1bWVEaW1lbnNpb25zKCk7IXRoaXMuXG5pc0VvZigpOylpZih0PXRoaXMubmV4dENoYXJhY3RlcigpLHQudmFsdWU9PT1cIntcIiYmIWkpdGhpcy5kaW1lbnNpb24rKyx0aGlzLmRpbWVuc2lvbj5cbjEmJihuPW5ldyBjdCh0aGlzLnNvdXJjZS5zdWJzdHIodGhpcy5wb3NpdGlvbi0xKSx0aGlzLnRyYW5zZm9ybSksdGhpcy5lbnRyaWVzLnB1c2goXG5uLnBhcnNlKCEwKSksdGhpcy5wb3NpdGlvbis9bi5wb3NpdGlvbi0yKTtlbHNlIGlmKHQudmFsdWU9PT1cIn1cIiYmIWkpe2lmKHRoaXMuZGltZW5zaW9uLS0sXG4hdGhpcy5kaW1lbnNpb24mJih0aGlzLm5ld0VudHJ5KCksZSkpcmV0dXJuIHRoaXMuZW50cmllc31lbHNlIHQudmFsdWU9PT0nXCInJiYhdC5cbmVzY2FwZWQ/KGkmJnRoaXMubmV3RW50cnkoITApLGk9IWkpOnQudmFsdWU9PT1cIixcIiYmIWk/dGhpcy5uZXdFbnRyeSgpOnRoaXMucmVjb3JkKFxudC52YWx1ZSk7aWYodGhpcy5kaW1lbnNpb24hPT0wKXRocm93IG5ldyBFcnJvcihcImFycmF5IGRpbWVuc2lvbiBub3QgYmFsYW5jZWRcIik7cmV0dXJuIHRoaXMuXG5lbnRyaWVzfX07YShjdCxcIkFycmF5UGFyc2VyXCIpO3ZhciBOdD1jdDtmdW5jdGlvbiBWbyhyKXtyZXR1cm4gcn1hKFZvLFwiaWRlbnRpdHlcIil9KTt2YXIgV3Q9SSgoeWgsc2kpPT57cCgpO3ZhciB6bz1RdCgpO3NpLmV4cG9ydHM9e2NyZWF0ZTpmdW5jdGlvbihyLGUpe3JldHVybntwYXJzZTpmdW5jdGlvbigpe1xucmV0dXJuIHpvLnBhcnNlKHIsZSl9fX19fSk7dmFyIHVpPUkoKGdoLGFpKT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgWW89LyhcXGR7MSx9KS0oXFxkezJ9KS0oXFxkezJ9KSAoXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KShcXC5cXGR7MSx9KT8uKj8oIEJDKT8kLyxcblpvPS9eKFxcZHsxLH0pLShcXGR7Mn0pLShcXGR7Mn0pKCBCQyk/JC8sSm89LyhbWistXSkoXFxkezJ9KT86PyhcXGR7Mn0pPzo/KFxcZHsyfSk/LyxYbz0vXi0/aW5maW5pdHkkLztcbmFpLmV4cG9ydHM9YShmdW5jdGlvbihlKXtpZihYby50ZXN0KGUpKXJldHVybiBOdW1iZXIoZS5yZXBsYWNlKFwiaVwiLFwiSVwiKSk7dmFyIHQ9WW8uXG5leGVjKGUpO2lmKCF0KXJldHVybiBlYShlKXx8bnVsbDt2YXIgbj0hIXRbOF0saT1wYXJzZUludCh0WzFdLDEwKTtuJiYoaT1vaShpKSk7dmFyIHM9cGFyc2VJbnQoXG50WzJdLDEwKS0xLG89dFszXSx1PXBhcnNlSW50KHRbNF0sMTApLGM9cGFyc2VJbnQodFs1XSwxMCksaD1wYXJzZUludCh0WzZdLDEwKSxsPXRbN107XG5sPWw/MWUzKnBhcnNlRmxvYXQobCk6MDt2YXIgeSxFPXRhKGUpO3JldHVybiBFIT1udWxsPyh5PW5ldyBEYXRlKERhdGUuVVRDKGkscyxvLFxudSxjLGgsbCkpLGp0KGkpJiZ5LnNldFVUQ0Z1bGxZZWFyKGkpLEUhPT0wJiZ5LnNldFRpbWUoeS5nZXRUaW1lKCktRSkpOih5PW5ldyBEYXRlKFxuaSxzLG8sdSxjLGgsbCksanQoaSkmJnkuc2V0RnVsbFllYXIoaSkpLHl9LFwicGFyc2VEYXRlXCIpO2Z1bmN0aW9uIGVhKHIpe3ZhciBlPVpvLlxuZXhlYyhyKTtpZihlKXt2YXIgdD1wYXJzZUludChlWzFdLDEwKSxuPSEhZVs0XTtuJiYodD1vaSh0KSk7dmFyIGk9cGFyc2VJbnQoZVsyXSxcbjEwKS0xLHM9ZVszXSxvPW5ldyBEYXRlKHQsaSxzKTtyZXR1cm4ganQodCkmJm8uc2V0RnVsbFllYXIodCksb319YShlYSxcImdldERhdGVcIik7XG5mdW5jdGlvbiB0YShyKXtpZihyLmVuZHNXaXRoKFwiKzAwXCIpKXJldHVybiAwO3ZhciBlPUpvLmV4ZWMoci5zcGxpdChcIiBcIilbMV0pO2lmKGUpe1xudmFyIHQ9ZVsxXTtpZih0PT09XCJaXCIpcmV0dXJuIDA7dmFyIG49dD09PVwiLVwiPy0xOjEsaT1wYXJzZUludChlWzJdLDEwKSozNjAwK3BhcnNlSW50KFxuZVszXXx8MCwxMCkqNjArcGFyc2VJbnQoZVs0XXx8MCwxMCk7cmV0dXJuIGkqbioxZTN9fWEodGEsXCJ0aW1lWm9uZU9mZnNldFwiKTtmdW5jdGlvbiBvaShyKXtcbnJldHVybi0oci0xKX1hKG9pLFwiYmNZZWFyVG9OZWdhdGl2ZVllYXJcIik7ZnVuY3Rpb24ganQocil7cmV0dXJuIHI+PTAmJnI8MTAwfWEoanQsXG5cImlzMFRvOTlcIil9KTt2YXIgaGk9SSgoU2gsY2kpPT57cCgpO2NpLmV4cG9ydHM9bmE7dmFyIHJhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gbmEocil7XG5mb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgdD1hcmd1bWVudHNbZV07Zm9yKHZhciBuIGluIHQpcmEuY2FsbCh0LFxubikmJihyW25dPXRbbl0pfXJldHVybiByfWEobmEsXCJleHRlbmRcIil9KTt2YXIgcGk9SSgodmgsZmkpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBpYT1oaSgpO2ZpLmV4cG9ydHM9RmU7ZnVuY3Rpb24gRmUocil7aWYoISh0aGlzIGluc3RhbmNlb2ZcbkZlKSlyZXR1cm4gbmV3IEZlKHIpO2lhKHRoaXMsbWEocikpfWEoRmUsXCJQb3N0Z3Jlc0ludGVydmFsXCIpO3ZhciBzYT1bXCJzZWNvbmRzXCIsXCJcXFxubWludXRlc1wiLFwiaG91cnNcIixcImRheXNcIixcIm1vbnRoc1wiLFwieWVhcnNcIl07RmUucHJvdG90eXBlLnRvUG9zdGdyZXM9ZnVuY3Rpb24oKXt2YXIgcj1zYS5cbmZpbHRlcih0aGlzLmhhc093blByb3BlcnR5LHRoaXMpO3JldHVybiB0aGlzLm1pbGxpc2Vjb25kcyYmci5pbmRleE9mKFwic2Vjb25kc1wiKTxcbjAmJnIucHVzaChcInNlY29uZHNcIiksci5sZW5ndGg9PT0wP1wiMFwiOnIubWFwKGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXNbZV18fDA7cmV0dXJuIGU9PT1cblwic2Vjb25kc1wiJiZ0aGlzLm1pbGxpc2Vjb25kcyYmKHQ9KHQrdGhpcy5taWxsaXNlY29uZHMvMWUzKS50b0ZpeGVkKDYpLnJlcGxhY2UoL1xcLj8wKyQvLFxuXCJcIikpLHQrXCIgXCIrZX0sdGhpcykuam9pbihcIiBcIil9O3ZhciBvYT17eWVhcnM6XCJZXCIsbW9udGhzOlwiTVwiLGRheXM6XCJEXCIsaG91cnM6XCJIXCIsbWludXRlczpcIlxcXG5NXCIsc2Vjb25kczpcIlNcIn0sYWE9W1wieWVhcnNcIixcIm1vbnRoc1wiLFwiZGF5c1wiXSx1YT1bXCJob3Vyc1wiLFwibWludXRlc1wiLFwic2Vjb25kc1wiXTtGZS5cbnByb3RvdHlwZS50b0lTT1N0cmluZz1GZS5wcm90b3R5cGUudG9JU089ZnVuY3Rpb24oKXt2YXIgcj1hYS5tYXAodCx0aGlzKS5qb2luKFwiXCIpLFxuZT11YS5tYXAodCx0aGlzKS5qb2luKFwiXCIpO3JldHVyblwiUFwiK3IrXCJUXCIrZTtmdW5jdGlvbiB0KG4pe3ZhciBpPXRoaXNbbl18fDA7cmV0dXJuIG49PT1cblwic2Vjb25kc1wiJiZ0aGlzLm1pbGxpc2Vjb25kcyYmKGk9KGkrdGhpcy5taWxsaXNlY29uZHMvMWUzKS50b0ZpeGVkKDYpLnJlcGxhY2UoLzArJC8sXG5cIlwiKSksaStvYVtuXX19O3ZhciBIdD1cIihbKy1dP1xcXFxkKylcIixjYT1IdCtcIlxcXFxzK3llYXJzP1wiLGhhPUh0K1wiXFxcXHMrbW9ucz9cIixsYT1IdCtcIlxcXG5cXFxccytkYXlzP1wiLGZhPVwiKFsrLV0pPyhbXFxcXGRdKik6KFxcXFxkXFxcXGQpOihcXFxcZFxcXFxkKVxcXFwuPyhcXFxcZHsxLDZ9KT9cIixwYT1uZXcgUmVnRXhwKFtcbmNhLGhhLGxhLGZhXS5tYXAoZnVuY3Rpb24ocil7cmV0dXJuXCIoXCIrcitcIik/XCJ9KS5qb2luKFwiXFxcXHMqXCIpKSxsaT17eWVhcnM6Mixtb250aHM6NCxcbmRheXM6Nixob3Vyczo5LG1pbnV0ZXM6MTAsc2Vjb25kczoxMSxtaWxsaXNlY29uZHM6MTJ9LGRhPVtcImhvdXJzXCIsXCJtaW51dGVzXCIsXCJzZWNcXFxub25kc1wiLFwibWlsbGlzZWNvbmRzXCJdO2Z1bmN0aW9uIHlhKHIpe3ZhciBlPXIrXCIwMDAwMDBcIi5zbGljZShyLmxlbmd0aCk7cmV0dXJuIHBhcnNlSW50KFxuZSwxMCkvMWUzfWEoeWEsXCJwYXJzZU1pbGxpc2Vjb25kc1wiKTtmdW5jdGlvbiBtYShyKXtpZighcilyZXR1cm57fTt2YXIgZT1wYS5leGVjKFxuciksdD1lWzhdPT09XCItXCI7cmV0dXJuIE9iamVjdC5rZXlzKGxpKS5yZWR1Y2UoZnVuY3Rpb24obixpKXt2YXIgcz1saVtpXSxvPWVbc107cmV0dXJuIW98fFxuKG89aT09PVwibWlsbGlzZWNvbmRzXCI/eWEobyk6cGFyc2VJbnQobywxMCksIW8pfHwodCYmfmRhLmluZGV4T2YoaSkmJihvKj0tMSksbltpXT1cbm8pLG59LHt9KX1hKG1hLFwicGFyc2VcIil9KTt2YXIgeWk9SSgoQ2gsZGkpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO2RpLmV4cG9ydHM9YShmdW5jdGlvbihlKXtpZigvXlxcXFx4Ly50ZXN0KGUpKXJldHVybiBuZXcgZChcbmUuc3Vic3RyKDIpLFwiaGV4XCIpO2Zvcih2YXIgdD1cIlwiLG49MDtuPGUubGVuZ3RoOylpZihlW25dIT09XCJcXFxcXCIpdCs9ZVtuXSwrK247ZWxzZSBpZigvWzAtN117M30vLlxudGVzdChlLnN1YnN0cihuKzEsMykpKXQrPVN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoZS5zdWJzdHIobisxLDMpLDgpKSxuKz00O2Vsc2V7XG5mb3IodmFyIGk9MTtuK2k8ZS5sZW5ndGgmJmVbbitpXT09PVwiXFxcXFwiOylpKys7Zm9yKHZhciBzPTA7czxNYXRoLmZsb29yKGkvMik7KytzKXQrPVxuXCJcXFxcXCI7bis9TWF0aC5mbG9vcihpLzIpKjJ9cmV0dXJuIG5ldyBkKHQsXCJiaW5hcnlcIil9LFwicGFyc2VCeXRlYVwiKX0pO3ZhciBFaT1JKChQaCx4aSk9PntwKCk7dmFyIFZlPVF0KCksemU9V3QoKSxodD11aSgpLGdpPXBpKCksd2k9eWkoKTtmdW5jdGlvbiBsdChyKXtcbnJldHVybiBhKGZ1bmN0aW9uKHQpe3JldHVybiB0PT09bnVsbD90OnIodCl9LFwibnVsbEFsbG93ZWRcIil9YShsdCxcImFsbG93TnVsbFwiKTtmdW5jdGlvbiBiaShyKXtcbnJldHVybiByPT09bnVsbD9yOnI9PT1cIlRSVUVcInx8cj09PVwidFwifHxyPT09XCJ0cnVlXCJ8fHI9PT1cInlcInx8cj09PVwieWVzXCJ8fHI9PT1cIm9uXCJ8fFxucj09PVwiMVwifWEoYmksXCJwYXJzZUJvb2xcIik7ZnVuY3Rpb24gZ2Eocil7cmV0dXJuIHI/VmUucGFyc2UocixiaSk6bnVsbH1hKGdhLFwicGFyc1xcXG5lQm9vbEFycmF5XCIpO2Z1bmN0aW9uIHdhKHIpe3JldHVybiBwYXJzZUludChyLDEwKX1hKHdhLFwicGFyc2VCYXNlVGVuSW50XCIpO2Z1bmN0aW9uIEd0KHIpe1xucmV0dXJuIHI/VmUucGFyc2UocixsdCh3YSkpOm51bGx9YShHdCxcInBhcnNlSW50ZWdlckFycmF5XCIpO2Z1bmN0aW9uIGJhKHIpe3JldHVybiByP1xuVmUucGFyc2UocixsdChmdW5jdGlvbihlKXtyZXR1cm4gU2koZSkudHJpbSgpfSkpOm51bGx9YShiYSxcInBhcnNlQmlnSW50ZWdlckFycmF5XCIpO1xudmFyIFNhPWEoZnVuY3Rpb24ocil7aWYoIXIpcmV0dXJuIG51bGw7dmFyIGU9emUuY3JlYXRlKHIsZnVuY3Rpb24odCl7cmV0dXJuIHQhPT1cbm51bGwmJih0PXp0KHQpKSx0fSk7cmV0dXJuIGUucGFyc2UoKX0sXCJwYXJzZVBvaW50QXJyYXlcIiksJHQ9YShmdW5jdGlvbihyKXtpZighcilcbnJldHVybiBudWxsO3ZhciBlPXplLmNyZWF0ZShyLGZ1bmN0aW9uKHQpe3JldHVybiB0IT09bnVsbCYmKHQ9cGFyc2VGbG9hdCh0KSksdH0pO1xucmV0dXJuIGUucGFyc2UoKX0sXCJwYXJzZUZsb2F0QXJyYXlcIiksdGU9YShmdW5jdGlvbihyKXtpZighcilyZXR1cm4gbnVsbDt2YXIgZT16ZS5cbmNyZWF0ZShyKTtyZXR1cm4gZS5wYXJzZSgpfSxcInBhcnNlU3RyaW5nQXJyYXlcIiksS3Q9YShmdW5jdGlvbihyKXtpZighcilyZXR1cm4gbnVsbDtcbnZhciBlPXplLmNyZWF0ZShyLGZ1bmN0aW9uKHQpe3JldHVybiB0IT09bnVsbCYmKHQ9aHQodCkpLHR9KTtyZXR1cm4gZS5wYXJzZSgpfSxcIlxcXG5wYXJzZURhdGVBcnJheVwiKSx4YT1hKGZ1bmN0aW9uKHIpe2lmKCFyKXJldHVybiBudWxsO3ZhciBlPXplLmNyZWF0ZShyLGZ1bmN0aW9uKHQpe1xucmV0dXJuIHQhPT1udWxsJiYodD1naSh0KSksdH0pO3JldHVybiBlLnBhcnNlKCl9LFwicGFyc2VJbnRlcnZhbEFycmF5XCIpLEVhPWEoZnVuY3Rpb24ocil7XG5yZXR1cm4gcj9WZS5wYXJzZShyLGx0KHdpKSk6bnVsbH0sXCJwYXJzZUJ5dGVBQXJyYXlcIiksVnQ9YShmdW5jdGlvbihyKXtyZXR1cm4gcGFyc2VJbnQoXG5yLDEwKX0sXCJwYXJzZUludGVnZXJcIiksU2k9YShmdW5jdGlvbihyKXt2YXIgZT1TdHJpbmcocik7cmV0dXJuL15cXGQrJC8udGVzdChlKT9lOlxucn0sXCJwYXJzZUJpZ0ludGVnZXJcIiksbWk9YShmdW5jdGlvbihyKXtyZXR1cm4gcj9WZS5wYXJzZShyLGx0KEpTT04ucGFyc2UpKTpudWxsfSxcblwicGFyc2VKc29uQXJyYXlcIiksenQ9YShmdW5jdGlvbihyKXtyZXR1cm4gclswXSE9PVwiKFwiP251bGw6KHI9ci5zdWJzdHJpbmcoMSxyLmxlbmd0aC1cbjEpLnNwbGl0KFwiLFwiKSx7eDpwYXJzZUZsb2F0KHJbMF0pLHk6cGFyc2VGbG9hdChyWzFdKX0pfSxcInBhcnNlUG9pbnRcIiksdmE9YShmdW5jdGlvbihyKXtcbmlmKHJbMF0hPT1cIjxcIiYmclsxXSE9PVwiKFwiKXJldHVybiBudWxsO2Zvcih2YXIgZT1cIihcIix0PVwiXCIsbj0hMSxpPTI7aTxyLmxlbmd0aC0xO2krKyl7XG5pZihufHwoZSs9cltpXSkscltpXT09PVwiKVwiKXtuPSEwO2NvbnRpbnVlfWVsc2UgaWYoIW4pY29udGludWU7cltpXSE9PVwiLFwiJiYodCs9cltpXSl9XG52YXIgcz16dChlKTtyZXR1cm4gcy5yYWRpdXM9cGFyc2VGbG9hdCh0KSxzfSxcInBhcnNlQ2lyY2xlXCIpLF9hPWEoZnVuY3Rpb24ocil7cigyMCxcblNpKSxyKDIxLFZ0KSxyKDIzLFZ0KSxyKDI2LFZ0KSxyKDcwMCxwYXJzZUZsb2F0KSxyKDcwMSxwYXJzZUZsb2F0KSxyKDE2LGJpKSxyKDEwODIsXG5odCkscigxMTE0LGh0KSxyKDExODQsaHQpLHIoNjAwLHp0KSxyKDY1MSx0ZSkscig3MTgsdmEpLHIoMWUzLGdhKSxyKDEwMDEsRWEpLHIoMTAwNSxcbkd0KSxyKDEwMDcsR3QpLHIoMTAyOCxHdCkscigxMDE2LGJhKSxyKDEwMTcsU2EpLHIoMTAyMSwkdCkscigxMDIyLCR0KSxyKDEyMzEsJHQpLFxucigxMDE0LHRlKSxyKDEwMTUsdGUpLHIoMTAwOCx0ZSkscigxMDA5LHRlKSxyKDEwNDAsdGUpLHIoMTA0MSx0ZSkscigxMTE1LEt0KSxyKDExODIsXG5LdCkscigxMTg1LEt0KSxyKDExODYsZ2kpLHIoMTE4Nyx4YSkscigxNyx3aSkscigxMTQsSlNPTi5wYXJzZS5iaW5kKEpTT04pKSxyKDM4MDIsXG5KU09OLnBhcnNlLmJpbmQoSlNPTikpLHIoMTk5LG1pKSxyKDM4MDcsbWkpLHIoMzkwNyx0ZSkscigyOTUxLHRlKSxyKDc5MSx0ZSkscigxMTgzLFxudGUpLHIoMTI3MCx0ZSl9LFwiaW5pdFwiKTt4aS5leHBvcnRzPXtpbml0Ol9hfX0pO3ZhciBfaT1JKChSaCx2aSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIFk9MWU2O2Z1bmN0aW9uIEFhKHIpe3ZhciBlPXIucmVhZEludDMyQkUoXG4wKSx0PXIucmVhZFVJbnQzMkJFKDQpLG49XCJcIjtlPDAmJihlPX5lKyh0PT09MCksdD1+dCsxPj4+MCxuPVwiLVwiKTt2YXIgaT1cIlwiLHMsbyx1LFxuYyxoLGw7e2lmKHM9ZSVZLGU9ZS9ZPj4+MCxvPTQyOTQ5NjcyOTYqcyt0LHQ9by9ZPj4+MCx1PVwiXCIrKG8tWSp0KSx0PT09MCYmZT09PTApcmV0dXJuIG4rXG51K2k7Zm9yKGM9XCJcIixoPTYtdS5sZW5ndGgsbD0wO2w8aDtsKyspYys9XCIwXCI7aT1jK3UraX17aWYocz1lJVksZT1lL1k+Pj4wLG89NDI5NDk2NzI5NipcbnMrdCx0PW8vWT4+PjAsdT1cIlwiKyhvLVkqdCksdD09PTAmJmU9PT0wKXJldHVybiBuK3UraTtmb3IoYz1cIlwiLGg9Ni11Lmxlbmd0aCxsPTA7bDxcbmg7bCsrKWMrPVwiMFwiO2k9Yyt1K2l9e2lmKHM9ZSVZLGU9ZS9ZPj4+MCxvPTQyOTQ5NjcyOTYqcyt0LHQ9by9ZPj4+MCx1PVwiXCIrKG8tWSp0KSxcbnQ9PT0wJiZlPT09MClyZXR1cm4gbit1K2k7Zm9yKGM9XCJcIixoPTYtdS5sZW5ndGgsbD0wO2w8aDtsKyspYys9XCIwXCI7aT1jK3UraX1yZXR1cm4gcz1cbmUlWSxvPTQyOTQ5NjcyOTYqcyt0LHU9XCJcIitvJVksbit1K2l9YShBYSxcInJlYWRJbnQ4XCIpO3ZpLmV4cG9ydHM9QWF9KTt2YXIgUGk9SSgoRGgsVGkpPT57cCgpO3ZhciBDYT1faSgpLFI9YShmdW5jdGlvbihyLGUsdCxuLGkpe3Q9dHx8MCxuPW58fCExLGk9aXx8ZnVuY3Rpb24oXyxQLE4pe1xucmV0dXJuIF8qTWF0aC5wb3coMixOKStQfTt2YXIgcz10Pj4zLG89YShmdW5jdGlvbihfKXtyZXR1cm4gbj9+XyYyNTU6X30sXCJpbnZcIiksdT0yNTUsXG5jPTgtdCU4O2U8YyYmKHU9MjU1PDw4LWUmMjU1LGM9ZSksdCYmKHU9dT4+dCU4KTt2YXIgaD0wO3QlOCtlPj04JiYoaD1pKDAsbyhyW3NdKSZcbnUsYykpO2Zvcih2YXIgbD1lK3Q+PjMseT1zKzE7eTxsO3krKyloPWkoaCxvKHJbeV0pLDgpO3ZhciBFPShlK3QpJTg7cmV0dXJuIEU+MCYmXG4oaD1pKGgsbyhyW2xdKT4+OC1FLEUpKSxofSxcInBhcnNlQml0c1wiKSxJaT1hKGZ1bmN0aW9uKHIsZSx0KXt2YXIgbj1NYXRoLnBvdygyLHQtXG4xKS0xLGk9UihyLDEpLHM9UihyLHQsMSk7aWYocz09PTApcmV0dXJuIDA7dmFyIG89MSx1PWEoZnVuY3Rpb24oaCxsLHkpe2g9PT0wJiYoaD1cbjEpO2Zvcih2YXIgRT0xO0U8PXk7RSsrKW8vPTIsKGwmMTw8eS1FKT4wJiYoaCs9byk7cmV0dXJuIGh9LFwicGFyc2VQcmVjaXNpb25CaXRzXCIpLFxuYz1SKHIsZSx0KzEsITEsdSk7cmV0dXJuIHM9PU1hdGgucG93KDIsdCsxKS0xP2M9PT0wP2k9PT0wPzEvMDotMS8wOk5hTjooaT09PTA/MTpcbi0xKSpNYXRoLnBvdygyLHMtbikqY30sXCJwYXJzZUZsb2F0RnJvbUJpdHNcIiksSWE9YShmdW5jdGlvbihyKXtyZXR1cm4gUihyLDEpPT0xPy0xKlxuKFIociwxNSwxLCEwKSsxKTpSKHIsMTUsMSl9LFwicGFyc2VJbnQxNlwiKSxBaT1hKGZ1bmN0aW9uKHIpe3JldHVybiBSKHIsMSk9PTE/LTEqKFIoXG5yLDMxLDEsITApKzEpOlIociwzMSwxKX0sXCJwYXJzZUludDMyXCIpLFRhPWEoZnVuY3Rpb24ocil7cmV0dXJuIElpKHIsMjMsOCl9LFwicGFyc1xcXG5lRmxvYXQzMlwiKSxQYT1hKGZ1bmN0aW9uKHIpe3JldHVybiBJaShyLDUyLDExKX0sXCJwYXJzZUZsb2F0NjRcIiksQmE9YShmdW5jdGlvbihyKXtcbnZhciBlPVIociwxNiwzMik7aWYoZT09NDkxNTIpcmV0dXJuIE5hTjtmb3IodmFyIHQ9TWF0aC5wb3coMWU0LFIociwxNiwxNikpLG49MCxpPVtdLFxucz1SKHIsMTYpLG89MDtvPHM7bysrKW4rPVIociwxNiw2NCsxNipvKSp0LHQvPTFlNDt2YXIgdT1NYXRoLnBvdygxMCxSKHIsMTYsNDgpKTtcbnJldHVybihlPT09MD8xOi0xKSpNYXRoLnJvdW5kKG4qdSkvdX0sXCJwYXJzZU51bWVyaWNcIiksQ2k9YShmdW5jdGlvbihyLGUpe3ZhciB0PVIoXG5lLDEpLG49UihlLDYzLDEpLGk9bmV3IERhdGUoKHQ9PT0wPzE6LTEpKm4vMWUzKzk0NjY4NDhlNSk7cmV0dXJuIHJ8fGkuc2V0VGltZShpLlxuZ2V0VGltZSgpK2kuZ2V0VGltZXpvbmVPZmZzZXQoKSo2ZTQpLGkudXNlYz1uJTFlMyxpLmdldE1pY3JvU2Vjb25kcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLlxudXNlY30saS5zZXRNaWNyb1NlY29uZHM9ZnVuY3Rpb24ocyl7dGhpcy51c2VjPXN9LGkuZ2V0VVRDTWljcm9TZWNvbmRzPWZ1bmN0aW9uKCl7XG5yZXR1cm4gdGhpcy51c2VjfSxpfSxcInBhcnNlRGF0ZVwiKSxZZT1hKGZ1bmN0aW9uKHIpe2Zvcih2YXIgZT1SKHIsMzIpLHQ9UihyLDMyLDMyKSxcbm49UihyLDMyLDY0KSxpPTk2LHM9W10sbz0wO288ZTtvKyspc1tvXT1SKHIsMzIsaSksaSs9MzIsaSs9MzI7dmFyIHU9YShmdW5jdGlvbihoKXtcbnZhciBsPVIociwzMixpKTtpZihpKz0zMixsPT00Mjk0OTY3Mjk1KXJldHVybiBudWxsO3ZhciB5O2lmKGg9PTIzfHxoPT0yMClyZXR1cm4geT1cblIocixsKjgsaSksaSs9bCo4LHk7aWYoaD09MjUpcmV0dXJuIHk9ci50b1N0cmluZyh0aGlzLmVuY29kaW5nLGk+PjMsKGkrPWw8PDMpPj4zKSxcbnk7Y29uc29sZS5sb2coXCJFUlJPUjogRWxlbWVudFR5cGUgbm90IGltcGxlbWVudGVkOiBcIitoKX0sXCJwYXJzZUVsZW1lbnRcIiksYz1hKGZ1bmN0aW9uKGgsbCl7XG52YXIgeT1bXSxFO2lmKGgubGVuZ3RoPjEpe3ZhciBfPWguc2hpZnQoKTtmb3IoRT0wO0U8XztFKyspeVtFXT1jKGgsbCk7aC51bnNoaWZ0KFxuXyl9ZWxzZSBmb3IoRT0wO0U8aFswXTtFKyspeVtFXT11KGwpO3JldHVybiB5fSxcInBhcnNlXCIpO3JldHVybiBjKHMsbil9LFwicGFyc2VBcnJcXFxuYXlcIiksTGE9YShmdW5jdGlvbihyKXtyZXR1cm4gci50b1N0cmluZyhcInV0ZjhcIil9LFwicGFyc2VUZXh0XCIpLFJhPWEoZnVuY3Rpb24ocil7cmV0dXJuIHI9PT1cbm51bGw/bnVsbDpSKHIsOCk+MH0sXCJwYXJzZUJvb2xcIiksRmE9YShmdW5jdGlvbihyKXtyKDIwLENhKSxyKDIxLElhKSxyKDIzLEFpKSxyKDI2LFxuQWkpLHIoMTcwMCxCYSkscig3MDAsVGEpLHIoNzAxLFBhKSxyKDE2LFJhKSxyKDExMTQsQ2kuYmluZChudWxsLCExKSkscigxMTg0LENpLmJpbmQoXG5udWxsLCEwKSkscigxZTMsWWUpLHIoMTAwNyxZZSkscigxMDE2LFllKSxyKDEwMDgsWWUpLHIoMTAwOSxZZSkscigyNSxMYSl9LFwiaW5pdFwiKTtcblRpLmV4cG9ydHM9e2luaXQ6RmF9fSk7dmFyIExpPUkoKFVoLEJpKT0+e3AoKTtCaS5leHBvcnRzPXtCT09MOjE2LEJZVEVBOjE3LENIQVI6MTgsSU5UODoyMCxJTlQyOjIxLElOVDQ6MjMsXG5SRUdQUk9DOjI0LFRFWFQ6MjUsT0lEOjI2LFRJRDoyNyxYSUQ6MjgsQ0lEOjI5LEpTT046MTE0LFhNTDoxNDIsUEdfTk9ERV9UUkVFOjE5NCxcblNNR1I6MjEwLFBBVEg6NjAyLFBPTFlHT046NjA0LENJRFI6NjUwLEZMT0FUNDo3MDAsRkxPQVQ4OjcwMSxBQlNUSU1FOjcwMixSRUxUSU1FOjcwMyxcblRJTlRFUlZBTDo3MDQsQ0lSQ0xFOjcxOCxNQUNBRERSODo3NzQsTU9ORVk6NzkwLE1BQ0FERFI6ODI5LElORVQ6ODY5LEFDTElURU06MTAzMyxcbkJQQ0hBUjoxMDQyLFZBUkNIQVI6MTA0MyxEQVRFOjEwODIsVElNRToxMDgzLFRJTUVTVEFNUDoxMTE0LFRJTUVTVEFNUFRaOjExODQsSU5URVJWQUw6MTE4NixcblRJTUVUWjoxMjY2LEJJVDoxNTYwLFZBUkJJVDoxNTYyLE5VTUVSSUM6MTcwMCxSRUZDVVJTT1I6MTc5MCxSRUdQUk9DRURVUkU6MjIwMixSRUdPUEVSOjIyMDMsXG5SRUdPUEVSQVRPUjoyMjA0LFJFR0NMQVNTOjIyMDUsUkVHVFlQRToyMjA2LFVVSUQ6Mjk1MCxUWElEX1NOQVBTSE9UOjI5NzAsUEdfTFNOOjMyMjAsXG5QR19ORElTVElOQ1Q6MzM2MSxQR19ERVBFTkRFTkNJRVM6MzQwMixUU1ZFQ1RPUjozNjE0LFRTUVVFUlk6MzYxNSxHVFNWRUNUT1I6MzY0MixcblJFR0NPTkZJRzozNzM0LFJFR0RJQ1RJT05BUlk6Mzc2OSxKU09OQjozODAyLFJFR05BTUVTUEFDRTo0MDg5LFJFR1JPTEU6NDA5Nn19KTt2YXIgWGU9SShKZT0+e3AoKTt2YXIgTWE9RWkoKSxEYT1QaSgpLE9hPVd0KCksa2E9TGkoKTtKZS5nZXRUeXBlUGFyc2VyPVVhO0plLnNldFR5cGVQYXJzZXI9XG5xYTtKZS5hcnJheVBhcnNlcj1PYTtKZS5idWlsdGlucz1rYTt2YXIgWmU9e3RleHQ6e30sYmluYXJ5Ont9fTtmdW5jdGlvbiBSaShyKXtyZXR1cm4gU3RyaW5nKFxucil9YShSaSxcIm5vUGFyc2VcIik7ZnVuY3Rpb24gVWEocixlKXtyZXR1cm4gZT1lfHxcInRleHRcIixaZVtlXSYmWmVbZV1bcl18fFJpfWEoVWEsXG5cImdldFR5cGVQYXJzZXJcIik7ZnVuY3Rpb24gcWEocixlLHQpe3R5cGVvZiBlPT1cImZ1bmN0aW9uXCImJih0PWUsZT1cInRleHRcIiksWmVbZV1bcl09XG50fWEocWEsXCJzZXRUeXBlUGFyc2VyXCIpO01hLmluaXQoZnVuY3Rpb24ocixlKXtaZS50ZXh0W3JdPWV9KTtEYS5pbml0KGZ1bmN0aW9uKHIsZSl7XG5aZS5iaW5hcnlbcl09ZX0pfSk7dmFyIGV0PUkoKGpoLFl0KT0+e1widXNlIHN0cmljdFwiO3AoKTtZdC5leHBvcnRzPXtob3N0OlwibG9jYWxob3N0XCIsdXNlcjptLnBsYXRmb3JtPT09XG5cIndpbjMyXCI/bS5lbnYuVVNFUk5BTUU6bS5lbnYuVVNFUixkYXRhYmFzZTp2b2lkIDAscGFzc3dvcmQ6bnVsbCxjb25uZWN0aW9uU3RyaW5nOnZvaWQgMCxcbnBvcnQ6NTQzMixyb3dzOjAsYmluYXJ5OiExLG1heDoxMCxpZGxlVGltZW91dE1pbGxpczozZTQsY2xpZW50X2VuY29kaW5nOlwiXCIsc3NsOiExLFxuYXBwbGljYXRpb25fbmFtZTp2b2lkIDAsZmFsbGJhY2tfYXBwbGljYXRpb25fbmFtZTp2b2lkIDAsb3B0aW9uczp2b2lkIDAscGFyc2VJbnB1dERhdGVzQXNVVEM6ITEsXG5zdGF0ZW1lbnRfdGltZW91dDohMSxsb2NrX3RpbWVvdXQ6ITEsaWRsZV9pbl90cmFuc2FjdGlvbl9zZXNzaW9uX3RpbWVvdXQ6ITEscXVlcnlfdGltZW91dDohMSxcbmNvbm5lY3RfdGltZW91dDowLGtlZXBhbGl2ZXM6MSxrZWVwYWxpdmVzX2lkbGU6MH07dmFyIE1lPVhlKCksTmE9TWUuZ2V0VHlwZVBhcnNlcihcbjIwLFwidGV4dFwiKSxRYT1NZS5nZXRUeXBlUGFyc2VyKDEwMTYsXCJ0ZXh0XCIpO1l0LmV4cG9ydHMuX19kZWZpbmVTZXR0ZXJfXyhcInBhcnNlSW5cXFxudDhcIixmdW5jdGlvbihyKXtNZS5zZXRUeXBlUGFyc2VyKDIwLFwidGV4dFwiLHI/TWUuZ2V0VHlwZVBhcnNlcigyMyxcInRleHRcIik6TmEpLE1lLlxuc2V0VHlwZVBhcnNlcigxMDE2LFwidGV4dFwiLHI/TWUuZ2V0VHlwZVBhcnNlcigxMDA3LFwidGV4dFwiKTpRYSl9KX0pO3ZhciB0dD1JKChHaCxNaSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIFdhPShxdCgpLGsoVXQpKSxqYT1ldCgpO2Z1bmN0aW9uIEhhKHIpe3ZhciBlPXIuXG5yZXBsYWNlKC9cXFxcL2csXCJcXFxcXFxcXFwiKS5yZXBsYWNlKC9cIi9nLCdcXFxcXCInKTtyZXR1cm4nXCInK2UrJ1wiJ31hKEhhLFwiZXNjYXBlRWxlbWVudFwiKTtcbmZ1bmN0aW9uIEZpKHIpe2Zvcih2YXIgZT1cIntcIix0PTA7dDxyLmxlbmd0aDt0KyspdD4wJiYoZT1lK1wiLFwiKSxyW3RdPT09bnVsbHx8dHlwZW9mIHJbdF0+XG5cInVcIj9lPWUrXCJOVUxMXCI6QXJyYXkuaXNBcnJheShyW3RdKT9lPWUrRmkoclt0XSk6clt0XWluc3RhbmNlb2YgZD9lKz1cIlxcXFxcXFxceFwiK3JbdF0uXG50b1N0cmluZyhcImhleFwiKTplKz1IYShmdChyW3RdKSk7cmV0dXJuIGU9ZStcIn1cIixlfWEoRmksXCJhcnJheVN0cmluZ1wiKTt2YXIgZnQ9YShmdW5jdGlvbihyLGUpe1xuaWYocj09bnVsbClyZXR1cm4gbnVsbDtpZihyIGluc3RhbmNlb2YgZClyZXR1cm4gcjtpZihBcnJheUJ1ZmZlci5pc1ZpZXcocikpe3ZhciB0PWQuXG5mcm9tKHIuYnVmZmVyLHIuYnl0ZU9mZnNldCxyLmJ5dGVMZW5ndGgpO3JldHVybiB0Lmxlbmd0aD09PXIuYnl0ZUxlbmd0aD90OnQuc2xpY2UoXG5yLmJ5dGVPZmZzZXQsci5ieXRlT2Zmc2V0K3IuYnl0ZUxlbmd0aCl9cmV0dXJuIHIgaW5zdGFuY2VvZiBEYXRlP2phLnBhcnNlSW5wdXREYXRlc0FzVVRDP1xuS2Eocik6JGEocik6QXJyYXkuaXNBcnJheShyKT9GaShyKTp0eXBlb2Ygcj09XCJvYmplY3RcIj9HYShyLGUpOnIudG9TdHJpbmcoKX0sXCJwcmVcXFxucGFyZVZhbHVlXCIpO2Z1bmN0aW9uIEdhKHIsZSl7aWYociYmdHlwZW9mIHIudG9Qb3N0Z3Jlcz09XCJmdW5jdGlvblwiKXtpZihlPWV8fFtdLGUuXG5pbmRleE9mKHIpIT09LTEpdGhyb3cgbmV3IEVycm9yKCdjaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgd2hpbGUgcHJlcGFyaW5nIFwiJytcbnIrJ1wiIGZvciBxdWVyeScpO3JldHVybiBlLnB1c2gociksZnQoci50b1Bvc3RncmVzKGZ0KSxlKX1yZXR1cm4gSlNPTi5zdHJpbmdpZnkocil9XG5hKEdhLFwicHJlcGFyZU9iamVjdFwiKTtmdW5jdGlvbiBqKHIsZSl7Zm9yKHI9XCJcIityO3IubGVuZ3RoPGU7KXI9XCIwXCIrcjtyZXR1cm4gcn1hKFxuaixcInBhZFwiKTtmdW5jdGlvbiAkYShyKXt2YXIgZT0tci5nZXRUaW1lem9uZU9mZnNldCgpLHQ9ci5nZXRGdWxsWWVhcigpLG49dDwxO24mJlxuKHQ9TWF0aC5hYnModCkrMSk7dmFyIGk9aih0LDQpK1wiLVwiK2ooci5nZXRNb250aCgpKzEsMikrXCItXCIraihyLmdldERhdGUoKSwyKStcIlRcIitcbmooci5nZXRIb3VycygpLDIpK1wiOlwiK2ooci5nZXRNaW51dGVzKCksMikrXCI6XCIraihyLmdldFNlY29uZHMoKSwyKStcIi5cIitqKHIuZ2V0TWlsbGlzZWNvbmRzKCksXG4zKTtyZXR1cm4gZTwwPyhpKz1cIi1cIixlKj0tMSk6aSs9XCIrXCIsaSs9aihNYXRoLmZsb29yKGUvNjApLDIpK1wiOlwiK2ooZSU2MCwyKSxuJiYoaSs9XG5cIiBCQ1wiKSxpfWEoJGEsXCJkYXRlVG9TdHJpbmdcIik7ZnVuY3Rpb24gS2Eocil7dmFyIGU9ci5nZXRVVENGdWxsWWVhcigpLHQ9ZTwxO3QmJihlPVxuTWF0aC5hYnMoZSkrMSk7dmFyIG49aihlLDQpK1wiLVwiK2ooci5nZXRVVENNb250aCgpKzEsMikrXCItXCIraihyLmdldFVUQ0RhdGUoKSwyKStcIlxcXG5UXCIraihyLmdldFVUQ0hvdXJzKCksMikrXCI6XCIraihyLmdldFVUQ01pbnV0ZXMoKSwyKStcIjpcIitqKHIuZ2V0VVRDU2Vjb25kcygpLDIpK1wiLlwiK1xuaihyLmdldFVUQ01pbGxpc2Vjb25kcygpLDMpO3JldHVybiBuKz1cIiswMDowMFwiLHQmJihuKz1cIiBCQ1wiKSxufWEoS2EsXCJkYXRlVG9TdHJpblxcXG5nVVRDXCIpO2Z1bmN0aW9uIFZhKHIsZSx0KXtyZXR1cm4gcj10eXBlb2Ygcj09XCJzdHJpbmdcIj97dGV4dDpyfTpyLGUmJih0eXBlb2YgZT09XCJcXFxuZnVuY3Rpb25cIj9yLmNhbGxiYWNrPWU6ci52YWx1ZXM9ZSksdCYmKHIuY2FsbGJhY2s9dCkscn1hKFZhLFwibm9ybWFsaXplUXVlcnlDb25maVxcXG5nXCIpO3ZhciBadD1hKGZ1bmN0aW9uKHIpe3JldHVybiBXYS5jcmVhdGVIYXNoKFwibWQ1XCIpLnVwZGF0ZShyLFwidXRmLThcIikuZGlnZXN0KFwiaFxcXG5leFwiKX0sXCJtZDVcIiksemE9YShmdW5jdGlvbihyLGUsdCl7dmFyIG49WnQoZStyKSxpPVp0KGQuY29uY2F0KFtkLmZyb20obiksdF0pKTtyZXR1cm5cIlxcXG5tZDVcIitpfSxcInBvc3RncmVzTWQ1UGFzc3dvcmRIYXNoXCIpO01pLmV4cG9ydHM9e3ByZXBhcmVWYWx1ZTphKGZ1bmN0aW9uKGUpe3JldHVybiBmdChcbmUpfSxcInByZXBhcmVWYWx1ZVdyYXBwZXJcIiksbm9ybWFsaXplUXVlcnlDb25maWc6VmEscG9zdGdyZXNNZDVQYXNzd29yZEhhc2g6emEsbWQ1Olp0fX0pO3ZhciBxaT1JKChWaCxVaSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIEp0PShxdCgpLGsoVXQpKTtmdW5jdGlvbiBZYShyKXtpZihyLmluZGV4T2YoXG5cIlNDUkFNLVNIQS0yNTZcIik9PT0tMSl0aHJvdyBuZXcgRXJyb3IoXCJTQVNMOiBPbmx5IG1lY2hhbmlzbSBTQ1JBTS1TSEEtMjU2IGlzIGN1clxcXG5yZW50bHkgc3VwcG9ydGVkXCIpO2xldCBlPUp0LnJhbmRvbUJ5dGVzKDE4KS50b1N0cmluZyhcImJhc2U2NFwiKTtyZXR1cm57bWVjaGFuaXNtOlwiXFxcblNDUkFNLVNIQS0yNTZcIixjbGllbnROb25jZTplLHJlc3BvbnNlOlwibiwsbj0qLHI9XCIrZSxtZXNzYWdlOlwiU0FTTEluaXRpYWxSZXNwb25zZVwifX1cbmEoWWEsXCJzdGFydFNlc3Npb25cIik7ZnVuY3Rpb24gWmEocixlLHQpe2lmKHIubWVzc2FnZSE9PVwiU0FTTEluaXRpYWxSZXNwb25zZVwiKXRocm93IG5ldyBFcnJvcihcblwiU0FTTDogTGFzdCBtZXNzYWdlIHdhcyBub3QgU0FTTEluaXRpYWxSZXNwb25zZVwiKTtpZih0eXBlb2YgZSE9XCJzdHJpbmdcIil0aHJvdyBuZXcgRXJyb3IoXG5cIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBjbGllbnQgcGFzc3dvcmQgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZih0eXBlb2YgdCE9XG5cInN0cmluZ1wiKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBzZXJ2ZXJEYXRhIG11c3QgYmUgYVxcXG4gc3RyaW5nXCIpO2xldCBuPWV1KHQpO2lmKG4ubm9uY2Uuc3RhcnRzV2l0aChyLmNsaWVudE5vbmNlKSl7aWYobi5ub25jZS5sZW5ndGg9PT1cbnIuY2xpZW50Tm9uY2UubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBzZXJ2ZXIgblxcXG5vbmNlIGlzIHRvbyBzaG9ydFwiKX1lbHNlIHRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBzZXJ2XFxcbmVyIG5vbmNlIGRvZXMgbm90IHN0YXJ0IHdpdGggY2xpZW50IG5vbmNlXCIpO3ZhciBpPWQuZnJvbShuLnNhbHQsXCJiYXNlNjRcIikscz1udShlLFxuaSxuLml0ZXJhdGlvbiksbz1EZShzLFwiQ2xpZW50IEtleVwiKSx1PXJ1KG8pLGM9XCJuPSoscj1cIityLmNsaWVudE5vbmNlLGg9XCJyPVwiK24ubm9uY2UrXG5cIixzPVwiK24uc2FsdCtcIixpPVwiK24uaXRlcmF0aW9uLGw9XCJjPWJpd3Mscj1cIituLm5vbmNlLHk9YytcIixcIitoK1wiLFwiK2wsRT1EZSh1LHkpLF89a2koXG5vLEUpLFA9Xy50b1N0cmluZyhcImJhc2U2NFwiKSxOPURlKHMsXCJTZXJ2ZXIgS2V5XCIpLEo9RGUoTix5KTtyLm1lc3NhZ2U9XCJTQVNMUmVzcG9uXFxcbnNlXCIsci5zZXJ2ZXJTaWduYXR1cmU9Si50b1N0cmluZyhcImJhc2U2NFwiKSxyLnJlc3BvbnNlPWwrXCIscD1cIitQfWEoWmEsXCJjb250aW51ZVNlXFxcbnNzaW9uXCIpO2Z1bmN0aW9uIEphKHIsZSl7aWYoci5tZXNzYWdlIT09XCJTQVNMUmVzcG9uc2VcIil0aHJvdyBuZXcgRXJyb3IoXCJTQVNMOiBMYVxcXG5zdCBtZXNzYWdlIHdhcyBub3QgU0FTTFJlc3BvbnNlXCIpO2lmKHR5cGVvZiBlIT1cInN0cmluZ1wiKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNcXFxuQ1JBTS1TRVJWRVItRklOQUwtTUVTU0FHRTogc2VydmVyRGF0YSBtdXN0IGJlIGEgc3RyaW5nXCIpO2xldHtzZXJ2ZXJTaWduYXR1cmU6dH09dHUoXG5lKTtpZih0IT09ci5zZXJ2ZXJTaWduYXR1cmUpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJTkFMLU1FU1NBR0U6IHNcXFxuZXJ2ZXIgc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoXCIpfWEoSmEsXCJmaW5hbGl6ZVNlc3Npb25cIik7ZnVuY3Rpb24gWGEocil7aWYodHlwZW9mIHIhPVxuXCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiU0FTTDogdGV4dCBtdXN0IGJlIGEgc3RyaW5nXCIpO3JldHVybiByLnNwbGl0KFwiXCIpLm1hcChcbihlLHQpPT5yLmNoYXJDb2RlQXQodCkpLmV2ZXJ5KGU9PmU+PTMzJiZlPD00M3x8ZT49NDUmJmU8PTEyNil9YShYYSxcImlzUHJpbnRhYmxlQ1xcXG5oYXJzXCIpO2Z1bmN0aW9uIERpKHIpe3JldHVybi9eKD86W2EtekEtWjAtOSsvXXs0fSkqKD86W2EtekEtWjAtOSsvXXsyfT09fFthLXpBLVowLTkrL117M309KT8kLy5cbnRlc3Qocil9YShEaSxcImlzQmFzZTY0XCIpO2Z1bmN0aW9uIE9pKHIpe2lmKHR5cGVvZiByIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoXG5cIlNBU0w6IGF0dHJpYnV0ZSBwYWlycyB0ZXh0IG11c3QgYmUgYSBzdHJpbmdcIik7cmV0dXJuIG5ldyBNYXAoci5zcGxpdChcIixcIikubWFwKGU9PntcbmlmKCEvXi49Ly50ZXN0KGUpKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IEludmFsaWQgYXR0cmlidXRlIHBhaXIgZW50cnlcIik7bGV0IHQ9ZVswXSxcbm49ZS5zdWJzdHJpbmcoMik7cmV0dXJuW3Qsbl19KSl9YShPaSxcInBhcnNlQXR0cmlidXRlUGFpcnNcIik7ZnVuY3Rpb24gZXUocil7bGV0IGU9T2koXG5yKSx0PWUuZ2V0KFwiclwiKTtpZih0KXtpZighWGEodCkpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR1xcXG5FOiBub25jZSBtdXN0IG9ubHkgY29udGFpbiBwcmludGFibGUgY2hhcmFjdGVyc1wiKX1lbHNlIHRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDXFxcblJBTS1TRVJWRVItRklSU1QtTUVTU0FHRTogbm9uY2UgbWlzc2luZ1wiKTtsZXQgbj1lLmdldChcInNcIik7aWYobil7aWYoIURpKG4pKXRocm93IG5ldyBFcnJvcihcblwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR0U6IHNhbHQgbXVzdCBiZSBiYXNlNjRcIil9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJTXFxcbkFTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR0U6IHNhbHQgbWlzc2luZ1wiKTtsZXQgaT1lLmdldChcImlcIik7aWYoaSl7aWYoIS9eWzEtOV1bMC05XSokLy5cbnRlc3QoaSkpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR0U6IGludmFsaWQgaXRlcmF0aW9uIGNvdVxcXG5udFwiKX1lbHNlIHRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBpdGVyYXRpb24gbWlzc2luZ1wiKTtcbmxldCBzPXBhcnNlSW50KGksMTApO3JldHVybntub25jZTp0LHNhbHQ6bixpdGVyYXRpb246c319YShldSxcInBhcnNlU2VydmVyRmlyc3RNZVxcXG5zc2FnZVwiKTtmdW5jdGlvbiB0dShyKXtsZXQgdD1PaShyKS5nZXQoXCJ2XCIpO2lmKHQpe2lmKCFEaSh0KSl0aHJvdyBuZXcgRXJyb3IoXCJTQVNcXFxuTDogU0NSQU0tU0VSVkVSLUZJTkFMLU1FU1NBR0U6IHNlcnZlciBzaWduYXR1cmUgbXVzdCBiZSBiYXNlNjRcIil9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXG5cIlNBU0w6IFNDUkFNLVNFUlZFUi1GSU5BTC1NRVNTQUdFOiBzZXJ2ZXIgc2lnbmF0dXJlIGlzIG1pc3NpbmdcIik7cmV0dXJue3NlcnZlclNpZ25hdHVyZTp0fX1cbmEodHUsXCJwYXJzZVNlcnZlckZpbmFsTWVzc2FnZVwiKTtmdW5jdGlvbiBraShyLGUpe2lmKCFkLmlzQnVmZmVyKHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXG5cImZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXJcIik7aWYoIWQuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcInNlY29uZFxcXG4gYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlclwiKTtpZihyLmxlbmd0aCE9PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkJ1ZmZlciBsZW5nXFxcbnRocyBtdXN0IG1hdGNoXCIpO2lmKHIubGVuZ3RoPT09MCl0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXJzIGNhbm5vdCBiZSBlbXB0eVwiKTtyZXR1cm4gZC5cbmZyb20oci5tYXAoKHQsbik9PnJbbl1eZVtuXSkpfWEoa2ksXCJ4b3JCdWZmZXJzXCIpO2Z1bmN0aW9uIHJ1KHIpe3JldHVybiBKdC5jcmVhdGVIYXNoKFxuXCJzaGEyNTZcIikudXBkYXRlKHIpLmRpZ2VzdCgpfWEocnUsXCJzaGEyNTZcIik7ZnVuY3Rpb24gRGUocixlKXtyZXR1cm4gSnQuY3JlYXRlSG1hYyhcblwic2hhMjU2XCIscikudXBkYXRlKGUpLmRpZ2VzdCgpfWEoRGUsXCJobWFjU2hhMjU2XCIpO2Z1bmN0aW9uIG51KHIsZSx0KXtmb3IodmFyIG49RGUoXG5yLGQuY29uY2F0KFtlLGQuZnJvbShbMCwwLDAsMV0pXSkpLGk9bixzPTA7czx0LTE7cysrKW49RGUocixuKSxpPWtpKGksbik7cmV0dXJuIGl9XG5hKG51LFwiSGlcIik7VWkuZXhwb3J0cz17c3RhcnRTZXNzaW9uOllhLGNvbnRpbnVlU2Vzc2lvbjpaYSxmaW5hbGl6ZVNlc3Npb246SmF9fSk7dmFyIFh0PXt9O1goWHQse2pvaW46KCk9Pml1fSk7ZnVuY3Rpb24gaXUoLi4ucil7cmV0dXJuIHIuam9pbihcIi9cIil9dmFyIGVyPUsoKCk9PntcblwidXNlIHN0cmljdFwiO3AoKTthKGl1LFwiam9pblwiKX0pO3ZhciB0cj17fTtYKHRyLHtzdGF0OigpPT5zdX0pO2Z1bmN0aW9uIHN1KHIsZSl7ZShuZXcgRXJyb3IoXCJObyBmaWxlc3lzdGVtXCIpKX12YXIgcnI9SyhcbigpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO2Eoc3UsXCJzdGF0XCIpfSk7dmFyIG5yPXt9O1gobnIse2RlZmF1bHQ6KCk9Pm91fSk7dmFyIG91LGlyPUsoKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7b3U9e319KTt2YXIgTmk9e307WChOaSx7U3RyaW5nRGVjb2RlcjooKT0+c3J9KTt2YXIgb3Isc3IsUWk9SygoKT0+e1widXNlIHN0cmljdFwiO3AoKTtvcj1jbGFzcyBvcntjb25zdHJ1Y3RvcihlKXtcblQodGhpcyxcInRkXCIpO3RoaXMudGQ9bmV3IFRleHREZWNvZGVyKGUpfXdyaXRlKGUpe3JldHVybiB0aGlzLnRkLmRlY29kZShlLHtzdHJlYW06ITB9KX1lbmQoZSl7XG5yZXR1cm4gdGhpcy50ZC5kZWNvZGUoZSl9fTthKG9yLFwiU3RyaW5nRGVjb2RlclwiKTtzcj1vcn0pO3ZhciBHaT1JKChpbCxIaSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFye1RyYW5zZm9ybTphdX09KGlyKCksayhucikpLHtTdHJpbmdEZWNvZGVyOnV1fT0oUWkoKSxrKE5pKSksXG53ZT1TeW1ib2woXCJsYXN0XCIpLHB0PVN5bWJvbChcImRlY29kZXJcIik7ZnVuY3Rpb24gY3UocixlLHQpe2xldCBuO2lmKHRoaXMub3ZlcmZsb3cpe1xuaWYobj10aGlzW3B0XS53cml0ZShyKS5zcGxpdCh0aGlzLm1hdGNoZXIpLG4ubGVuZ3RoPT09MSlyZXR1cm4gdCgpO24uc2hpZnQoKSx0aGlzLlxub3ZlcmZsb3c9ITF9ZWxzZSB0aGlzW3dlXSs9dGhpc1twdF0ud3JpdGUociksbj10aGlzW3dlXS5zcGxpdCh0aGlzLm1hdGNoZXIpO3RoaXNbd2VdPVxubi5wb3AoKTtmb3IobGV0IGk9MDtpPG4ubGVuZ3RoO2krKyl0cnl7amkodGhpcyx0aGlzLm1hcHBlcihuW2ldKSl9Y2F0Y2gocyl7cmV0dXJuIHQoXG5zKX1pZih0aGlzLm92ZXJmbG93PXRoaXNbd2VdLmxlbmd0aD50aGlzLm1heExlbmd0aCx0aGlzLm92ZXJmbG93JiYhdGhpcy5za2lwT3ZlcmZsb3cpe1xudChuZXcgRXJyb3IoXCJtYXhpbXVtIGJ1ZmZlciByZWFjaGVkXCIpKTtyZXR1cm59dCgpfWEoY3UsXCJ0cmFuc2Zvcm1cIik7ZnVuY3Rpb24gaHUocil7XG5pZih0aGlzW3dlXSs9dGhpc1twdF0uZW5kKCksdGhpc1t3ZV0pdHJ5e2ppKHRoaXMsdGhpcy5tYXBwZXIodGhpc1t3ZV0pKX1jYXRjaChlKXtcbnJldHVybiByKGUpfXIoKX1hKGh1LFwiZmx1c2hcIik7ZnVuY3Rpb24gamkocixlKXtlIT09dm9pZCAwJiZyLnB1c2goZSl9YShqaSxcInB1c2hcIik7XG5mdW5jdGlvbiBXaShyKXtyZXR1cm4gcn1hKFdpLFwibm9vcFwiKTtmdW5jdGlvbiBsdShyLGUsdCl7c3dpdGNoKHI9cnx8L1xccj9cXG4vLGU9ZXx8XG5XaSx0PXR8fHt9LGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMTp0eXBlb2Ygcj09XCJmdW5jdGlvblwiPyhlPXIscj0vXFxyP1xcbi8pOnR5cGVvZiByPT1cblwib2JqZWN0XCImJiEociBpbnN0YW5jZW9mIFJlZ0V4cCkmJiFyW1N5bWJvbC5zcGxpdF0mJih0PXIscj0vXFxyP1xcbi8pO2JyZWFrO2Nhc2UgMjpcbnR5cGVvZiByPT1cImZ1bmN0aW9uXCI/KHQ9ZSxlPXIscj0vXFxyP1xcbi8pOnR5cGVvZiBlPT1cIm9iamVjdFwiJiYodD1lLGU9V2kpfXQ9T2JqZWN0LlxuYXNzaWduKHt9LHQpLHQuYXV0b0Rlc3Ryb3k9ITAsdC50cmFuc2Zvcm09Y3UsdC5mbHVzaD1odSx0LnJlYWRhYmxlT2JqZWN0TW9kZT0hMDtcbmxldCBuPW5ldyBhdSh0KTtyZXR1cm4gblt3ZV09XCJcIixuW3B0XT1uZXcgdXUoXCJ1dGY4XCIpLG4ubWF0Y2hlcj1yLG4ubWFwcGVyPWUsbi5tYXhMZW5ndGg9XG50Lm1heExlbmd0aCxuLnNraXBPdmVyZmxvdz10LnNraXBPdmVyZmxvd3x8ITEsbi5vdmVyZmxvdz0hMSxuLl9kZXN0cm95PWZ1bmN0aW9uKGkscyl7XG50aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD0hMSxzKGkpfSxufWEobHUsXCJzcGxpdFwiKTtIaS5leHBvcnRzPWx1fSk7dmFyIFZpPUkoKGFsLGZlKT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgJGk9KGVyKCksayhYdCkpLGZ1PShpcigpLGsobnIpKS5TdHJlYW0scHU9R2koKSxcbktpPShHZSgpLGsoSGUpKSxkdT01NDMyLGR0PW0ucGxhdGZvcm09PT1cIndpbjMyXCIscnQ9bS5zdGRlcnIseXU9NTYsbXU9NyxndT02MTQ0MCxcbnd1PTMyNzY4O2Z1bmN0aW9uIGJ1KHIpe3JldHVybihyJmd1KT09d3V9YShidSxcImlzUmVnRmlsZVwiKTt2YXIgT2U9W1wiaG9zdFwiLFwicG9ydFwiLFxuXCJkYXRhYmFzZVwiLFwidXNlclwiLFwicGFzc3dvcmRcIl0sYXI9T2UubGVuZ3RoLFN1PU9lW2FyLTFdO2Z1bmN0aW9uIHVyKCl7dmFyIHI9cnQgaW5zdGFuY2VvZlxuZnUmJnJ0LndyaXRhYmxlPT09ITA7aWYocil7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5jb25jYXQoYFxuYCk7cnQud3JpdGUoS2kuZm9ybWF0LmFwcGx5KEtpLGUpKX19YSh1cixcIndhcm5cIik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGZlLmV4cG9ydHMsXG5cImlzV2luXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBkdH0sc2V0OmZ1bmN0aW9uKHIpe2R0PXJ9fSk7ZmUuZXhwb3J0cy53YXJuVG89ZnVuY3Rpb24ocil7XG52YXIgZT1ydDtyZXR1cm4gcnQ9cixlfTtmZS5leHBvcnRzLmdldEZpbGVOYW1lPWZ1bmN0aW9uKHIpe3ZhciBlPXJ8fG0uZW52LHQ9ZS5QR1BBU1NGSUxFfHxcbihkdD8kaS5qb2luKGUuQVBQREFUQXx8XCIuL1wiLFwicG9zdGdyZXNxbFwiLFwicGdwYXNzLmNvbmZcIik6JGkuam9pbihlLkhPTUV8fFwiLi9cIixcIi5wXFxcbmdwYXNzXCIpKTtyZXR1cm4gdH07ZmUuZXhwb3J0cy51c2VQZ1Bhc3M9ZnVuY3Rpb24ocixlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5cbmNhbGwobS5lbnYsXCJQR1BBU1NXT1JEXCIpPyExOmR0PyEwOihlPWV8fFwiPHVua24+XCIsYnUoci5tb2RlKT9yLm1vZGUmKHl1fG11KT8odXIoJ1xcXG5XQVJOSU5HOiBwYXNzd29yZCBmaWxlIFwiJXNcIiBoYXMgZ3JvdXAgb3Igd29ybGQgYWNjZXNzOyBwZXJtaXNzaW9ucyBzaG91bGQgYmUgdT1yXFxcbncgKDA2MDApIG9yIGxlc3MnLGUpLCExKTohMDoodXIoJ1dBUk5JTkc6IHBhc3N3b3JkIGZpbGUgXCIlc1wiIGlzIG5vdCBhIHBsYWluIGZpbGUnLFxuZSksITEpKX07dmFyIHh1PWZlLmV4cG9ydHMubWF0Y2g9ZnVuY3Rpb24ocixlKXtyZXR1cm4gT2Uuc2xpY2UoMCwtMSkucmVkdWNlKGZ1bmN0aW9uKHQsbixpKXtcbnJldHVybiBpPT0xJiZOdW1iZXIocltuXXx8ZHUpPT09TnVtYmVyKGVbbl0pP3QmJiEwOnQmJihlW25dPT09XCIqXCJ8fGVbbl09PT1yW25dKX0sXG4hMCl9O2ZlLmV4cG9ydHMuZ2V0UGFzc3dvcmQ9ZnVuY3Rpb24ocixlLHQpe3ZhciBuLGk9ZS5waXBlKHB1KCkpO2Z1bmN0aW9uIHMoYyl7dmFyIGg9RXUoXG5jKTtoJiZ2dShoKSYmeHUocixoKSYmKG49aFtTdV0saS5lbmQoKSl9YShzLFwib25MaW5lXCIpO3ZhciBvPWEoZnVuY3Rpb24oKXtlLmRlc3Ryb3koKSxcbnQobil9LFwib25FbmRcIiksdT1hKGZ1bmN0aW9uKGMpe2UuZGVzdHJveSgpLHVyKFwiV0FSTklORzogZXJyb3Igb24gcmVhZGluZyBmaWxlOiAlXFxcbnNcIixjKSx0KHZvaWQgMCl9LFwib25FcnJcIik7ZS5vbihcImVycm9yXCIsdSksaS5vbihcImRhdGFcIixzKS5vbihcImVuZFwiLG8pLm9uKFwiZXJyb3JcIixcbnUpfTt2YXIgRXU9ZmUuZXhwb3J0cy5wYXJzZUxpbmU9ZnVuY3Rpb24ocil7aWYoci5sZW5ndGg8MTF8fHIubWF0Y2goL15cXHMrIy8pKXJldHVybiBudWxsO1xuZm9yKHZhciBlPVwiXCIsdD1cIlwiLG49MCxpPTAscz0wLG89e30sdT0hMSxjPWEoZnVuY3Rpb24obCx5LEUpe3ZhciBfPXIuc3Vic3RyaW5nKHksXG5FKTtPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLmVudixcIlBHUEFTU19OT19ERUVTQ0FQRVwiKXx8KF89Xy5yZXBsYWNlKC9cXFxcKFs6XFxcXF0pL2csXG5cIiQxXCIpKSxvW09lW2xdXT1ffSxcImFkZFRvT2JqXCIpLGg9MDtoPHIubGVuZ3RoLTE7aCs9MSl7aWYoZT1yLmNoYXJBdChoKzEpLHQ9ci5jaGFyQXQoXG5oKSx1PW49PWFyLTEsdSl7YyhuLGkpO2JyZWFrfWg+PTAmJmU9PVwiOlwiJiZ0IT09XCJcXFxcXCImJihjKG4saSxoKzEpLGk9aCsyLG4rPTEpfXJldHVybiBvPVxuT2JqZWN0LmtleXMobykubGVuZ3RoPT09YXI/bzpudWxsLG99LHZ1PWZlLmV4cG9ydHMuaXNWYWxpZEVudHJ5PWZ1bmN0aW9uKHIpe2Zvcih2YXIgZT17XG4wOmZ1bmN0aW9uKG8pe3JldHVybiBvLmxlbmd0aD4wfSwxOmZ1bmN0aW9uKG8pe3JldHVybiBvPT09XCIqXCI/ITA6KG89TnVtYmVyKG8pLGlzRmluaXRlKFxubykmJm8+MCYmbzw5MDA3MTk5MjU0NzQwOTkyJiZNYXRoLmZsb29yKG8pPT09byl9LDI6ZnVuY3Rpb24obyl7cmV0dXJuIG8ubGVuZ3RoPjB9LFxuMzpmdW5jdGlvbihvKXtyZXR1cm4gby5sZW5ndGg+MH0sNDpmdW5jdGlvbihvKXtyZXR1cm4gby5sZW5ndGg+MH19LHQ9MDt0PE9lLmxlbmd0aDt0Kz1cbjEpe3ZhciBuPWVbdF0saT1yW09lW3RdXXx8XCJcIixzPW4oaSk7aWYoIXMpcmV0dXJuITF9cmV0dXJuITB9fSk7dmFyIFlpPUkoKGxsLGNyKT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgaGw9KGVyKCksayhYdCkpLHppPShycigpLGsodHIpKSx5dD1WaSgpO1xuY3IuZXhwb3J0cz1mdW5jdGlvbihyLGUpe3ZhciB0PXl0LmdldEZpbGVOYW1lKCk7emkuc3RhdCh0LGZ1bmN0aW9uKG4saSl7aWYobnx8IXl0LlxudXNlUGdQYXNzKGksdCkpcmV0dXJuIGUodm9pZCAwKTt2YXIgcz16aS5jcmVhdGVSZWFkU3RyZWFtKHQpO3l0LmdldFBhc3N3b3JkKHIscyxcbmUpfSl9O2NyLmV4cG9ydHMud2FyblRvPXl0Lndhcm5Ub30pO3ZhciBocj1JKChwbCxaaSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIF91PVhlKCk7ZnVuY3Rpb24gbXQocil7dGhpcy5fdHlwZXM9cnx8X3UsXG50aGlzLnRleHQ9e30sdGhpcy5iaW5hcnk9e319YShtdCxcIlR5cGVPdmVycmlkZXNcIik7bXQucHJvdG90eXBlLmdldE92ZXJyaWRlcz1mdW5jdGlvbihyKXtcbnN3aXRjaChyKXtjYXNlXCJ0ZXh0XCI6cmV0dXJuIHRoaXMudGV4dDtjYXNlXCJiaW5hcnlcIjpyZXR1cm4gdGhpcy5iaW5hcnk7ZGVmYXVsdDpyZXR1cm57fX19O1xubXQucHJvdG90eXBlLnNldFR5cGVQYXJzZXI9ZnVuY3Rpb24ocixlLHQpe3R5cGVvZiBlPT1cImZ1bmN0aW9uXCImJih0PWUsZT1cInRleHRcIiksXG50aGlzLmdldE92ZXJyaWRlcyhlKVtyXT10fTttdC5wcm90b3R5cGUuZ2V0VHlwZVBhcnNlcj1mdW5jdGlvbihyLGUpe3JldHVybiBlPWV8fFxuXCJ0ZXh0XCIsdGhpcy5nZXRPdmVycmlkZXMoZSlbcl18fHRoaXMuX3R5cGVzLmdldFR5cGVQYXJzZXIocixlKX07WmkuZXhwb3J0cz1tdH0pO3ZhciBKaT17fTtYKEppLHtkZWZhdWx0OigpPT5BdX0pO3ZhciBBdSxYaT1LKCgpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO0F1PXt9fSk7dmFyIGVzPXt9O1goZXMse3BhcnNlOigpPT5scn0pO2Z1bmN0aW9uIGxyKHIsZT0hMSl7bGV0e3Byb3RvY29sOnR9PW5ldyBVUkwociksbj1cIlxcXG5odHRwOlwiK3Iuc3Vic3RyaW5nKHQubGVuZ3RoKSx7dXNlcm5hbWU6aSxwYXNzd29yZDpzLGhvc3Q6byxob3N0bmFtZTp1LHBvcnQ6YyxwYXRobmFtZTpoLFxuc2VhcmNoOmwsc2VhcmNoUGFyYW1zOnksaGFzaDpFfT1uZXcgVVJMKG4pO3M9ZGVjb2RlVVJJQ29tcG9uZW50KHMpO2xldCBfPWkrXCI6XCIrcyxcblA9ZT9PYmplY3QuZnJvbUVudHJpZXMoeS5lbnRyaWVzKCkpOmw7cmV0dXJue2hyZWY6cixwcm90b2NvbDp0LGF1dGg6Xyx1c2VybmFtZTppLFxucGFzc3dvcmQ6cyxob3N0Om8saG9zdG5hbWU6dSxwb3J0OmMscGF0aG5hbWU6aCxzZWFyY2g6bCxxdWVyeTpQLGhhc2g6RX19dmFyIGZyPUsoXG4oKT0+e1widXNlIHN0cmljdFwiO3AoKTthKGxyLFwicGFyc2VcIil9KTt2YXIgcnM9SSgoYmwsdHMpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBDdT0oZnIoKSxrKGVzKSkscHI9KHJyKCksayh0cikpO2Z1bmN0aW9uIGRyKHIpe1xuaWYoci5jaGFyQXQoMCk9PT1cIi9cIil7dmFyIHQ9ci5zcGxpdChcIiBcIik7cmV0dXJue2hvc3Q6dFswXSxkYXRhYmFzZTp0WzFdfX12YXIgZT1DdS5cbnBhcnNlKC8gfCVbXmEtZjAtOV18JVthLWYwLTldW15hLWYwLTldL2kudGVzdChyKT9lbmNvZGVVUkkocikucmVwbGFjZSgvXFwlMjUoXFxkXFxkKS9nLFxuXCIlJDFcIik6ciwhMCksdD1lLnF1ZXJ5O2Zvcih2YXIgbiBpbiB0KUFycmF5LmlzQXJyYXkodFtuXSkmJih0W25dPXRbbl1bdFtuXS5sZW5ndGgtXG4xXSk7dmFyIGk9KGUuYXV0aHx8XCI6XCIpLnNwbGl0KFwiOlwiKTtpZih0LnVzZXI9aVswXSx0LnBhc3N3b3JkPWkuc3BsaWNlKDEpLmpvaW4oXCI6XCIpLFxudC5wb3J0PWUucG9ydCxlLnByb3RvY29sPT1cInNvY2tldDpcIilyZXR1cm4gdC5ob3N0PWRlY29kZVVSSShlLnBhdGhuYW1lKSx0LmRhdGFiYXNlPVxuZS5xdWVyeS5kYix0LmNsaWVudF9lbmNvZGluZz1lLnF1ZXJ5LmVuY29kaW5nLHQ7dC5ob3N0fHwodC5ob3N0PWUuaG9zdG5hbWUpO3ZhciBzPWUuXG5wYXRobmFtZTtpZighdC5ob3N0JiZzJiYvXiUyZi9pLnRlc3Qocykpe3ZhciBvPXMuc3BsaXQoXCIvXCIpO3QuaG9zdD1kZWNvZGVVUklDb21wb25lbnQoXG5vWzBdKSxzPW8uc3BsaWNlKDEpLmpvaW4oXCIvXCIpfXN3aXRjaChzJiZzLmNoYXJBdCgwKT09PVwiL1wiJiYocz1zLnNsaWNlKDEpfHxudWxsKSxcbnQuZGF0YWJhc2U9cyYmZGVjb2RlVVJJKHMpLCh0LnNzbD09PVwidHJ1ZVwifHx0LnNzbD09PVwiMVwiKSYmKHQuc3NsPSEwKSx0LnNzbD09PVwiMFwiJiZcbih0LnNzbD0hMSksKHQuc3NsY2VydHx8dC5zc2xrZXl8fHQuc3Nscm9vdGNlcnR8fHQuc3NsbW9kZSkmJih0LnNzbD17fSksdC5zc2xjZXJ0JiZcbih0LnNzbC5jZXJ0PXByLnJlYWRGaWxlU3luYyh0LnNzbGNlcnQpLnRvU3RyaW5nKCkpLHQuc3Nsa2V5JiYodC5zc2wua2V5PXByLnJlYWRGaWxlU3luYyhcbnQuc3Nsa2V5KS50b1N0cmluZygpKSx0LnNzbHJvb3RjZXJ0JiYodC5zc2wuY2E9cHIucmVhZEZpbGVTeW5jKHQuc3Nscm9vdGNlcnQpLnRvU3RyaW5nKCkpLFxudC5zc2xtb2RlKXtjYXNlXCJkaXNhYmxlXCI6e3Quc3NsPSExO2JyZWFrfWNhc2VcInByZWZlclwiOmNhc2VcInJlcXVpcmVcIjpjYXNlXCJ2ZXJpZnktXFxcbmNhXCI6Y2FzZVwidmVyaWZ5LWZ1bGxcIjpicmVhaztjYXNlXCJuby12ZXJpZnlcIjp7dC5zc2wucmVqZWN0VW5hdXRob3JpemVkPSExO2JyZWFrfX1cbnJldHVybiB0fWEoZHIsXCJwYXJzZVwiKTt0cy5leHBvcnRzPWRyO2RyLnBhcnNlPWRyfSk7dmFyIGd0PUkoKEVsLHNzKT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgSXU9KFhpKCksayhKaSkpLGlzPWV0KCksbnM9cnMoKS5wYXJzZSxWPWEoXG5mdW5jdGlvbihyLGUsdCl7cmV0dXJuIHQ9PT12b2lkIDA/dD1tLmVudltcIlBHXCIrci50b1VwcGVyQ2FzZSgpXTp0PT09ITF8fCh0PW0uZW52W3RdKSxcbmVbcl18fHR8fGlzW3JdfSxcInZhbFwiKSxUdT1hKGZ1bmN0aW9uKCl7c3dpdGNoKG0uZW52LlBHU1NMTU9ERSl7Y2FzZVwiZGlzYWJsZVwiOnJldHVybiExO2Nhc2VcIlxcXG5wcmVmZXJcIjpjYXNlXCJyZXF1aXJlXCI6Y2FzZVwidmVyaWZ5LWNhXCI6Y2FzZVwidmVyaWZ5LWZ1bGxcIjpyZXR1cm4hMDtjYXNlXCJuby12ZXJpZnlcIjpcbnJldHVybntyZWplY3RVbmF1dGhvcml6ZWQ6ITF9fXJldHVybiBpcy5zc2x9LFwicmVhZFNTTENvbmZpZ0Zyb21FbnZpcm9ubWVudFwiKSxrZT1hKFxuZnVuY3Rpb24ocil7cmV0dXJuXCInXCIrKFwiXCIrcikucmVwbGFjZSgvXFxcXC9nLFwiXFxcXFxcXFxcIikucmVwbGFjZSgvJy9nLFwiXFxcXCdcIikrXCInXCJ9LFwicXVvXFxcbnRlUGFyYW1WYWx1ZVwiKSxyZT1hKGZ1bmN0aW9uKHIsZSx0KXt2YXIgbj1lW3RdO24hPW51bGwmJnIucHVzaCh0K1wiPVwiK2tlKG4pKX0sXCJhZFxcXG5kXCIpLG1yPWNsYXNzIG1ye2NvbnN0cnVjdG9yKGUpe2U9dHlwZW9mIGU9PVwic3RyaW5nXCI/bnMoZSk6ZXx8e30sZS5jb25uZWN0aW9uU3RyaW5nJiZcbihlPU9iamVjdC5hc3NpZ24oe30sZSxucyhlLmNvbm5lY3Rpb25TdHJpbmcpKSksdGhpcy51c2VyPVYoXCJ1c2VyXCIsZSksdGhpcy5kYXRhYmFzZT1cblYoXCJkYXRhYmFzZVwiLGUpLHRoaXMuZGF0YWJhc2U9PT12b2lkIDAmJih0aGlzLmRhdGFiYXNlPXRoaXMudXNlciksdGhpcy5wb3J0PXBhcnNlSW50KFxuVihcInBvcnRcIixlKSwxMCksdGhpcy5ob3N0PVYoXCJob3N0XCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwYXNzd29yZFwiLHtjb25maWd1cmFibGU6ITAsXG5lbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLHZhbHVlOlYoXCJwYXNzd29yZFwiLGUpfSksdGhpcy5iaW5hcnk9VihcImJpbmFyeVwiLGUpLHRoaXMuXG5vcHRpb25zPVYoXCJvcHRpb25zXCIsZSksdGhpcy5zc2w9dHlwZW9mIGUuc3NsPlwidVwiP1R1KCk6ZS5zc2wsdHlwZW9mIHRoaXMuc3NsPT1cInN0XFxcbnJpbmdcIiYmdGhpcy5zc2w9PT1cInRydWVcIiYmKHRoaXMuc3NsPSEwKSx0aGlzLnNzbD09PVwibm8tdmVyaWZ5XCImJih0aGlzLnNzbD17cmVqZWN0VW5hdXRob3JpemVkOiExfSksXG50aGlzLnNzbCYmdGhpcy5zc2wua2V5JiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5zc2wsXCJrZXlcIix7ZW51bWVyYWJsZTohMX0pLHRoaXMuXG5jbGllbnRfZW5jb2Rpbmc9VihcImNsaWVudF9lbmNvZGluZ1wiLGUpLHRoaXMucmVwbGljYXRpb249VihcInJlcGxpY2F0aW9uXCIsZSksdGhpcy5cbmlzRG9tYWluU29ja2V0PSEodGhpcy5ob3N0fHxcIlwiKS5pbmRleE9mKFwiL1wiKSx0aGlzLmFwcGxpY2F0aW9uX25hbWU9VihcImFwcGxpY2F0aW9cXFxubl9uYW1lXCIsZSxcIlBHQVBQTkFNRVwiKSx0aGlzLmZhbGxiYWNrX2FwcGxpY2F0aW9uX25hbWU9VihcImZhbGxiYWNrX2FwcGxpY2F0aW9uX25hXFxcbm1lXCIsZSwhMSksdGhpcy5zdGF0ZW1lbnRfdGltZW91dD1WKFwic3RhdGVtZW50X3RpbWVvdXRcIixlLCExKSx0aGlzLmxvY2tfdGltZW91dD1WKFxuXCJsb2NrX3RpbWVvdXRcIixlLCExKSx0aGlzLmlkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0PVYoXCJpZGxlX2luX3RyYW5zYWNcXFxudGlvbl9zZXNzaW9uX3RpbWVvdXRcIixlLCExKSx0aGlzLnF1ZXJ5X3RpbWVvdXQ9VihcInF1ZXJ5X3RpbWVvdXRcIixlLCExKSxlLmNvbm5lY3Rpb25UaW1lb3V0TWlsbGlzPT09XG52b2lkIDA/dGhpcy5jb25uZWN0X3RpbWVvdXQ9bS5lbnYuUEdDT05ORUNUX1RJTUVPVVR8fDA6dGhpcy5jb25uZWN0X3RpbWVvdXQ9TWF0aC5cbmZsb29yKGUuY29ubmVjdGlvblRpbWVvdXRNaWxsaXMvMWUzKSxlLmtlZXBBbGl2ZT09PSExP3RoaXMua2VlcGFsaXZlcz0wOmUua2VlcEFsaXZlPT09XG4hMCYmKHRoaXMua2VlcGFsaXZlcz0xKSx0eXBlb2YgZS5rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXM9PVwibnVtYmVyXCImJih0aGlzLmtlZXBhbGl2ZXNfaWRsZT1cbk1hdGguZmxvb3IoZS5rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXMvMWUzKSl9Z2V0TGlicHFDb25uZWN0aW9uU3RyaW5nKGUpe3ZhciB0PVtdO1xucmUodCx0aGlzLFwidXNlclwiKSxyZSh0LHRoaXMsXCJwYXNzd29yZFwiKSxyZSh0LHRoaXMsXCJwb3J0XCIpLHJlKHQsdGhpcyxcImFwcGxpY2F0aW9uXFxcbl9uYW1lXCIpLHJlKHQsdGhpcyxcImZhbGxiYWNrX2FwcGxpY2F0aW9uX25hbWVcIikscmUodCx0aGlzLFwiY29ubmVjdF90aW1lb3V0XCIpLHJlKHQsXG50aGlzLFwib3B0aW9uc1wiKTt2YXIgbj10eXBlb2YgdGhpcy5zc2w9PVwib2JqZWN0XCI/dGhpcy5zc2w6dGhpcy5zc2w/e3NzbG1vZGU6dGhpcy5cbnNzbH06e307aWYocmUodCxuLFwic3NsbW9kZVwiKSxyZSh0LG4sXCJzc2xjYVwiKSxyZSh0LG4sXCJzc2xrZXlcIikscmUodCxuLFwic3NsY2VydFwiKSxcbnJlKHQsbixcInNzbHJvb3RjZXJ0XCIpLHRoaXMuZGF0YWJhc2UmJnQucHVzaChcImRibmFtZT1cIitrZSh0aGlzLmRhdGFiYXNlKSksdGhpcy5yZXBsaWNhdGlvbiYmXG50LnB1c2goXCJyZXBsaWNhdGlvbj1cIitrZSh0aGlzLnJlcGxpY2F0aW9uKSksdGhpcy5ob3N0JiZ0LnB1c2goXCJob3N0PVwiK2tlKHRoaXMuaG9zdCkpLFxudGhpcy5pc0RvbWFpblNvY2tldClyZXR1cm4gZShudWxsLHQuam9pbihcIiBcIikpO3RoaXMuY2xpZW50X2VuY29kaW5nJiZ0LnB1c2goXCJjbGlcXFxuZW50X2VuY29kaW5nPVwiK2tlKHRoaXMuY2xpZW50X2VuY29kaW5nKSksSXUubG9va3VwKHRoaXMuaG9zdCxmdW5jdGlvbihpLHMpe3JldHVybiBpP1xuZShpLG51bGwpOih0LnB1c2goXCJob3N0YWRkcj1cIitrZShzKSksZShudWxsLHQuam9pbihcIiBcIikpKX0pfX07YShtcixcIkNvbm5lY3Rpb25QYVxcXG5yYW1ldGVyc1wiKTt2YXIgeXI9bXI7c3MuZXhwb3J0cz15cn0pO3ZhciB1cz1JKChBbCxhcyk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIFB1PVhlKCksb3M9L14oW0EtWmEtel0rKSg/OiAoXFxkKykpPyg/OiAoXFxkKykpPy8sXG53cj1jbGFzcyB3cntjb25zdHJ1Y3RvcihlLHQpe3RoaXMuY29tbWFuZD1udWxsLHRoaXMucm93Q291bnQ9bnVsbCx0aGlzLm9pZD1udWxsLFxudGhpcy5yb3dzPVtdLHRoaXMuZmllbGRzPVtdLHRoaXMuX3BhcnNlcnM9dm9pZCAwLHRoaXMuX3R5cGVzPXQsdGhpcy5Sb3dDdG9yPW51bGwsXG50aGlzLnJvd0FzQXJyYXk9ZT09PVwiYXJyYXlcIix0aGlzLnJvd0FzQXJyYXkmJih0aGlzLnBhcnNlUm93PXRoaXMuX3BhcnNlUm93QXNBcnJheSl9YWRkQ29tbWFuZENvbXBsZXRlKGUpe1xudmFyIHQ7ZS50ZXh0P3Q9b3MuZXhlYyhlLnRleHQpOnQ9b3MuZXhlYyhlLmNvbW1hbmQpLHQmJih0aGlzLmNvbW1hbmQ9dFsxXSx0WzNdPyh0aGlzLlxub2lkPXBhcnNlSW50KHRbMl0sMTApLHRoaXMucm93Q291bnQ9cGFyc2VJbnQodFszXSwxMCkpOnRbMl0mJih0aGlzLnJvd0NvdW50PXBhcnNlSW50KFxudFsyXSwxMCkpKX1fcGFyc2VSb3dBc0FycmF5KGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZS5sZW5ndGgpLG49MCxpPWUubGVuZ3RoO248aTtuKyspe1xudmFyIHM9ZVtuXTtzIT09bnVsbD90W25dPXRoaXMuX3BhcnNlcnNbbl0ocyk6dFtuXT1udWxsfXJldHVybiB0fXBhcnNlUm93KGUpe2Zvcih2YXIgdD17fSxcbm49MCxpPWUubGVuZ3RoO248aTtuKyspe3ZhciBzPWVbbl0sbz10aGlzLmZpZWxkc1tuXS5uYW1lO3MhPT1udWxsP3Rbb109dGhpcy5fcGFyc2Vyc1tuXShcbnMpOnRbb109bnVsbH1yZXR1cm4gdH1hZGRSb3coZSl7dGhpcy5yb3dzLnB1c2goZSl9YWRkRmllbGRzKGUpe3RoaXMuZmllbGRzPWUsdGhpcy5cbmZpZWxkcy5sZW5ndGgmJih0aGlzLl9wYXJzZXJzPW5ldyBBcnJheShlLmxlbmd0aCkpO2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgbj1lW3RdO1xudGhpcy5fdHlwZXM/dGhpcy5fcGFyc2Vyc1t0XT10aGlzLl90eXBlcy5nZXRUeXBlUGFyc2VyKG4uZGF0YVR5cGVJRCxuLmZvcm1hdHx8XCJ0XFxcbmV4dFwiKTp0aGlzLl9wYXJzZXJzW3RdPVB1LmdldFR5cGVQYXJzZXIobi5kYXRhVHlwZUlELG4uZm9ybWF0fHxcInRleHRcIil9fX07YSh3cixcIlxcXG5SZXN1bHRcIik7dmFyIGdyPXdyO2FzLmV4cG9ydHM9Z3J9KTt2YXIgZnM9SSgoVGwsbHMpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhcntFdmVudEVtaXR0ZXI6QnV9PWdlKCksY3M9dXMoKSxocz10dCgpLFNyPWNsYXNzIFNyIGV4dGVuZHMgQnV7Y29uc3RydWN0b3IoZSx0LG4pe1xuc3VwZXIoKSxlPWhzLm5vcm1hbGl6ZVF1ZXJ5Q29uZmlnKGUsdCxuKSx0aGlzLnRleHQ9ZS50ZXh0LHRoaXMudmFsdWVzPWUudmFsdWVzLHRoaXMuXG5yb3dzPWUucm93cyx0aGlzLnR5cGVzPWUudHlwZXMsdGhpcy5uYW1lPWUubmFtZSx0aGlzLmJpbmFyeT1lLmJpbmFyeSx0aGlzLnBvcnRhbD1cbmUucG9ydGFsfHxcIlwiLHRoaXMuY2FsbGJhY2s9ZS5jYWxsYmFjayx0aGlzLl9yb3dNb2RlPWUucm93TW9kZSxtLmRvbWFpbiYmZS5jYWxsYmFjayYmXG4odGhpcy5jYWxsYmFjaz1tLmRvbWFpbi5iaW5kKGUuY2FsbGJhY2spKSx0aGlzLl9yZXN1bHQ9bmV3IGNzKHRoaXMuX3Jvd01vZGUsdGhpcy5cbnR5cGVzKSx0aGlzLl9yZXN1bHRzPXRoaXMuX3Jlc3VsdCx0aGlzLmlzUHJlcGFyZWRTdGF0ZW1lbnQ9ITEsdGhpcy5fY2FuY2VsZWREdWVUb0Vycm9yPVxuITEsdGhpcy5fcHJvbWlzZT1udWxsfXJlcXVpcmVzUHJlcGFyYXRpb24oKXtyZXR1cm4gdGhpcy5uYW1lfHx0aGlzLnJvd3M/ITA6IXRoaXMuXG50ZXh0fHwhdGhpcy52YWx1ZXM/ITE6dGhpcy52YWx1ZXMubGVuZ3RoPjB9X2NoZWNrRm9yTXVsdGlyb3coKXt0aGlzLl9yZXN1bHQuY29tbWFuZCYmXG4oQXJyYXkuaXNBcnJheSh0aGlzLl9yZXN1bHRzKXx8KHRoaXMuX3Jlc3VsdHM9W3RoaXMuX3Jlc3VsdF0pLHRoaXMuX3Jlc3VsdD1uZXcgY3MoXG50aGlzLl9yb3dNb2RlLHRoaXMudHlwZXMpLHRoaXMuX3Jlc3VsdHMucHVzaCh0aGlzLl9yZXN1bHQpKX1oYW5kbGVSb3dEZXNjcmlwdGlvbihlKXtcbnRoaXMuX2NoZWNrRm9yTXVsdGlyb3coKSx0aGlzLl9yZXN1bHQuYWRkRmllbGRzKGUuZmllbGRzKSx0aGlzLl9hY2N1bXVsYXRlUm93cz10aGlzLlxuY2FsbGJhY2t8fCF0aGlzLmxpc3RlbmVycyhcInJvd1wiKS5sZW5ndGh9aGFuZGxlRGF0YVJvdyhlKXtsZXQgdDtpZighdGhpcy5fY2FuY2VsZWREdWVUb0Vycm9yKXtcbnRyeXt0PXRoaXMuX3Jlc3VsdC5wYXJzZVJvdyhlLmZpZWxkcyl9Y2F0Y2gobil7dGhpcy5fY2FuY2VsZWREdWVUb0Vycm9yPW47cmV0dXJufVxudGhpcy5lbWl0KFwicm93XCIsdCx0aGlzLl9yZXN1bHQpLHRoaXMuX2FjY3VtdWxhdGVSb3dzJiZ0aGlzLl9yZXN1bHQuYWRkUm93KHQpfX1oYW5kbGVDb21tYW5kQ29tcGxldGUoZSx0KXtcbnRoaXMuX2NoZWNrRm9yTXVsdGlyb3coKSx0aGlzLl9yZXN1bHQuYWRkQ29tbWFuZENvbXBsZXRlKGUpLHRoaXMucm93cyYmdC5zeW5jKCl9aGFuZGxlRW1wdHlRdWVyeShlKXtcbnRoaXMucm93cyYmZS5zeW5jKCl9aGFuZGxlRXJyb3IoZSx0KXtpZih0aGlzLl9jYW5jZWxlZER1ZVRvRXJyb3ImJihlPXRoaXMuX2NhbmNlbGVkRHVlVG9FcnJvcixcbnRoaXMuX2NhbmNlbGVkRHVlVG9FcnJvcj0hMSksdGhpcy5jYWxsYmFjaylyZXR1cm4gdGhpcy5jYWxsYmFjayhlKTt0aGlzLmVtaXQoXCJlclxcXG5yb3JcIixlKX1oYW5kbGVSZWFkeUZvclF1ZXJ5KGUpe2lmKHRoaXMuX2NhbmNlbGVkRHVlVG9FcnJvcilyZXR1cm4gdGhpcy5oYW5kbGVFcnJvcihcbnRoaXMuX2NhbmNlbGVkRHVlVG9FcnJvcixlKTtpZih0aGlzLmNhbGxiYWNrKXRyeXt0aGlzLmNhbGxiYWNrKG51bGwsdGhpcy5fcmVzdWx0cyl9Y2F0Y2godCl7XG5tLm5leHRUaWNrKCgpPT57dGhyb3cgdH0pfXRoaXMuZW1pdChcImVuZFwiLHRoaXMuX3Jlc3VsdHMpfXN1Ym1pdChlKXtpZih0eXBlb2YgdGhpcy5cbnRleHQhPVwic3RyaW5nXCImJnR5cGVvZiB0aGlzLm5hbWUhPVwic3RyaW5nXCIpcmV0dXJuIG5ldyBFcnJvcihcIkEgcXVlcnkgbXVzdCBoYXZlIGVcXFxuaXRoZXIgdGV4dCBvciBhIG5hbWUuIFN1cHBseWluZyBuZWl0aGVyIGlzIHVuc3VwcG9ydGVkLlwiKTtsZXQgdD1lLnBhcnNlZFN0YXRlbWVudHNbdGhpcy5cbm5hbWVdO3JldHVybiB0aGlzLnRleHQmJnQmJnRoaXMudGV4dCE9PXQ/bmV3IEVycm9yKGBQcmVwYXJlZCBzdGF0ZW1lbnRzIG11c3QgYmUgXFxcbnVuaXF1ZSAtICcke3RoaXMubmFtZX0nIHdhcyB1c2VkIGZvciBhIGRpZmZlcmVudCBzdGF0ZW1lbnRgKTp0aGlzLnZhbHVlcyYmIUFycmF5LlxuaXNBcnJheSh0aGlzLnZhbHVlcyk/bmV3IEVycm9yKFwiUXVlcnkgdmFsdWVzIG11c3QgYmUgYW4gYXJyYXlcIik6KHRoaXMucmVxdWlyZXNQcmVwYXJhdGlvbigpP1xudGhpcy5wcmVwYXJlKGUpOmUucXVlcnkodGhpcy50ZXh0KSxudWxsKX1oYXNCZWVuUGFyc2VkKGUpe3JldHVybiB0aGlzLm5hbWUmJmUucGFyc2VkU3RhdGVtZW50c1t0aGlzLlxubmFtZV19aGFuZGxlUG9ydGFsU3VzcGVuZGVkKGUpe3RoaXMuX2dldFJvd3MoZSx0aGlzLnJvd3MpfV9nZXRSb3dzKGUsdCl7ZS5leGVjdXRlKFxue3BvcnRhbDp0aGlzLnBvcnRhbCxyb3dzOnR9KSx0P2UuZmx1c2goKTplLnN5bmMoKX1wcmVwYXJlKGUpe3RoaXMuaXNQcmVwYXJlZFN0YXRlbWVudD1cbiEwLHRoaXMuaGFzQmVlblBhcnNlZChlKXx8ZS5wYXJzZSh7dGV4dDp0aGlzLnRleHQsbmFtZTp0aGlzLm5hbWUsdHlwZXM6dGhpcy50eXBlc30pO1xudHJ5e2UuYmluZCh7cG9ydGFsOnRoaXMucG9ydGFsLHN0YXRlbWVudDp0aGlzLm5hbWUsdmFsdWVzOnRoaXMudmFsdWVzLGJpbmFyeTp0aGlzLlxuYmluYXJ5LHZhbHVlTWFwcGVyOmhzLnByZXBhcmVWYWx1ZX0pfWNhdGNoKHQpe3RoaXMuaGFuZGxlRXJyb3IodCxlKTtyZXR1cm59ZS5kZXNjcmliZShcbnt0eXBlOlwiUFwiLG5hbWU6dGhpcy5wb3J0YWx8fFwiXCJ9KSx0aGlzLl9nZXRSb3dzKGUsdGhpcy5yb3dzKX1oYW5kbGVDb3B5SW5SZXNwb25zZShlKXtcbmUuc2VuZENvcHlGYWlsKFwiTm8gc291cmNlIHN0cmVhbSBkZWZpbmVkXCIpfWhhbmRsZUNvcHlEYXRhKGUsdCl7fX07YShTcixcIlF1ZXJ5XCIpO1xudmFyIGJyPVNyO2xzLmV4cG9ydHM9YnJ9KTt2YXIgZHM9e307WChkcyx7U29ja2V0OigpPT5fZSxpc0lQOigpPT5MdX0pO2Z1bmN0aW9uIEx1KHIpe3JldHVybiAwfXZhciBwcyx4LF9lLFxud3Q9SygoKT0+e1widXNlIHN0cmljdFwiO3AoKTtwcz1XZShnZSgpLDEpO2EoTHUsXCJpc0lQXCIpO3g9Y2xhc3MgeCBleHRlbmRzIHBzLkV2ZW50RW1pdHRlcntjb25zdHJ1Y3Rvcigpe1xuc3VwZXIoLi4uYXJndW1lbnRzKTtUKHRoaXMsXCJvcHRzXCIse30pO1QodGhpcyxcImNvbm5lY3RpbmdcIiwhMSk7VCh0aGlzLFwicGVuZGluZ1wiLCEwKTtcblQodGhpcyxcIndyaXRhYmxlXCIsITApO1QodGhpcyxcImVuY3J5cHRlZFwiLCExKTtUKHRoaXMsXCJhdXRob3JpemVkXCIsITEpO1QodGhpcyxcImRlc1xcXG50cm95ZWRcIiwhMSk7VCh0aGlzLFwid3NcIixudWxsKTtUKHRoaXMsXCJ3cml0ZUJ1ZmZlclwiKTtUKHRoaXMsXCJ0bHNTdGF0ZVwiLDApO1QodGhpcyxcblwidGxzUmVhZFwiKTtUKHRoaXMsXCJ0bHNXcml0ZVwiKX1zdGF0aWMgZ2V0IHBvb2xRdWVyeVZpYUZldGNoKCl7cmV0dXJuIHgub3B0cy5wb29sUXVlcnlWaWFGZXRjaD8/XG54LmRlZmF1bHRzLnBvb2xRdWVyeVZpYUZldGNofXN0YXRpYyBzZXQgcG9vbFF1ZXJ5VmlhRmV0Y2godCl7eC5vcHRzLnBvb2xRdWVyeVZpYUZldGNoPVxudH1zdGF0aWMgZ2V0IGZldGNoRW5kcG9pbnQoKXtyZXR1cm4geC5vcHRzLmZldGNoRW5kcG9pbnQ/P3guZGVmYXVsdHMuZmV0Y2hFbmRwb2ludH1zdGF0aWMgc2V0IGZldGNoRW5kcG9pbnQodCl7XG54Lm9wdHMuZmV0Y2hFbmRwb2ludD10fXN0YXRpYyBnZXQgZmV0Y2hDb25uZWN0aW9uQ2FjaGUoKXtyZXR1cm4geC5vcHRzLmZldGNoQ29ubmVjdGlvbkNhY2hlPz9cbnguZGVmYXVsdHMuZmV0Y2hDb25uZWN0aW9uQ2FjaGV9c3RhdGljIHNldCBmZXRjaENvbm5lY3Rpb25DYWNoZSh0KXt4Lm9wdHMuZmV0Y2hDb25uZWN0aW9uQ2FjaGU9XG50fXN0YXRpYyBnZXQgZmV0Y2hGdW5jdGlvbigpe3JldHVybiB4Lm9wdHMuZmV0Y2hGdW5jdGlvbj8/eC5kZWZhdWx0cy5mZXRjaEZ1bmN0aW9ufXN0YXRpYyBzZXQgZmV0Y2hGdW5jdGlvbih0KXtcbngub3B0cy5mZXRjaEZ1bmN0aW9uPXR9c3RhdGljIGdldCB3ZWJTb2NrZXRDb25zdHJ1Y3Rvcigpe3JldHVybiB4Lm9wdHMud2ViU29ja2V0Q29uc3RydWN0b3I/P1xueC5kZWZhdWx0cy53ZWJTb2NrZXRDb25zdHJ1Y3Rvcn1zdGF0aWMgc2V0IHdlYlNvY2tldENvbnN0cnVjdG9yKHQpe3gub3B0cy53ZWJTb2NrZXRDb25zdHJ1Y3Rvcj1cbnR9Z2V0IHdlYlNvY2tldENvbnN0cnVjdG9yKCl7cmV0dXJuIHRoaXMub3B0cy53ZWJTb2NrZXRDb25zdHJ1Y3Rvcj8/eC53ZWJTb2NrZXRDb25zdHJ1Y3Rvcn1zZXQgd2ViU29ja2V0Q29uc3RydWN0b3IodCl7XG50aGlzLm9wdHMud2ViU29ja2V0Q29uc3RydWN0b3I9dH1zdGF0aWMgZ2V0IHdzUHJveHkoKXtyZXR1cm4geC5vcHRzLndzUHJveHk/P3guZGVmYXVsdHMuXG53c1Byb3h5fXN0YXRpYyBzZXQgd3NQcm94eSh0KXt4Lm9wdHMud3NQcm94eT10fWdldCB3c1Byb3h5KCl7cmV0dXJuIHRoaXMub3B0cy53c1Byb3h5Pz9cbngud3NQcm94eX1zZXQgd3NQcm94eSh0KXt0aGlzLm9wdHMud3NQcm94eT10fXN0YXRpYyBnZXQgY29hbGVzY2VXcml0ZXMoKXtyZXR1cm4geC5cbm9wdHMuY29hbGVzY2VXcml0ZXM/P3guZGVmYXVsdHMuY29hbGVzY2VXcml0ZXN9c3RhdGljIHNldCBjb2FsZXNjZVdyaXRlcyh0KXt4Lm9wdHMuXG5jb2FsZXNjZVdyaXRlcz10fWdldCBjb2FsZXNjZVdyaXRlcygpe3JldHVybiB0aGlzLm9wdHMuY29hbGVzY2VXcml0ZXM/P3guY29hbGVzY2VXcml0ZXN9c2V0IGNvYWxlc2NlV3JpdGVzKHQpe1xudGhpcy5vcHRzLmNvYWxlc2NlV3JpdGVzPXR9c3RhdGljIGdldCB1c2VTZWN1cmVXZWJTb2NrZXQoKXtyZXR1cm4geC5vcHRzLnVzZVNlY3VyZVdlYlNvY2tldD8/XG54LmRlZmF1bHRzLnVzZVNlY3VyZVdlYlNvY2tldH1zdGF0aWMgc2V0IHVzZVNlY3VyZVdlYlNvY2tldCh0KXt4Lm9wdHMudXNlU2VjdXJlV2ViU29ja2V0PVxudH1nZXQgdXNlU2VjdXJlV2ViU29ja2V0KCl7cmV0dXJuIHRoaXMub3B0cy51c2VTZWN1cmVXZWJTb2NrZXQ/P3gudXNlU2VjdXJlV2ViU29ja2V0fXNldCB1c2VTZWN1cmVXZWJTb2NrZXQodCl7XG50aGlzLm9wdHMudXNlU2VjdXJlV2ViU29ja2V0PXR9c3RhdGljIGdldCBmb3JjZURpc2FibGVQZ1NTTCgpe3JldHVybiB4Lm9wdHMuZm9yY2VEaXNhYmxlUGdTU0w/P1xueC5kZWZhdWx0cy5mb3JjZURpc2FibGVQZ1NTTH1zdGF0aWMgc2V0IGZvcmNlRGlzYWJsZVBnU1NMKHQpe3gub3B0cy5mb3JjZURpc2FibGVQZ1NTTD1cbnR9Z2V0IGZvcmNlRGlzYWJsZVBnU1NMKCl7cmV0dXJuIHRoaXMub3B0cy5mb3JjZURpc2FibGVQZ1NTTD8/eC5mb3JjZURpc2FibGVQZ1NTTH1zZXQgZm9yY2VEaXNhYmxlUGdTU0wodCl7XG50aGlzLm9wdHMuZm9yY2VEaXNhYmxlUGdTU0w9dH1zdGF0aWMgZ2V0IGRpc2FibGVTTkkoKXtyZXR1cm4geC5vcHRzLmRpc2FibGVTTkk/P1xueC5kZWZhdWx0cy5kaXNhYmxlU05JfXN0YXRpYyBzZXQgZGlzYWJsZVNOSSh0KXt4Lm9wdHMuZGlzYWJsZVNOST10fWdldCBkaXNhYmxlU05JKCl7XG5yZXR1cm4gdGhpcy5vcHRzLmRpc2FibGVTTkk/P3guZGlzYWJsZVNOSX1zZXQgZGlzYWJsZVNOSSh0KXt0aGlzLm9wdHMuZGlzYWJsZVNOST1cbnR9c3RhdGljIGdldCBwaXBlbGluZUNvbm5lY3QoKXtyZXR1cm4geC5vcHRzLnBpcGVsaW5lQ29ubmVjdD8/eC5kZWZhdWx0cy5waXBlbGluZUNvbm5lY3R9c3RhdGljIHNldCBwaXBlbGluZUNvbm5lY3QodCl7XG54Lm9wdHMucGlwZWxpbmVDb25uZWN0PXR9Z2V0IHBpcGVsaW5lQ29ubmVjdCgpe3JldHVybiB0aGlzLm9wdHMucGlwZWxpbmVDb25uZWN0Pz9cbngucGlwZWxpbmVDb25uZWN0fXNldCBwaXBlbGluZUNvbm5lY3QodCl7dGhpcy5vcHRzLnBpcGVsaW5lQ29ubmVjdD10fXN0YXRpYyBnZXQgc3VidGxzKCl7XG5yZXR1cm4geC5vcHRzLnN1YnRscz8/eC5kZWZhdWx0cy5zdWJ0bHN9c3RhdGljIHNldCBzdWJ0bHModCl7eC5vcHRzLnN1YnRscz10fWdldCBzdWJ0bHMoKXtcbnJldHVybiB0aGlzLm9wdHMuc3VidGxzPz94LnN1YnRsc31zZXQgc3VidGxzKHQpe3RoaXMub3B0cy5zdWJ0bHM9dH1zdGF0aWMgZ2V0IHBpcGVsaW5lVExTKCl7XG5yZXR1cm4geC5vcHRzLnBpcGVsaW5lVExTPz94LmRlZmF1bHRzLnBpcGVsaW5lVExTfXN0YXRpYyBzZXQgcGlwZWxpbmVUTFModCl7eC5vcHRzLlxucGlwZWxpbmVUTFM9dH1nZXQgcGlwZWxpbmVUTFMoKXtyZXR1cm4gdGhpcy5vcHRzLnBpcGVsaW5lVExTPz94LnBpcGVsaW5lVExTfXNldCBwaXBlbGluZVRMUyh0KXtcbnRoaXMub3B0cy5waXBlbGluZVRMUz10fXN0YXRpYyBnZXQgcm9vdENlcnRzKCl7cmV0dXJuIHgub3B0cy5yb290Q2VydHM/P3guZGVmYXVsdHMuXG5yb290Q2VydHN9c3RhdGljIHNldCByb290Q2VydHModCl7eC5vcHRzLnJvb3RDZXJ0cz10fWdldCByb290Q2VydHMoKXtyZXR1cm4gdGhpcy5cbm9wdHMucm9vdENlcnRzPz94LnJvb3RDZXJ0c31zZXQgcm9vdENlcnRzKHQpe3RoaXMub3B0cy5yb290Q2VydHM9dH13c1Byb3h5QWRkckZvckhvc3QodCxuKXtcbmxldCBpPXRoaXMud3NQcm94eTtpZihpPT09dm9pZCAwKXRocm93IG5ldyBFcnJvcihcIk5vIFdlYlNvY2tldCBwcm94eSBpcyBjb25maWd1clxcXG5lZC4gUGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MvYmxvYi9tYWluL0NPTkZJRy5tZCN3c1xcXG5wcm94eS1zdHJpbmctLWhvc3Qtc3RyaW5nLXBvcnQtbnVtYmVyLS1zdHJpbmctLXN0cmluZ1wiKTtyZXR1cm4gdHlwZW9mIGk9PVwiZnVuY3RpXFxcbm9uXCI/aSh0LG4pOmAke2l9P2FkZHJlc3M9JHt0fToke259YH1zZXROb0RlbGF5KCl7cmV0dXJuIHRoaXN9c2V0S2VlcEFsaXZlKCl7cmV0dXJuIHRoaXN9cmVmKCl7XG5yZXR1cm4gdGhpc311bnJlZigpe3JldHVybiB0aGlzfWNvbm5lY3QodCxuLGkpe3RoaXMuY29ubmVjdGluZz0hMCxpJiZ0aGlzLm9uY2UoXCJcXFxuY29ubmVjdFwiLGkpO2xldCBzPWEoKCk9Pnt0aGlzLmNvbm5lY3Rpbmc9ITEsdGhpcy5wZW5kaW5nPSExLHRoaXMuZW1pdChcImNvbm5lY3RcIiksXG50aGlzLmVtaXQoXCJyZWFkeVwiKX0sXCJoYW5kbGVXZWJTb2NrZXRPcGVuXCIpLG89YSgoYyxoPSExKT0+e2MuYmluYXJ5VHlwZT1cImFycmF5YnVmXFxcbmZlclwiLGMuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsbD0+e3RoaXMuZW1pdChcImVycm9yXCIsbCksdGhpcy5lbWl0KFwiY2xvc2VcIil9KSxjLlxuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixsPT57aWYodGhpcy50bHNTdGF0ZT09PTApe2xldCB5PWQuZnJvbShsLmRhdGEpO3RoaXMuZW1pdChcblwiZGF0YVwiLHkpfX0pLGMuYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsKCk9Pnt0aGlzLmVtaXQoXCJjbG9zZVwiKX0pLGg/cygpOmMuYWRkRXZlbnRMaXN0ZW5lcihcblwib3BlblwiLHMpfSxcImNvbmZpZ3VyZVdlYlNvY2tldFwiKSx1O3RyeXt1PXRoaXMud3NQcm94eUFkZHJGb3JIb3N0KG4sdHlwZW9mIHQ9PVwic3RcXFxucmluZ1wiP3BhcnNlSW50KHQsMTApOnQpfWNhdGNoKGMpe3RoaXMuZW1pdChcImVycm9yXCIsYyksdGhpcy5lbWl0KFwiY2xvc2VcIik7cmV0dXJufVxudHJ5e2xldCBoPSh0aGlzLnVzZVNlY3VyZVdlYlNvY2tldD9cIndzczpcIjpcIndzOlwiKStcIi8vXCIrdTtpZih0aGlzLndlYlNvY2tldENvbnN0cnVjdG9yIT09XG52b2lkIDApdGhpcy53cz1uZXcgdGhpcy53ZWJTb2NrZXRDb25zdHJ1Y3RvcihoKSxvKHRoaXMud3MpO2Vsc2UgdHJ5e3RoaXMud3M9bmV3IFdlYlNvY2tldChcbmgpLG8odGhpcy53cyl9Y2F0Y2h7dGhpcy53cz1uZXcgX191bnN0YWJsZV9XZWJTb2NrZXQoaCksbyh0aGlzLndzKX19Y2F0Y2goYyl7bGV0IGw9KHRoaXMuXG51c2VTZWN1cmVXZWJTb2NrZXQ/XCJodHRwczpcIjpcImh0dHA6XCIpK1wiLy9cIit1O2ZldGNoKGwse2hlYWRlcnM6e1VwZ3JhZGU6XCJ3ZWJzb2NrZXRcIn19KS5cbnRoZW4oeT0+e2lmKHRoaXMud3M9eS53ZWJTb2NrZXQsdGhpcy53cz09bnVsbCl0aHJvdyBjO3RoaXMud3MuYWNjZXB0KCksbyh0aGlzLndzLFxuITApfSkuY2F0Y2goeT0+e3RoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKGBBbGwgYXR0ZW1wdHMgdG8gb3BlbiBhIFdlYlNvY2tldCB0b1xcXG4gY29ubmVjdCB0byB0aGUgZGF0YWJhc2UgZmFpbGVkLiBQbGVhc2UgcmVmZXIgdG8gaHR0cHM6Ly9naXRodWIuY29tL25lb25kYXRhYmFzZVxcXG4vc2VydmVybGVzcy9ibG9iL21haW4vQ09ORklHLm1kI3dlYnNvY2tldGNvbnN0cnVjdG9yLXR5cGVvZi13ZWJzb2NrZXQtLXVuZGVmaW5lZFxcXG4uIERldGFpbHM6ICR7eS5tZXNzYWdlfWApKSx0aGlzLmVtaXQoXCJjbG9zZVwiKX0pfX1hc3luYyBzdGFydFRscyh0KXtpZih0aGlzLnN1YnRscz09PVxudm9pZCAwKXRocm93IG5ldyBFcnJvcihcIkZvciBQb3N0Z3JlcyBTU0wgY29ubmVjdGlvbnMsIHlvdSBtdXN0IHNldCBgbmVvbkNvbmZpZy5zXFxcbnVidGxzYCB0byB0aGUgc3VidGxzIGxpYnJhcnkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MvYmxvXFxcbmIvbWFpbi9DT05GSUcubWQgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIpO3RoaXMudGxzU3RhdGU9MTtsZXQgbj10aGlzLnN1YnRscy5UcnVzdGVkQ2VydC5cbmZyb21QRU0odGhpcy5yb290Q2VydHMpLGk9bmV3IHRoaXMuc3VidGxzLldlYlNvY2tldFJlYWRRdWV1ZSh0aGlzLndzKSxzPWkucmVhZC5iaW5kKFxuaSksbz10aGlzLnJhd1dyaXRlLmJpbmQodGhpcyksW3UsY109YXdhaXQgdGhpcy5zdWJ0bHMuc3RhcnRUbHModCxuLHMsbyx7dXNlU05JOiF0aGlzLlxuZGlzYWJsZVNOSSxleHBlY3RQcmVEYXRhOnRoaXMucGlwZWxpbmVUTFM/bmV3IFVpbnQ4QXJyYXkoWzgzXSk6dm9pZCAwfSk7dGhpcy50bHNSZWFkPVxudSx0aGlzLnRsc1dyaXRlPWMsdGhpcy50bHNTdGF0ZT0yLHRoaXMuZW5jcnlwdGVkPSEwLHRoaXMuYXV0aG9yaXplZD0hMCx0aGlzLmVtaXQoXG5cInNlY3VyZUNvbm5lY3Rpb25cIix0aGlzKSx0aGlzLnRsc1JlYWRMb29wKCl9YXN5bmMgdGxzUmVhZExvb3AoKXtmb3IoOzspe2xldCB0PWF3YWl0IHRoaXMuXG50bHNSZWFkKCk7aWYodD09PXZvaWQgMClicmVhazt7bGV0IG49ZC5mcm9tKHQpO3RoaXMuZW1pdChcImRhdGFcIixuKX19fXJhd1dyaXRlKHQpe1xuaWYoIXRoaXMuY29hbGVzY2VXcml0ZXMpe3RoaXMud3Muc2VuZCh0KTtyZXR1cm59aWYodGhpcy53cml0ZUJ1ZmZlcj09PXZvaWQgMCl0aGlzLlxud3JpdGVCdWZmZXI9dCxzZXRUaW1lb3V0KCgpPT57dGhpcy53cy5zZW5kKHRoaXMud3JpdGVCdWZmZXIpLHRoaXMud3JpdGVCdWZmZXI9dm9pZCAwfSxcbjApO2Vsc2V7bGV0IG49bmV3IFVpbnQ4QXJyYXkodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgrdC5sZW5ndGgpO24uc2V0KHRoaXMud3JpdGVCdWZmZXIpLFxubi5zZXQodCx0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCksdGhpcy53cml0ZUJ1ZmZlcj1ufX13cml0ZSh0LG49XCJ1dGY4XCIsaT1zPT57fSl7cmV0dXJuIHQuXG5sZW5ndGg9PT0wPyhpKCksITApOih0eXBlb2YgdD09XCJzdHJpbmdcIiYmKHQ9ZC5mcm9tKHQsbikpLHRoaXMudGxzU3RhdGU9PT0wPyh0aGlzLlxucmF3V3JpdGUodCksaSgpKTp0aGlzLnRsc1N0YXRlPT09MT90aGlzLm9uY2UoXCJzZWN1cmVDb25uZWN0aW9uXCIsKCk9Pnt0aGlzLndyaXRlKFxudCxuLGkpfSk6KHRoaXMudGxzV3JpdGUodCksaSgpKSwhMCl9ZW5kKHQ9ZC5hbGxvYygwKSxuPVwidXRmOFwiLGk9KCk9Pnt9KXtyZXR1cm4gdGhpcy5cbndyaXRlKHQsbiwoKT0+e3RoaXMud3MuY2xvc2UoKSxpKCl9KSx0aGlzfWRlc3Ryb3koKXtyZXR1cm4gdGhpcy5kZXN0cm95ZWQ9ITAsdGhpcy5cbmVuZCgpfX07YSh4LFwiU29ja2V0XCIpLFQoeCxcImRlZmF1bHRzXCIse3Bvb2xRdWVyeVZpYUZldGNoOiExLGZldGNoRW5kcG9pbnQ6dD0+XCJodHRcXFxucHM6Ly9cIit0K1wiL3NxbFwiLGZldGNoQ29ubmVjdGlvbkNhY2hlOiExLGZldGNoRnVuY3Rpb246dm9pZCAwLHdlYlNvY2tldENvbnN0cnVjdG9yOnZvaWQgMCxcbndzUHJveHk6dD0+dCtcIi92MlwiLHVzZVNlY3VyZVdlYlNvY2tldDohMCxmb3JjZURpc2FibGVQZ1NTTDohMCxjb2FsZXNjZVdyaXRlczohMCxcbnBpcGVsaW5lQ29ubmVjdDpcInBhc3N3b3JkXCIsc3VidGxzOnZvaWQgMCxyb290Q2VydHM6XCJcIixwaXBlbGluZVRMUzohMSxkaXNhYmxlU05JOiExfSksXG5UKHgsXCJvcHRzXCIse30pO19lPXh9KTt2YXIgenI9SShDPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShDLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO0MuXG5Ob3RpY2VNZXNzYWdlPUMuRGF0YVJvd01lc3NhZ2U9Qy5Db21tYW5kQ29tcGxldGVNZXNzYWdlPUMuUmVhZHlGb3JRdWVyeU1lc3NhZ2U9Qy5cbk5vdGlmaWNhdGlvblJlc3BvbnNlTWVzc2FnZT1DLkJhY2tlbmRLZXlEYXRhTWVzc2FnZT1DLkF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmQ9XG5DLlBhcmFtZXRlclN0YXR1c01lc3NhZ2U9Qy5QYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2U9Qy5Sb3dEZXNjcmlwdGlvbk1lc3NhZ2U9Qy5cbkZpZWxkPUMuQ29weVJlc3BvbnNlPUMuQ29weURhdGFNZXNzYWdlPUMuRGF0YWJhc2VFcnJvcj1DLmNvcHlEb25lPUMuZW1wdHlRdWVyeT1DLlxucmVwbGljYXRpb25TdGFydD1DLnBvcnRhbFN1c3BlbmRlZD1DLm5vRGF0YT1DLmNsb3NlQ29tcGxldGU9Qy5iaW5kQ29tcGxldGU9Qy5wYXJzZUNvbXBsZXRlPVxudm9pZCAwO0MucGFyc2VDb21wbGV0ZT17bmFtZTpcInBhcnNlQ29tcGxldGVcIixsZW5ndGg6NX07Qy5iaW5kQ29tcGxldGU9e25hbWU6XCJiaW5cXFxuZENvbXBsZXRlXCIsbGVuZ3RoOjV9O0MuY2xvc2VDb21wbGV0ZT17bmFtZTpcImNsb3NlQ29tcGxldGVcIixsZW5ndGg6NX07Qy5ub0RhdGE9e25hbWU6XCJcXFxubm9EYXRhXCIsbGVuZ3RoOjV9O0MucG9ydGFsU3VzcGVuZGVkPXtuYW1lOlwicG9ydGFsU3VzcGVuZGVkXCIsbGVuZ3RoOjV9O0MucmVwbGljYXRpb25TdGFydD1cbntuYW1lOlwicmVwbGljYXRpb25TdGFydFwiLGxlbmd0aDo0fTtDLmVtcHR5UXVlcnk9e25hbWU6XCJlbXB0eVF1ZXJ5XCIsbGVuZ3RoOjR9O0MuY29weURvbmU9XG57bmFtZTpcImNvcHlEb25lXCIsbGVuZ3RoOjR9O3ZhciBEcj1jbGFzcyBEciBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUsdCxuKXtzdXBlcihcbmUpLHRoaXMubGVuZ3RoPXQsdGhpcy5uYW1lPW59fTthKERyLFwiRGF0YWJhc2VFcnJvclwiKTt2YXIgeHI9RHI7Qy5EYXRhYmFzZUVycm9yPXhyO1xudmFyIE9yPWNsYXNzIE9ye2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5sZW5ndGg9ZSx0aGlzLmNodW5rPXQsdGhpcy5uYW1lPVwiY29weURhdGFcIn19O1xuYShPcixcIkNvcHlEYXRhTWVzc2FnZVwiKTt2YXIgRXI9T3I7Qy5Db3B5RGF0YU1lc3NhZ2U9RXI7dmFyIGtyPWNsYXNzIGtye2NvbnN0cnVjdG9yKGUsdCxuLGkpe1xudGhpcy5sZW5ndGg9ZSx0aGlzLm5hbWU9dCx0aGlzLmJpbmFyeT1uLHRoaXMuY29sdW1uVHlwZXM9bmV3IEFycmF5KGkpfX07YShrcixcIkNvXFxcbnB5UmVzcG9uc2VcIik7dmFyIHZyPWtyO0MuQ29weVJlc3BvbnNlPXZyO3ZhciBVcj1jbGFzcyBVcntjb25zdHJ1Y3RvcihlLHQsbixpLHMsbyx1KXtcbnRoaXMubmFtZT1lLHRoaXMudGFibGVJRD10LHRoaXMuY29sdW1uSUQ9bix0aGlzLmRhdGFUeXBlSUQ9aSx0aGlzLmRhdGFUeXBlU2l6ZT1zLFxudGhpcy5kYXRhVHlwZU1vZGlmaWVyPW8sdGhpcy5mb3JtYXQ9dX19O2EoVXIsXCJGaWVsZFwiKTt2YXIgX3I9VXI7Qy5GaWVsZD1fcjt2YXIgcXI9Y2xhc3MgcXJ7Y29uc3RydWN0b3IoZSx0KXtcbnRoaXMubGVuZ3RoPWUsdGhpcy5maWVsZENvdW50PXQsdGhpcy5uYW1lPVwicm93RGVzY3JpcHRpb25cIix0aGlzLmZpZWxkcz1uZXcgQXJyYXkoXG50aGlzLmZpZWxkQ291bnQpfX07YShxcixcIlJvd0Rlc2NyaXB0aW9uTWVzc2FnZVwiKTt2YXIgQXI9cXI7Qy5Sb3dEZXNjcmlwdGlvbk1lc3NhZ2U9XG5Bcjt2YXIgTnI9Y2xhc3MgTnJ7Y29uc3RydWN0b3IoZSx0KXt0aGlzLmxlbmd0aD1lLHRoaXMucGFyYW1ldGVyQ291bnQ9dCx0aGlzLm5hbWU9XG5cInBhcmFtZXRlckRlc2NyaXB0aW9uXCIsdGhpcy5kYXRhVHlwZUlEcz1uZXcgQXJyYXkodGhpcy5wYXJhbWV0ZXJDb3VudCl9fTthKE5yLFwiUFxcXG5hcmFtZXRlckRlc2NyaXB0aW9uTWVzc2FnZVwiKTt2YXIgQ3I9TnI7Qy5QYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2U9Q3I7dmFyIFFyPWNsYXNzIFFye2NvbnN0cnVjdG9yKGUsdCxuKXtcbnRoaXMubGVuZ3RoPWUsdGhpcy5wYXJhbWV0ZXJOYW1lPXQsdGhpcy5wYXJhbWV0ZXJWYWx1ZT1uLHRoaXMubmFtZT1cInBhcmFtZXRlclN0YVxcXG50dXNcIn19O2EoUXIsXCJQYXJhbWV0ZXJTdGF0dXNNZXNzYWdlXCIpO3ZhciBJcj1RcjtDLlBhcmFtZXRlclN0YXR1c01lc3NhZ2U9SXI7dmFyIFdyPWNsYXNzIFdye2NvbnN0cnVjdG9yKGUsdCl7XG50aGlzLmxlbmd0aD1lLHRoaXMuc2FsdD10LHRoaXMubmFtZT1cImF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmRcIn19O2EoV3IsXCJBdXRoZW50aVxcXG5jYXRpb25NRDVQYXNzd29yZFwiKTt2YXIgVHI9V3I7Qy5BdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkPVRyO3ZhciBqcj1jbGFzcyBqcntjb25zdHJ1Y3RvcihlLHQsbil7XG50aGlzLmxlbmd0aD1lLHRoaXMucHJvY2Vzc0lEPXQsdGhpcy5zZWNyZXRLZXk9bix0aGlzLm5hbWU9XCJiYWNrZW5kS2V5RGF0YVwifX07YShqcixcblwiQmFja2VuZEtleURhdGFNZXNzYWdlXCIpO3ZhciBQcj1qcjtDLkJhY2tlbmRLZXlEYXRhTWVzc2FnZT1Qcjt2YXIgSHI9Y2xhc3MgSHJ7Y29uc3RydWN0b3IoZSx0LG4saSl7XG50aGlzLmxlbmd0aD1lLHRoaXMucHJvY2Vzc0lkPXQsdGhpcy5jaGFubmVsPW4sdGhpcy5wYXlsb2FkPWksdGhpcy5uYW1lPVwibm90aWZpY2FcXFxudGlvblwifX07YShIcixcIk5vdGlmaWNhdGlvblJlc3BvbnNlTWVzc2FnZVwiKTt2YXIgQnI9SHI7Qy5Ob3RpZmljYXRpb25SZXNwb25zZU1lc3NhZ2U9XG5Ccjt2YXIgR3I9Y2xhc3MgR3J7Y29uc3RydWN0b3IoZSx0KXt0aGlzLmxlbmd0aD1lLHRoaXMuc3RhdHVzPXQsdGhpcy5uYW1lPVwicmVhZHlcXFxuRm9yUXVlcnlcIn19O2EoR3IsXCJSZWFkeUZvclF1ZXJ5TWVzc2FnZVwiKTt2YXIgTHI9R3I7Qy5SZWFkeUZvclF1ZXJ5TWVzc2FnZT1Mcjt2YXIgJHI9Y2xhc3MgJHJ7Y29uc3RydWN0b3IoZSx0KXtcbnRoaXMubGVuZ3RoPWUsdGhpcy50ZXh0PXQsdGhpcy5uYW1lPVwiY29tbWFuZENvbXBsZXRlXCJ9fTthKCRyLFwiQ29tbWFuZENvbXBsZXRlTWVzXFxcbnNhZ2VcIik7dmFyIFJyPSRyO0MuQ29tbWFuZENvbXBsZXRlTWVzc2FnZT1Scjt2YXIgS3I9Y2xhc3MgS3J7Y29uc3RydWN0b3IoZSx0KXt0aGlzLlxubGVuZ3RoPWUsdGhpcy5maWVsZHM9dCx0aGlzLm5hbWU9XCJkYXRhUm93XCIsdGhpcy5maWVsZENvdW50PXQubGVuZ3RofX07YShLcixcIkRhdGFcXFxuUm93TWVzc2FnZVwiKTt2YXIgRnI9S3I7Qy5EYXRhUm93TWVzc2FnZT1Gcjt2YXIgVnI9Y2xhc3MgVnJ7Y29uc3RydWN0b3IoZSx0KXt0aGlzLlxubGVuZ3RoPWUsdGhpcy5tZXNzYWdlPXQsdGhpcy5uYW1lPVwibm90aWNlXCJ9fTthKFZyLFwiTm90aWNlTWVzc2FnZVwiKTt2YXIgTXI9VnI7Qy5Ob3RpY2VNZXNzYWdlPVxuTXJ9KTt2YXIgeXM9SShidD0+e1widXNlIHN0cmljdFwiO3AoKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYnQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG5idC5Xcml0ZXI9dm9pZCAwO3ZhciBacj1jbGFzcyBacntjb25zdHJ1Y3RvcihlPTI1Nil7dGhpcy5zaXplPWUsdGhpcy5vZmZzZXQ9NSx0aGlzLlxuaGVhZGVyUG9zaXRpb249MCx0aGlzLmJ1ZmZlcj1kLmFsbG9jVW5zYWZlKGUpfWVuc3VyZShlKXt2YXIgdD10aGlzLmJ1ZmZlci5sZW5ndGgtXG50aGlzLm9mZnNldDtpZih0PGUpe3ZhciBuPXRoaXMuYnVmZmVyLGk9bi5sZW5ndGgrKG4ubGVuZ3RoPj4xKStlO3RoaXMuYnVmZmVyPWQuYWxsb2NVbnNhZmUoXG5pKSxuLmNvcHkodGhpcy5idWZmZXIpfX1hZGRJbnQzMihlKXtyZXR1cm4gdGhpcy5lbnN1cmUoNCksdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK109XG5lPj4+MjQmMjU1LHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdPWU+Pj4xNiYyNTUsdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK109ZT4+PlxuOCYyNTUsdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK109ZT4+PjAmMjU1LHRoaXN9YWRkSW50MTYoZSl7cmV0dXJuIHRoaXMuZW5zdXJlKDIpLFxudGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK109ZT4+PjgmMjU1LHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdPWU+Pj4wJjI1NSx0aGlzfWFkZENTdHJpbmcoZSl7XG5pZighZSl0aGlzLmVuc3VyZSgxKTtlbHNle3ZhciB0PWQuYnl0ZUxlbmd0aChlKTt0aGlzLmVuc3VyZSh0KzEpLHRoaXMuYnVmZmVyLndyaXRlKFxuZSx0aGlzLm9mZnNldCxcInV0Zi04XCIpLHRoaXMub2Zmc2V0Kz10fXJldHVybiB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXT0wLHRoaXN9YWRkU3RyaW5nKGU9XCJcIil7XG52YXIgdD1kLmJ5dGVMZW5ndGgoZSk7cmV0dXJuIHRoaXMuZW5zdXJlKHQpLHRoaXMuYnVmZmVyLndyaXRlKGUsdGhpcy5vZmZzZXQpLHRoaXMuXG5vZmZzZXQrPXQsdGhpc31hZGQoZSl7cmV0dXJuIHRoaXMuZW5zdXJlKGUubGVuZ3RoKSxlLmNvcHkodGhpcy5idWZmZXIsdGhpcy5vZmZzZXQpLFxudGhpcy5vZmZzZXQrPWUubGVuZ3RoLHRoaXN9am9pbihlKXtpZihlKXt0aGlzLmJ1ZmZlclt0aGlzLmhlYWRlclBvc2l0aW9uXT1lO2xldCB0PXRoaXMuXG5vZmZzZXQtKHRoaXMuaGVhZGVyUG9zaXRpb24rMSk7dGhpcy5idWZmZXIud3JpdGVJbnQzMkJFKHQsdGhpcy5oZWFkZXJQb3NpdGlvbisxKX1cbnJldHVybiB0aGlzLmJ1ZmZlci5zbGljZShlPzA6NSx0aGlzLm9mZnNldCl9Zmx1c2goZSl7dmFyIHQ9dGhpcy5qb2luKGUpO3JldHVybiB0aGlzLlxub2Zmc2V0PTUsdGhpcy5oZWFkZXJQb3NpdGlvbj0wLHRoaXMuYnVmZmVyPWQuYWxsb2NVbnNhZmUodGhpcy5zaXplKSx0fX07YShacixcIldyXFxcbml0ZXJcIik7dmFyIFlyPVpyO2J0LldyaXRlcj1Zcn0pO3ZhciBncz1JKHh0PT57XCJ1c2Ugc3RyaWN0XCI7cCgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh4dCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnh0LnNlcmlhbGl6ZT12b2lkIDA7dmFyIEpyPXlzKCksRj1uZXcgSnIuV3JpdGVyLFJ1PWEocj0+e0YuYWRkSW50MTYoMykuYWRkSW50MTYoXG4wKTtmb3IobGV0IG4gb2YgT2JqZWN0LmtleXMocikpRi5hZGRDU3RyaW5nKG4pLmFkZENTdHJpbmcocltuXSk7Ri5hZGRDU3RyaW5nKFwiY2xcXFxuaWVudF9lbmNvZGluZ1wiKS5hZGRDU3RyaW5nKFwiVVRGOFwiKTt2YXIgZT1GLmFkZENTdHJpbmcoXCJcIikuZmx1c2goKSx0PWUubGVuZ3RoKzQ7cmV0dXJuIG5ldyBKci5cbldyaXRlcigpLmFkZEludDMyKHQpLmFkZChlKS5mbHVzaCgpfSxcInN0YXJ0dXBcIiksRnU9YSgoKT0+e2xldCByPWQuYWxsb2NVbnNhZmUoOCk7XG5yZXR1cm4gci53cml0ZUludDMyQkUoOCwwKSxyLndyaXRlSW50MzJCRSg4MDg3NzEwMyw0KSxyfSxcInJlcXVlc3RTc2xcIiksTXU9YShyPT5GLlxuYWRkQ1N0cmluZyhyKS5mbHVzaCgxMTIpLFwicGFzc3dvcmRcIiksRHU9YShmdW5jdGlvbihyLGUpe3JldHVybiBGLmFkZENTdHJpbmcocikuYWRkSW50MzIoXG5kLmJ5dGVMZW5ndGgoZSkpLmFkZFN0cmluZyhlKSxGLmZsdXNoKDExMil9LFwic2VuZFNBU0xJbml0aWFsUmVzcG9uc2VNZXNzYWdlXCIpLE91PWEoXG5mdW5jdGlvbihyKXtyZXR1cm4gRi5hZGRTdHJpbmcocikuZmx1c2goMTEyKX0sXCJzZW5kU0NSQU1DbGllbnRGaW5hbE1lc3NhZ2VcIiksa3U9YShcbnI9PkYuYWRkQ1N0cmluZyhyKS5mbHVzaCg4MSksXCJxdWVyeVwiKSxtcz1bXSxVdT1hKHI9PntsZXQgZT1yLm5hbWV8fFwiXCI7ZS5sZW5ndGg+NjMmJlxuKGNvbnNvbGUuZXJyb3IoXCJXYXJuaW5nISBQb3N0Z3JlcyBvbmx5IHN1cHBvcnRzIDYzIGNoYXJhY3RlcnMgZm9yIHF1ZXJ5IG5hbWVzLlwiKSxcbmNvbnNvbGUuZXJyb3IoXCJZb3Ugc3VwcGxpZWQgJXMgKCVzKVwiLGUsZS5sZW5ndGgpLGNvbnNvbGUuZXJyb3IoXCJUaGlzIGNhbiBjYXVzZSBjXFxcbm9uZmxpY3RzIGFuZCBzaWxlbnQgZXJyb3JzIGV4ZWN1dGluZyBxdWVyaWVzXCIpKTtsZXQgdD1yLnR5cGVzfHxtcztmb3IodmFyIG49dC5sZW5ndGgsXG5pPUYuYWRkQ1N0cmluZyhlKS5hZGRDU3RyaW5nKHIudGV4dCkuYWRkSW50MTYobikscz0wO3M8bjtzKyspaS5hZGRJbnQzMih0W3NdKTtyZXR1cm4gRi5cbmZsdXNoKDgwKX0sXCJwYXJzZVwiKSxVZT1uZXcgSnIuV3JpdGVyLHF1PWEoZnVuY3Rpb24ocixlKXtmb3IobGV0IHQ9MDt0PHIubGVuZ3RoO3QrKyl7XG5sZXQgbj1lP2Uoclt0XSx0KTpyW3RdO249PW51bGw/KEYuYWRkSW50MTYoMCksVWUuYWRkSW50MzIoLTEpKTpuIGluc3RhbmNlb2YgZD8oRi5cbmFkZEludDE2KDEpLFVlLmFkZEludDMyKG4ubGVuZ3RoKSxVZS5hZGQobikpOihGLmFkZEludDE2KDApLFVlLmFkZEludDMyKGQuYnl0ZUxlbmd0aChcbm4pKSxVZS5hZGRTdHJpbmcobikpfX0sXCJ3cml0ZVZhbHVlc1wiKSxOdT1hKChyPXt9KT0+e2xldCBlPXIucG9ydGFsfHxcIlwiLHQ9ci5zdGF0ZW1lbnR8fFxuXCJcIixuPXIuYmluYXJ5fHwhMSxpPXIudmFsdWVzfHxtcyxzPWkubGVuZ3RoO3JldHVybiBGLmFkZENTdHJpbmcoZSkuYWRkQ1N0cmluZyh0KSxcbkYuYWRkSW50MTYocykscXUoaSxyLnZhbHVlTWFwcGVyKSxGLmFkZEludDE2KHMpLEYuYWRkKFVlLmZsdXNoKCkpLEYuYWRkSW50MTYobj8xOlxuMCksRi5mbHVzaCg2Nil9LFwiYmluZFwiKSxRdT1kLmZyb20oWzY5LDAsMCwwLDksMCwwLDAsMCwwXSksV3U9YShyPT57aWYoIXJ8fCFyLnBvcnRhbCYmXG4hci5yb3dzKXJldHVybiBRdTtsZXQgZT1yLnBvcnRhbHx8XCJcIix0PXIucm93c3x8MCxuPWQuYnl0ZUxlbmd0aChlKSxpPTQrbisxKzQscz1kLlxuYWxsb2NVbnNhZmUoMStpKTtyZXR1cm4gc1swXT02OSxzLndyaXRlSW50MzJCRShpLDEpLHMud3JpdGUoZSw1LFwidXRmLThcIiksc1tuKzVdPVxuMCxzLndyaXRlVUludDMyQkUodCxzLmxlbmd0aC00KSxzfSxcImV4ZWN1dGVcIiksanU9YSgocixlKT0+e2xldCB0PWQuYWxsb2NVbnNhZmUoMTYpO1xucmV0dXJuIHQud3JpdGVJbnQzMkJFKDE2LDApLHQud3JpdGVJbnQxNkJFKDEyMzQsNCksdC53cml0ZUludDE2QkUoNTY3OCw2KSx0LndyaXRlSW50MzJCRShcbnIsOCksdC53cml0ZUludDMyQkUoZSwxMiksdH0sXCJjYW5jZWxcIiksWHI9YSgocixlKT0+e2xldCBuPTQrZC5ieXRlTGVuZ3RoKGUpKzEsaT1kLlxuYWxsb2NVbnNhZmUoMStuKTtyZXR1cm4gaVswXT1yLGkud3JpdGVJbnQzMkJFKG4sMSksaS53cml0ZShlLDUsXCJ1dGYtOFwiKSxpW25dPTAsaX0sXG5cImNzdHJpbmdNZXNzYWdlXCIpLEh1PUYuYWRkQ1N0cmluZyhcIlBcIikuZmx1c2goNjgpLEd1PUYuYWRkQ1N0cmluZyhcIlNcIikuZmx1c2goNjgpLFxuJHU9YShyPT5yLm5hbWU/WHIoNjgsYCR7ci50eXBlfSR7ci5uYW1lfHxcIlwifWApOnIudHlwZT09PVwiUFwiP0h1Okd1LFwiZGVzY3JpYmVcIiksS3U9YShcbnI9PntsZXQgZT1gJHtyLnR5cGV9JHtyLm5hbWV8fFwiXCJ9YDtyZXR1cm4gWHIoNjcsZSl9LFwiY2xvc2VcIiksVnU9YShyPT5GLmFkZChyKS5mbHVzaChcbjEwMCksXCJjb3B5RGF0YVwiKSx6dT1hKHI9PlhyKDEwMixyKSxcImNvcHlGYWlsXCIpLFN0PWEocj0+ZC5mcm9tKFtyLDAsMCwwLDRdKSxcImNvZGVcXFxuT25seUJ1ZmZlclwiKSxZdT1TdCg3MiksWnU9U3QoODMpLEp1PVN0KDg4KSxYdT1TdCg5OSksZWM9e3N0YXJ0dXA6UnUscGFzc3dvcmQ6TXUsXG5yZXF1ZXN0U3NsOkZ1LHNlbmRTQVNMSW5pdGlhbFJlc3BvbnNlTWVzc2FnZTpEdSxzZW5kU0NSQU1DbGllbnRGaW5hbE1lc3NhZ2U6T3UscXVlcnk6a3UsXG5wYXJzZTpVdSxiaW5kOk51LGV4ZWN1dGU6V3UsZGVzY3JpYmU6JHUsY2xvc2U6S3UsZmx1c2g6KCk9Pll1LHN5bmM6KCk9Plp1LGVuZDooKT0+SnUsXG5jb3B5RGF0YTpWdSxjb3B5RG9uZTooKT0+WHUsY29weUZhaWw6enUsY2FuY2VsOmp1fTt4dC5zZXJpYWxpemU9ZWN9KTt2YXIgd3M9SShFdD0+e1widXNlIHN0cmljdFwiO3AoKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoRXQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG5FdC5CdWZmZXJSZWFkZXI9dm9pZCAwO3ZhciB0Yz1kLmFsbG9jVW5zYWZlKDApLHRuPWNsYXNzIHRue2NvbnN0cnVjdG9yKGU9MCl7dGhpcy5cbm9mZnNldD1lLHRoaXMuYnVmZmVyPXRjLHRoaXMuZW5jb2Rpbmc9XCJ1dGYtOFwifXNldEJ1ZmZlcihlLHQpe3RoaXMub2Zmc2V0PWUsdGhpcy5cbmJ1ZmZlcj10fWludDE2KCl7bGV0IGU9dGhpcy5idWZmZXIucmVhZEludDE2QkUodGhpcy5vZmZzZXQpO3JldHVybiB0aGlzLm9mZnNldCs9XG4yLGV9Ynl0ZSgpe2xldCBlPXRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0XTtyZXR1cm4gdGhpcy5vZmZzZXQrKyxlfWludDMyKCl7bGV0IGU9dGhpcy5cbmJ1ZmZlci5yZWFkSW50MzJCRSh0aGlzLm9mZnNldCk7cmV0dXJuIHRoaXMub2Zmc2V0Kz00LGV9c3RyaW5nKGUpe2xldCB0PXRoaXMuYnVmZmVyLlxudG9TdHJpbmcodGhpcy5lbmNvZGluZyx0aGlzLm9mZnNldCx0aGlzLm9mZnNldCtlKTtyZXR1cm4gdGhpcy5vZmZzZXQrPWUsdH1jc3RyaW5nKCl7XG5sZXQgZT10aGlzLm9mZnNldCx0PWU7Zm9yKDt0aGlzLmJ1ZmZlclt0KytdIT09MDspO3JldHVybiB0aGlzLm9mZnNldD10LHRoaXMuYnVmZmVyLlxudG9TdHJpbmcodGhpcy5lbmNvZGluZyxlLHQtMSl9Ynl0ZXMoZSl7bGV0IHQ9dGhpcy5idWZmZXIuc2xpY2UodGhpcy5vZmZzZXQsdGhpcy5cbm9mZnNldCtlKTtyZXR1cm4gdGhpcy5vZmZzZXQrPWUsdH19O2EodG4sXCJCdWZmZXJSZWFkZXJcIik7dmFyIGVuPXRuO0V0LkJ1ZmZlclJlYWRlcj1cbmVufSk7dmFyIGJzPXt9O1goYnMse2RlZmF1bHQ6KCk9PnJjfSk7dmFyIHJjLFNzPUsoKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7cmM9e319KTt2YXIgdnM9SShxZT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgbmM9cWUmJnFlLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24ocil7cmV0dXJuIHImJlxuci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn19O09iamVjdC5kZWZpbmVQcm9wZXJ0eShxZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtxZS5cblBhcnNlcj12b2lkIDA7dmFyIE09enIoKSxpYz13cygpLHNjPW5jKChTcygpLGsoYnMpKSkscm49MSxvYz00LHhzPXJuK29jLEVzPWQuYWxsb2NVbnNhZmUoXG4wKSxzbj1jbGFzcyBzbntjb25zdHJ1Y3RvcihlKXtpZih0aGlzLmJ1ZmZlcj1Fcyx0aGlzLmJ1ZmZlckxlbmd0aD0wLHRoaXMuYnVmZmVyT2Zmc2V0PVxuMCx0aGlzLnJlYWRlcj1uZXcgaWMuQnVmZmVyUmVhZGVyLGU/Lm1vZGU9PT1cImJpbmFyeVwiKXRocm93IG5ldyBFcnJvcihcIkJpbmFyeSBtb2RcXFxuZSBub3Qgc3VwcG9ydGVkIHlldFwiKTt0aGlzLm1vZGU9ZT8ubW9kZXx8XCJ0ZXh0XCJ9cGFyc2UoZSx0KXt0aGlzLm1lcmdlQnVmZmVyKGUpO2xldCBuPXRoaXMuXG5idWZmZXJPZmZzZXQrdGhpcy5idWZmZXJMZW5ndGgsaT10aGlzLmJ1ZmZlck9mZnNldDtmb3IoO2kreHM8PW47KXtsZXQgcz10aGlzLmJ1ZmZlcltpXSxcbm89dGhpcy5idWZmZXIucmVhZFVJbnQzMkJFKGkrcm4pLHU9cm4rbztpZih1K2k8PW4pe2xldCBjPXRoaXMuaGFuZGxlUGFja2V0KGkreHMsXG5zLG8sdGhpcy5idWZmZXIpO3QoYyksaSs9dX1lbHNlIGJyZWFrfWk9PT1uPyh0aGlzLmJ1ZmZlcj1Fcyx0aGlzLmJ1ZmZlckxlbmd0aD0wLFxudGhpcy5idWZmZXJPZmZzZXQ9MCk6KHRoaXMuYnVmZmVyTGVuZ3RoPW4taSx0aGlzLmJ1ZmZlck9mZnNldD1pKX1tZXJnZUJ1ZmZlcihlKXtcbmlmKHRoaXMuYnVmZmVyTGVuZ3RoPjApe2xldCB0PXRoaXMuYnVmZmVyTGVuZ3RoK2UuYnl0ZUxlbmd0aDtpZih0K3RoaXMuYnVmZmVyT2Zmc2V0PlxudGhpcy5idWZmZXIuYnl0ZUxlbmd0aCl7bGV0IGk7aWYodDw9dGhpcy5idWZmZXIuYnl0ZUxlbmd0aCYmdGhpcy5idWZmZXJPZmZzZXQ+PXRoaXMuXG5idWZmZXJMZW5ndGgpaT10aGlzLmJ1ZmZlcjtlbHNle2xldCBzPXRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgqMjtmb3IoO3Q+PXM7KXMqPTI7aT1cbmQuYWxsb2NVbnNhZmUocyl9dGhpcy5idWZmZXIuY29weShpLDAsdGhpcy5idWZmZXJPZmZzZXQsdGhpcy5idWZmZXJPZmZzZXQrdGhpcy5idWZmZXJMZW5ndGgpLFxudGhpcy5idWZmZXI9aSx0aGlzLmJ1ZmZlck9mZnNldD0wfWUuY29weSh0aGlzLmJ1ZmZlcix0aGlzLmJ1ZmZlck9mZnNldCt0aGlzLmJ1ZmZlckxlbmd0aCksXG50aGlzLmJ1ZmZlckxlbmd0aD10fWVsc2UgdGhpcy5idWZmZXI9ZSx0aGlzLmJ1ZmZlck9mZnNldD0wLHRoaXMuYnVmZmVyTGVuZ3RoPWUuYnl0ZUxlbmd0aH1oYW5kbGVQYWNrZXQoZSx0LG4saSl7XG5zd2l0Y2godCl7Y2FzZSA1MDpyZXR1cm4gTS5iaW5kQ29tcGxldGU7Y2FzZSA0OTpyZXR1cm4gTS5wYXJzZUNvbXBsZXRlO2Nhc2UgNTE6cmV0dXJuIE0uXG5jbG9zZUNvbXBsZXRlO2Nhc2UgMTEwOnJldHVybiBNLm5vRGF0YTtjYXNlIDExNTpyZXR1cm4gTS5wb3J0YWxTdXNwZW5kZWQ7Y2FzZSA5OTpcbnJldHVybiBNLmNvcHlEb25lO2Nhc2UgODc6cmV0dXJuIE0ucmVwbGljYXRpb25TdGFydDtjYXNlIDczOnJldHVybiBNLmVtcHR5UXVlcnk7Y2FzZSA2ODpcbnJldHVybiB0aGlzLnBhcnNlRGF0YVJvd01lc3NhZ2UoZSxuLGkpO2Nhc2UgNjc6cmV0dXJuIHRoaXMucGFyc2VDb21tYW5kQ29tcGxldGVNZXNzYWdlKFxuZSxuLGkpO2Nhc2UgOTA6cmV0dXJuIHRoaXMucGFyc2VSZWFkeUZvclF1ZXJ5TWVzc2FnZShlLG4saSk7Y2FzZSA2NTpyZXR1cm4gdGhpcy5cbnBhcnNlTm90aWZpY2F0aW9uTWVzc2FnZShlLG4saSk7Y2FzZSA4MjpyZXR1cm4gdGhpcy5wYXJzZUF1dGhlbnRpY2F0aW9uUmVzcG9uc2UoXG5lLG4saSk7Y2FzZSA4MzpyZXR1cm4gdGhpcy5wYXJzZVBhcmFtZXRlclN0YXR1c01lc3NhZ2UoZSxuLGkpO2Nhc2UgNzU6cmV0dXJuIHRoaXMuXG5wYXJzZUJhY2tlbmRLZXlEYXRhKGUsbixpKTtjYXNlIDY5OnJldHVybiB0aGlzLnBhcnNlRXJyb3JNZXNzYWdlKGUsbixpLFwiZXJyb3JcIik7Y2FzZSA3ODpcbnJldHVybiB0aGlzLnBhcnNlRXJyb3JNZXNzYWdlKGUsbixpLFwibm90aWNlXCIpO2Nhc2UgODQ6cmV0dXJuIHRoaXMucGFyc2VSb3dEZXNjcmlwdGlvbk1lc3NhZ2UoXG5lLG4saSk7Y2FzZSAxMTY6cmV0dXJuIHRoaXMucGFyc2VQYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2UoZSxuLGkpO2Nhc2UgNzE6cmV0dXJuIHRoaXMuXG5wYXJzZUNvcHlJbk1lc3NhZ2UoZSxuLGkpO2Nhc2UgNzI6cmV0dXJuIHRoaXMucGFyc2VDb3B5T3V0TWVzc2FnZShlLG4saSk7Y2FzZSAxMDA6XG5yZXR1cm4gdGhpcy5wYXJzZUNvcHlEYXRhKGUsbixpKTtkZWZhdWx0OnNjLmRlZmF1bHQuZmFpbChgdW5rbm93biBtZXNzYWdlIGNvZGU6ICR7dC5cbnRvU3RyaW5nKDE2KX1gKX19cGFyc2VSZWFkeUZvclF1ZXJ5TWVzc2FnZShlLHQsbil7dGhpcy5yZWFkZXIuc2V0QnVmZmVyKGUsbik7bGV0IGk9dGhpcy5cbnJlYWRlci5zdHJpbmcoMSk7cmV0dXJuIG5ldyBNLlJlYWR5Rm9yUXVlcnlNZXNzYWdlKHQsaSl9cGFyc2VDb21tYW5kQ29tcGxldGVNZXNzYWdlKGUsdCxuKXtcbnRoaXMucmVhZGVyLnNldEJ1ZmZlcihlLG4pO2xldCBpPXRoaXMucmVhZGVyLmNzdHJpbmcoKTtyZXR1cm4gbmV3IE0uQ29tbWFuZENvbXBsZXRlTWVzc2FnZShcbnQsaSl9cGFyc2VDb3B5RGF0YShlLHQsbil7bGV0IGk9bi5zbGljZShlLGUrKHQtNCkpO3JldHVybiBuZXcgTS5Db3B5RGF0YU1lc3NhZ2UoXG50LGkpfXBhcnNlQ29weUluTWVzc2FnZShlLHQsbil7cmV0dXJuIHRoaXMucGFyc2VDb3B5TWVzc2FnZShlLHQsbixcImNvcHlJblJlc3BvbnNcXFxuZVwiKX1wYXJzZUNvcHlPdXRNZXNzYWdlKGUsdCxuKXtyZXR1cm4gdGhpcy5wYXJzZUNvcHlNZXNzYWdlKGUsdCxuLFwiY29weU91dFJlc3BvblxcXG5zZVwiKX1wYXJzZUNvcHlNZXNzYWdlKGUsdCxuLGkpe3RoaXMucmVhZGVyLnNldEJ1ZmZlcihlLG4pO2xldCBzPXRoaXMucmVhZGVyLmJ5dGUoKSE9PVxuMCxvPXRoaXMucmVhZGVyLmludDE2KCksdT1uZXcgTS5Db3B5UmVzcG9uc2UodCxpLHMsbyk7Zm9yKGxldCBjPTA7YzxvO2MrKyl1LmNvbHVtblR5cGVzW2NdPVxudGhpcy5yZWFkZXIuaW50MTYoKTtyZXR1cm4gdX1wYXJzZU5vdGlmaWNhdGlvbk1lc3NhZ2UoZSx0LG4pe3RoaXMucmVhZGVyLnNldEJ1ZmZlcihcbmUsbik7bGV0IGk9dGhpcy5yZWFkZXIuaW50MzIoKSxzPXRoaXMucmVhZGVyLmNzdHJpbmcoKSxvPXRoaXMucmVhZGVyLmNzdHJpbmcoKTtyZXR1cm4gbmV3IE0uXG5Ob3RpZmljYXRpb25SZXNwb25zZU1lc3NhZ2UodCxpLHMsbyl9cGFyc2VSb3dEZXNjcmlwdGlvbk1lc3NhZ2UoZSx0LG4pe3RoaXMucmVhZGVyLlxuc2V0QnVmZmVyKGUsbik7bGV0IGk9dGhpcy5yZWFkZXIuaW50MTYoKSxzPW5ldyBNLlJvd0Rlc2NyaXB0aW9uTWVzc2FnZSh0LGkpO2ZvcihsZXQgbz0wO288XG5pO28rKylzLmZpZWxkc1tvXT10aGlzLnBhcnNlRmllbGQoKTtyZXR1cm4gc31wYXJzZUZpZWxkKCl7bGV0IGU9dGhpcy5yZWFkZXIuY3N0cmluZygpLFxudD10aGlzLnJlYWRlci5pbnQzMigpLG49dGhpcy5yZWFkZXIuaW50MTYoKSxpPXRoaXMucmVhZGVyLmludDMyKCkscz10aGlzLnJlYWRlci5cbmludDE2KCksbz10aGlzLnJlYWRlci5pbnQzMigpLHU9dGhpcy5yZWFkZXIuaW50MTYoKT09PTA/XCJ0ZXh0XCI6XCJiaW5hcnlcIjtyZXR1cm4gbmV3IE0uXG5GaWVsZChlLHQsbixpLHMsbyx1KX1wYXJzZVBhcmFtZXRlckRlc2NyaXB0aW9uTWVzc2FnZShlLHQsbil7dGhpcy5yZWFkZXIuc2V0QnVmZmVyKFxuZSxuKTtsZXQgaT10aGlzLnJlYWRlci5pbnQxNigpLHM9bmV3IE0uUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlKHQsaSk7Zm9yKGxldCBvPTA7bzxcbmk7bysrKXMuZGF0YVR5cGVJRHNbb109dGhpcy5yZWFkZXIuaW50MzIoKTtyZXR1cm4gc31wYXJzZURhdGFSb3dNZXNzYWdlKGUsdCxuKXt0aGlzLlxucmVhZGVyLnNldEJ1ZmZlcihlLG4pO2xldCBpPXRoaXMucmVhZGVyLmludDE2KCkscz1uZXcgQXJyYXkoaSk7Zm9yKGxldCBvPTA7bzxpO28rKyl7XG5sZXQgdT10aGlzLnJlYWRlci5pbnQzMigpO3Nbb109dT09PS0xP251bGw6dGhpcy5yZWFkZXIuc3RyaW5nKHUpfXJldHVybiBuZXcgTS5EYXRhUm93TWVzc2FnZShcbnQscyl9cGFyc2VQYXJhbWV0ZXJTdGF0dXNNZXNzYWdlKGUsdCxuKXt0aGlzLnJlYWRlci5zZXRCdWZmZXIoZSxuKTtsZXQgaT10aGlzLnJlYWRlci5cbmNzdHJpbmcoKSxzPXRoaXMucmVhZGVyLmNzdHJpbmcoKTtyZXR1cm4gbmV3IE0uUGFyYW1ldGVyU3RhdHVzTWVzc2FnZSh0LGkscyl9cGFyc2VCYWNrZW5kS2V5RGF0YShlLHQsbil7XG50aGlzLnJlYWRlci5zZXRCdWZmZXIoZSxuKTtsZXQgaT10aGlzLnJlYWRlci5pbnQzMigpLHM9dGhpcy5yZWFkZXIuaW50MzIoKTtyZXR1cm4gbmV3IE0uXG5CYWNrZW5kS2V5RGF0YU1lc3NhZ2UodCxpLHMpfXBhcnNlQXV0aGVudGljYXRpb25SZXNwb25zZShlLHQsbil7dGhpcy5yZWFkZXIuc2V0QnVmZmVyKFxuZSxuKTtsZXQgaT10aGlzLnJlYWRlci5pbnQzMigpLHM9e25hbWU6XCJhdXRoZW50aWNhdGlvbk9rXCIsbGVuZ3RoOnR9O3N3aXRjaChpKXtjYXNlIDA6XG5icmVhaztjYXNlIDM6cy5sZW5ndGg9PT04JiYocy5uYW1lPVwiYXV0aGVudGljYXRpb25DbGVhcnRleHRQYXNzd29yZFwiKTticmVhaztjYXNlIDU6XG5pZihzLmxlbmd0aD09PTEyKXtzLm5hbWU9XCJhdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkXCI7bGV0IHU9dGhpcy5yZWFkZXIuYnl0ZXMoNCk7XG5yZXR1cm4gbmV3IE0uQXV0aGVudGljYXRpb25NRDVQYXNzd29yZCh0LHUpfWJyZWFrO2Nhc2UgMTA6cy5uYW1lPVwiYXV0aGVudGljYXRpb25cXFxuU0FTTFwiLHMubWVjaGFuaXNtcz1bXTtsZXQgbztkbyBvPXRoaXMucmVhZGVyLmNzdHJpbmcoKSxvJiZzLm1lY2hhbmlzbXMucHVzaChvKTt3aGlsZShvKTtcbmJyZWFrO2Nhc2UgMTE6cy5uYW1lPVwiYXV0aGVudGljYXRpb25TQVNMQ29udGludWVcIixzLmRhdGE9dGhpcy5yZWFkZXIuc3RyaW5nKHQtOCk7XG5icmVhaztjYXNlIDEyOnMubmFtZT1cImF1dGhlbnRpY2F0aW9uU0FTTEZpbmFsXCIscy5kYXRhPXRoaXMucmVhZGVyLnN0cmluZyh0LTgpO2JyZWFrO2RlZmF1bHQ6XG50aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGF1dGhlbnRpY2F0aW9uT2sgbWVzc2FnZSB0eXBlIFwiK2kpfXJldHVybiBzfXBhcnNlRXJyb3JNZXNzYWdlKGUsdCxuLGkpe1xudGhpcy5yZWFkZXIuc2V0QnVmZmVyKGUsbik7bGV0IHM9e30sbz10aGlzLnJlYWRlci5zdHJpbmcoMSk7Zm9yKDtvIT09XCJcXDBcIjspc1tvXT1cbnRoaXMucmVhZGVyLmNzdHJpbmcoKSxvPXRoaXMucmVhZGVyLnN0cmluZygxKTtsZXQgdT1zLk0sYz1pPT09XCJub3RpY2VcIj9uZXcgTS5Ob3RpY2VNZXNzYWdlKFxudCx1KTpuZXcgTS5EYXRhYmFzZUVycm9yKHUsdCxpKTtyZXR1cm4gYy5zZXZlcml0eT1zLlMsYy5jb2RlPXMuQyxjLmRldGFpbD1zLkQsYy5cbmhpbnQ9cy5ILGMucG9zaXRpb249cy5QLGMuaW50ZXJuYWxQb3NpdGlvbj1zLnAsYy5pbnRlcm5hbFF1ZXJ5PXMucSxjLndoZXJlPXMuVyxjLlxuc2NoZW1hPXMucyxjLnRhYmxlPXMudCxjLmNvbHVtbj1zLmMsYy5kYXRhVHlwZT1zLmQsYy5jb25zdHJhaW50PXMubixjLmZpbGU9cy5GLGMuXG5saW5lPXMuTCxjLnJvdXRpbmU9cy5SLGN9fTthKHNuLFwiUGFyc2VyXCIpO3ZhciBubj1zbjtxZS5QYXJzZXI9bm59KTt2YXIgb249SShiZT0+e1widXNlIHN0cmljdFwiO3AoKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYmUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG5iZS5EYXRhYmFzZUVycm9yPWJlLnNlcmlhbGl6ZT1iZS5wYXJzZT12b2lkIDA7dmFyIGFjPXpyKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFxuYmUsXCJEYXRhYmFzZUVycm9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGFjLkRhdGFiYXNlRXJyb3J9fSk7dmFyIHVjPWdzKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoYmUsXCJzZXJpYWxpemVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdWMuc2VyaWFsaXplfX0pO1xudmFyIGNjPXZzKCk7ZnVuY3Rpb24gaGMocixlKXtsZXQgdD1uZXcgY2MuUGFyc2VyO3JldHVybiByLm9uKFwiZGF0YVwiLG49PnQucGFyc2UobixcbmUpKSxuZXcgUHJvbWlzZShuPT5yLm9uKFwiZW5kXCIsKCk9Pm4oKSkpfWEoaGMsXCJwYXJzZVwiKTtiZS5wYXJzZT1oY30pO3ZhciBfcz17fTtYKF9zLHtjb25uZWN0OigpPT5sY30pO2Z1bmN0aW9uIGxjKHtzb2NrZXQ6cixzZXJ2ZXJuYW1lOmV9KXtyZXR1cm4gci5zdGFydFRscyhcbmUpLHJ9dmFyIEFzPUsoKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7YShsYyxcImNvbm5lY3RcIil9KTt2YXIgY249SSgoZWYsVHMpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBDcz0od3QoKSxrKGRzKSksZmM9Z2UoKS5FdmVudEVtaXR0ZXIse3BhcnNlOnBjLFxuc2VyaWFsaXplOnF9PW9uKCksSXM9cS5mbHVzaCgpLGRjPXEuc3luYygpLHljPXEuZW5kKCksdW49Y2xhc3MgdW4gZXh0ZW5kcyBmY3tjb25zdHJ1Y3RvcihlKXtcbnN1cGVyKCksZT1lfHx7fSx0aGlzLnN0cmVhbT1lLnN0cmVhbXx8bmV3IENzLlNvY2tldCx0aGlzLl9rZWVwQWxpdmU9ZS5rZWVwQWxpdmUsXG50aGlzLl9rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXM9ZS5rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXMsdGhpcy5sYXN0QnVmZmVyPVxuITEsdGhpcy5wYXJzZWRTdGF0ZW1lbnRzPXt9LHRoaXMuc3NsPWUuc3NsfHwhMSx0aGlzLl9lbmRpbmc9ITEsdGhpcy5fZW1pdE1lc3NhZ2U9XG4hMTt2YXIgdD10aGlzO3RoaXMub24oXCJuZXdMaXN0ZW5lclwiLGZ1bmN0aW9uKG4pe249PT1cIm1lc3NhZ2VcIiYmKHQuX2VtaXRNZXNzYWdlPSEwKX0pfWNvbm5lY3QoZSx0KXtcbnZhciBuPXRoaXM7dGhpcy5fY29ubmVjdGluZz0hMCx0aGlzLnN0cmVhbS5zZXROb0RlbGF5KCEwKSx0aGlzLnN0cmVhbS5jb25uZWN0KGUsXG50KSx0aGlzLnN0cmVhbS5vbmNlKFwiY29ubmVjdFwiLGZ1bmN0aW9uKCl7bi5fa2VlcEFsaXZlJiZuLnN0cmVhbS5zZXRLZWVwQWxpdmUoITAsXG5uLl9rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXMpLG4uZW1pdChcImNvbm5lY3RcIil9KTtsZXQgaT1hKGZ1bmN0aW9uKHMpe24uX2VuZGluZyYmXG4ocy5jb2RlPT09XCJFQ09OTlJFU0VUXCJ8fHMuY29kZT09PVwiRVBJUEVcIil8fG4uZW1pdChcImVycm9yXCIscyl9LFwicmVwb3J0U3RyZWFtRXJyb3JcIik7XG5pZih0aGlzLnN0cmVhbS5vbihcImVycm9yXCIsaSksdGhpcy5zdHJlYW0ub24oXCJjbG9zZVwiLGZ1bmN0aW9uKCl7bi5lbWl0KFwiZW5kXCIpfSksIXRoaXMuXG5zc2wpcmV0dXJuIHRoaXMuYXR0YWNoTGlzdGVuZXJzKHRoaXMuc3RyZWFtKTt0aGlzLnN0cmVhbS5vbmNlKFwiZGF0YVwiLGZ1bmN0aW9uKHMpe1xudmFyIG89cy50b1N0cmluZyhcInV0ZjhcIik7c3dpdGNoKG8pe2Nhc2VcIlNcIjpicmVhaztjYXNlXCJOXCI6cmV0dXJuIG4uc3RyZWFtLmVuZCgpLG4uXG5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJUaGUgc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgU1NMIGNvbm5lY3Rpb25zXCIpKTtkZWZhdWx0OnJldHVybiBuLlxuc3RyZWFtLmVuZCgpLG4uZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiVGhlcmUgd2FzIGFuIGVycm9yIGVzdGFibGlzaGluZyBhbiBTU0wgY29cXFxubm5lY3Rpb25cIikpfXZhciB1PShBcygpLGsoX3MpKTtsZXQgYz17c29ja2V0Om4uc3RyZWFtfTtuLnNzbCE9PSEwJiYoT2JqZWN0LmFzc2lnbihcbmMsbi5zc2wpLFwia2V5XCJpbiBuLnNzbCYmKGMua2V5PW4uc3NsLmtleSkpLENzLmlzSVAodCk9PT0wJiYoYy5zZXJ2ZXJuYW1lPXQpO3RyeXtcbm4uc3RyZWFtPXUuY29ubmVjdChjKX1jYXRjaChoKXtyZXR1cm4gbi5lbWl0KFwiZXJyb3JcIixoKX1uLmF0dGFjaExpc3RlbmVycyhuLnN0cmVhbSksXG5uLnN0cmVhbS5vbihcImVycm9yXCIsaSksbi5lbWl0KFwic3NsY29ubmVjdFwiKX0pfWF0dGFjaExpc3RlbmVycyhlKXtlLm9uKFwiZW5kXCIsKCk9PntcbnRoaXMuZW1pdChcImVuZFwiKX0pLHBjKGUsdD0+e3ZhciBuPXQubmFtZT09PVwiZXJyb3JcIj9cImVycm9yTWVzc2FnZVwiOnQubmFtZTt0aGlzLl9lbWl0TWVzc2FnZSYmXG50aGlzLmVtaXQoXCJtZXNzYWdlXCIsdCksdGhpcy5lbWl0KG4sdCl9KX1yZXF1ZXN0U3NsKCl7dGhpcy5zdHJlYW0ud3JpdGUocS5yZXF1ZXN0U3NsKCkpfXN0YXJ0dXAoZSl7XG50aGlzLnN0cmVhbS53cml0ZShxLnN0YXJ0dXAoZSkpfWNhbmNlbChlLHQpe3RoaXMuX3NlbmQocS5jYW5jZWwoZSx0KSl9cGFzc3dvcmQoZSl7XG50aGlzLl9zZW5kKHEucGFzc3dvcmQoZSkpfXNlbmRTQVNMSW5pdGlhbFJlc3BvbnNlTWVzc2FnZShlLHQpe3RoaXMuX3NlbmQocS5zZW5kU0FTTEluaXRpYWxSZXNwb25zZU1lc3NhZ2UoXG5lLHQpKX1zZW5kU0NSQU1DbGllbnRGaW5hbE1lc3NhZ2UoZSl7dGhpcy5fc2VuZChxLnNlbmRTQ1JBTUNsaWVudEZpbmFsTWVzc2FnZShlKSl9X3NlbmQoZSl7XG5yZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGFibGU/dGhpcy5zdHJlYW0ud3JpdGUoZSk6ITF9cXVlcnkoZSl7dGhpcy5fc2VuZChxLnF1ZXJ5KFxuZSkpfXBhcnNlKGUpe3RoaXMuX3NlbmQocS5wYXJzZShlKSl9YmluZChlKXt0aGlzLl9zZW5kKHEuYmluZChlKSl9ZXhlY3V0ZShlKXt0aGlzLlxuX3NlbmQocS5leGVjdXRlKGUpKX1mbHVzaCgpe3RoaXMuc3RyZWFtLndyaXRhYmxlJiZ0aGlzLnN0cmVhbS53cml0ZShJcyl9c3luYygpe3RoaXMuXG5fZW5kaW5nPSEwLHRoaXMuX3NlbmQoSXMpLHRoaXMuX3NlbmQoZGMpfXJlZigpe3RoaXMuc3RyZWFtLnJlZigpfXVucmVmKCl7dGhpcy5zdHJlYW0uXG51bnJlZigpfWVuZCgpe2lmKHRoaXMuX2VuZGluZz0hMCwhdGhpcy5fY29ubmVjdGluZ3x8IXRoaXMuc3RyZWFtLndyaXRhYmxlKXt0aGlzLlxuc3RyZWFtLmVuZCgpO3JldHVybn1yZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoeWMsKCk9Pnt0aGlzLnN0cmVhbS5lbmQoKX0pfWNsb3NlKGUpe1xudGhpcy5fc2VuZChxLmNsb3NlKGUpKX1kZXNjcmliZShlKXt0aGlzLl9zZW5kKHEuZGVzY3JpYmUoZSkpfXNlbmRDb3B5RnJvbUNodW5rKGUpe1xudGhpcy5fc2VuZChxLmNvcHlEYXRhKGUpKX1lbmRDb3B5RnJvbSgpe3RoaXMuX3NlbmQocS5jb3B5RG9uZSgpKX1zZW5kQ29weUZhaWwoZSl7XG50aGlzLl9zZW5kKHEuY29weUZhaWwoZSkpfX07YSh1bixcIkNvbm5lY3Rpb25cIik7dmFyIGFuPXVuO1RzLmV4cG9ydHM9YW59KTt2YXIgTHM9SSgoc2YsQnMpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBtYz1nZSgpLkV2ZW50RW1pdHRlcixuZj0oR2UoKSxrKEhlKSksZ2M9dHQoKSxcbmhuPXFpKCksd2M9WWkoKSxiYz1ocigpLFNjPWd0KCksUHM9ZnMoKSx4Yz1ldCgpLEVjPWNuKCksbG49Y2xhc3MgbG4gZXh0ZW5kcyBtY3tjb25zdHJ1Y3RvcihlKXtcbnN1cGVyKCksdGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycz1uZXcgU2MoZSksdGhpcy51c2VyPXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuXG51c2VyLHRoaXMuZGF0YWJhc2U9dGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycy5kYXRhYmFzZSx0aGlzLnBvcnQ9dGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycy5cbnBvcnQsdGhpcy5ob3N0PXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuaG9zdCxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhc3N3b1xcXG5yZFwiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCx2YWx1ZTp0aGlzLmNvbm5lY3Rpb25QYXJhbWV0ZXJzLnBhc3N3b3JkfSksXG50aGlzLnJlcGxpY2F0aW9uPXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMucmVwbGljYXRpb247dmFyIHQ9ZXx8e307dGhpcy5fUHJvbWlzZT1cbnQuUHJvbWlzZXx8Yi5Qcm9taXNlLHRoaXMuX3R5cGVzPW5ldyBiYyh0LnR5cGVzKSx0aGlzLl9lbmRpbmc9ITEsdGhpcy5fY29ubmVjdGluZz1cbiExLHRoaXMuX2Nvbm5lY3RlZD0hMSx0aGlzLl9jb25uZWN0aW9uRXJyb3I9ITEsdGhpcy5fcXVlcnlhYmxlPSEwLHRoaXMuY29ubmVjdGlvbj1cbnQuY29ubmVjdGlvbnx8bmV3IEVjKHtzdHJlYW06dC5zdHJlYW0sc3NsOnRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuc3NsLGtlZXBBbGl2ZTp0Llxua2VlcEFsaXZlfHwhMSxrZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXM6dC5rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXN8fDAsZW5jb2Rpbmc6dGhpcy5cbmNvbm5lY3Rpb25QYXJhbWV0ZXJzLmNsaWVudF9lbmNvZGluZ3x8XCJ1dGY4XCJ9KSx0aGlzLnF1ZXJ5UXVldWU9W10sdGhpcy5iaW5hcnk9dC5cbmJpbmFyeXx8eGMuYmluYXJ5LHRoaXMucHJvY2Vzc0lEPW51bGwsdGhpcy5zZWNyZXRLZXk9bnVsbCx0aGlzLnNzbD10aGlzLmNvbm5lY3Rpb25QYXJhbWV0ZXJzLlxuc3NsfHwhMSx0aGlzLnNzbCYmdGhpcy5zc2wua2V5JiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5zc2wsXCJrZXlcIix7ZW51bWVyYWJsZTohMX0pLFxudGhpcy5fY29ubmVjdGlvblRpbWVvdXRNaWxsaXM9dC5jb25uZWN0aW9uVGltZW91dE1pbGxpc3x8MH1fZXJyb3JBbGxRdWVyaWVzKGUpe2xldCB0PWEoXG5uPT57bS5uZXh0VGljaygoKT0+e24uaGFuZGxlRXJyb3IoZSx0aGlzLmNvbm5lY3Rpb24pfSl9LFwiZW5xdWV1ZUVycm9yXCIpO3RoaXMuYWN0aXZlUXVlcnkmJlxuKHQodGhpcy5hY3RpdmVRdWVyeSksdGhpcy5hY3RpdmVRdWVyeT1udWxsKSx0aGlzLnF1ZXJ5UXVldWUuZm9yRWFjaCh0KSx0aGlzLnF1ZXJ5UXVldWUuXG5sZW5ndGg9MH1fY29ubmVjdChlKXt2YXIgdD10aGlzLG49dGhpcy5jb25uZWN0aW9uO2lmKHRoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjaz1lLFxudGhpcy5fY29ubmVjdGluZ3x8dGhpcy5fY29ubmVjdGVkKXtsZXQgaT1uZXcgRXJyb3IoXCJDbGllbnQgaGFzIGFscmVhZHkgYmVlbiBjb25uXFxcbmVjdGVkLiBZb3UgY2Fubm90IHJldXNlIGEgY2xpZW50LlwiKTttLm5leHRUaWNrKCgpPT57ZShpKX0pO3JldHVybn10aGlzLl9jb25uZWN0aW5nPVxuITAsdGhpcy5jb25uZWN0aW9uVGltZW91dEhhbmRsZSx0aGlzLl9jb25uZWN0aW9uVGltZW91dE1pbGxpcz4wJiYodGhpcy5jb25uZWN0aW9uVGltZW91dEhhbmRsZT1cbnNldFRpbWVvdXQoKCk9PntuLl9lbmRpbmc9ITAsbi5zdHJlYW0uZGVzdHJveShuZXcgRXJyb3IoXCJ0aW1lb3V0IGV4cGlyZWRcIikpfSx0aGlzLlxuX2Nvbm5lY3Rpb25UaW1lb3V0TWlsbGlzKSksdGhpcy5ob3N0JiZ0aGlzLmhvc3QuaW5kZXhPZihcIi9cIik9PT0wP24uY29ubmVjdCh0aGlzLlxuaG9zdCtcIi8ucy5QR1NRTC5cIit0aGlzLnBvcnQpOm4uY29ubmVjdCh0aGlzLnBvcnQsdGhpcy5ob3N0KSxuLm9uKFwiY29ubmVjdFwiLGZ1bmN0aW9uKCl7XG50LnNzbD9uLnJlcXVlc3RTc2woKTpuLnN0YXJ0dXAodC5nZXRTdGFydHVwQ29uZigpKX0pLG4ub24oXCJzc2xjb25uZWN0XCIsZnVuY3Rpb24oKXtcbm4uc3RhcnR1cCh0LmdldFN0YXJ0dXBDb25mKCkpfSksdGhpcy5fYXR0YWNoTGlzdGVuZXJzKG4pLG4ub25jZShcImVuZFwiLCgpPT57bGV0IGk9dGhpcy5cbl9lbmRpbmc/bmV3IEVycm9yKFwiQ29ubmVjdGlvbiB0ZXJtaW5hdGVkXCIpOm5ldyBFcnJvcihcIkNvbm5lY3Rpb24gdGVybWluYXRlZCB1bmV4XFxcbnBlY3RlZGx5XCIpO2NsZWFyVGltZW91dCh0aGlzLmNvbm5lY3Rpb25UaW1lb3V0SGFuZGxlKSx0aGlzLl9lcnJvckFsbFF1ZXJpZXMoaSksdGhpcy5cbl9lbmRpbmd8fCh0aGlzLl9jb25uZWN0aW5nJiYhdGhpcy5fY29ubmVjdGlvbkVycm9yP3RoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjaz90aGlzLlxuX2Nvbm5lY3Rpb25DYWxsYmFjayhpKTp0aGlzLl9oYW5kbGVFcnJvckV2ZW50KGkpOnRoaXMuX2Nvbm5lY3Rpb25FcnJvcnx8dGhpcy5faGFuZGxlRXJyb3JFdmVudChcbmkpKSxtLm5leHRUaWNrKCgpPT57dGhpcy5lbWl0KFwiZW5kXCIpfSl9KX1jb25uZWN0KGUpe2lmKGUpe3RoaXMuX2Nvbm5lY3QoZSk7cmV0dXJufVxucmV0dXJuIG5ldyB0aGlzLl9Qcm9taXNlKCh0LG4pPT57dGhpcy5fY29ubmVjdChpPT57aT9uKGkpOnQoKX0pfSl9X2F0dGFjaExpc3RlbmVycyhlKXtcbmUub24oXCJhdXRoZW50aWNhdGlvbkNsZWFydGV4dFBhc3N3b3JkXCIsdGhpcy5faGFuZGxlQXV0aENsZWFydGV4dFBhc3N3b3JkLmJpbmQodGhpcykpLFxuZS5vbihcImF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmRcIix0aGlzLl9oYW5kbGVBdXRoTUQ1UGFzc3dvcmQuYmluZCh0aGlzKSksZS5vbihcImFcXFxudXRoZW50aWNhdGlvblNBU0xcIix0aGlzLl9oYW5kbGVBdXRoU0FTTC5iaW5kKHRoaXMpKSxlLm9uKFwiYXV0aGVudGljYXRpb25TQVNMQ29udFxcXG5pbnVlXCIsdGhpcy5faGFuZGxlQXV0aFNBU0xDb250aW51ZS5iaW5kKHRoaXMpKSxlLm9uKFwiYXV0aGVudGljYXRpb25TQVNMRmluYWxcIix0aGlzLlxuX2hhbmRsZUF1dGhTQVNMRmluYWwuYmluZCh0aGlzKSksZS5vbihcImJhY2tlbmRLZXlEYXRhXCIsdGhpcy5faGFuZGxlQmFja2VuZEtleURhdGEuXG5iaW5kKHRoaXMpKSxlLm9uKFwiZXJyb3JcIix0aGlzLl9oYW5kbGVFcnJvckV2ZW50LmJpbmQodGhpcykpLGUub24oXCJlcnJvck1lc3NhZ2VcIixcbnRoaXMuX2hhbmRsZUVycm9yTWVzc2FnZS5iaW5kKHRoaXMpKSxlLm9uKFwicmVhZHlGb3JRdWVyeVwiLHRoaXMuX2hhbmRsZVJlYWR5Rm9yUXVlcnkuXG5iaW5kKHRoaXMpKSxlLm9uKFwibm90aWNlXCIsdGhpcy5faGFuZGxlTm90aWNlLmJpbmQodGhpcykpLGUub24oXCJyb3dEZXNjcmlwdGlvblwiLHRoaXMuXG5faGFuZGxlUm93RGVzY3JpcHRpb24uYmluZCh0aGlzKSksZS5vbihcImRhdGFSb3dcIix0aGlzLl9oYW5kbGVEYXRhUm93LmJpbmQodGhpcykpLFxuZS5vbihcInBvcnRhbFN1c3BlbmRlZFwiLHRoaXMuX2hhbmRsZVBvcnRhbFN1c3BlbmRlZC5iaW5kKHRoaXMpKSxlLm9uKFwiZW1wdHlRdWVyeVwiLFxudGhpcy5faGFuZGxlRW1wdHlRdWVyeS5iaW5kKHRoaXMpKSxlLm9uKFwiY29tbWFuZENvbXBsZXRlXCIsdGhpcy5faGFuZGxlQ29tbWFuZENvbXBsZXRlLlxuYmluZCh0aGlzKSksZS5vbihcInBhcnNlQ29tcGxldGVcIix0aGlzLl9oYW5kbGVQYXJzZUNvbXBsZXRlLmJpbmQodGhpcykpLGUub24oXCJjb3BcXFxueUluUmVzcG9uc2VcIix0aGlzLl9oYW5kbGVDb3B5SW5SZXNwb25zZS5iaW5kKHRoaXMpKSxlLm9uKFwiY29weURhdGFcIix0aGlzLl9oYW5kbGVDb3B5RGF0YS5cbmJpbmQodGhpcykpLGUub24oXCJub3RpZmljYXRpb25cIix0aGlzLl9oYW5kbGVOb3RpZmljYXRpb24uYmluZCh0aGlzKSl9X2NoZWNrUGdQYXNzKGUpe1xubGV0IHQ9dGhpcy5jb25uZWN0aW9uO3R5cGVvZiB0aGlzLnBhc3N3b3JkPT1cImZ1bmN0aW9uXCI/dGhpcy5fUHJvbWlzZS5yZXNvbHZlKCkudGhlbihcbigpPT50aGlzLnBhc3N3b3JkKCkpLnRoZW4obj0+e2lmKG4hPT12b2lkIDApe2lmKHR5cGVvZiBuIT1cInN0cmluZ1wiKXt0LmVtaXQoXCJlcnJvXFxcbnJcIixuZXcgVHlwZUVycm9yKFwiUGFzc3dvcmQgbXVzdCBiZSBhIHN0cmluZ1wiKSk7cmV0dXJufXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuXG5wYXNzd29yZD10aGlzLnBhc3N3b3JkPW59ZWxzZSB0aGlzLmNvbm5lY3Rpb25QYXJhbWV0ZXJzLnBhc3N3b3JkPXRoaXMucGFzc3dvcmQ9bnVsbDtcbmUoKX0pLmNhdGNoKG49Pnt0LmVtaXQoXCJlcnJvclwiLG4pfSk6dGhpcy5wYXNzd29yZCE9PW51bGw/ZSgpOndjKHRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMsXG5uPT57biE9PXZvaWQgMCYmKHRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMucGFzc3dvcmQ9dGhpcy5wYXNzd29yZD1uKSxlKCl9KX1faGFuZGxlQXV0aENsZWFydGV4dFBhc3N3b3JkKGUpe1xudGhpcy5fY2hlY2tQZ1Bhc3MoKCk9Pnt0aGlzLmNvbm5lY3Rpb24ucGFzc3dvcmQodGhpcy5wYXNzd29yZCl9KX1faGFuZGxlQXV0aE1ENVBhc3N3b3JkKGUpe1xudGhpcy5fY2hlY2tQZ1Bhc3MoKCk9PntsZXQgdD1nYy5wb3N0Z3Jlc01kNVBhc3N3b3JkSGFzaCh0aGlzLnVzZXIsdGhpcy5wYXNzd29yZCxcbmUuc2FsdCk7dGhpcy5jb25uZWN0aW9uLnBhc3N3b3JkKHQpfSl9X2hhbmRsZUF1dGhTQVNMKGUpe3RoaXMuX2NoZWNrUGdQYXNzKCgpPT57XG50aGlzLnNhc2xTZXNzaW9uPWhuLnN0YXJ0U2Vzc2lvbihlLm1lY2hhbmlzbXMpLHRoaXMuY29ubmVjdGlvbi5zZW5kU0FTTEluaXRpYWxSZXNwb25zZU1lc3NhZ2UoXG50aGlzLnNhc2xTZXNzaW9uLm1lY2hhbmlzbSx0aGlzLnNhc2xTZXNzaW9uLnJlc3BvbnNlKX0pfV9oYW5kbGVBdXRoU0FTTENvbnRpbnVlKGUpe1xuaG4uY29udGludWVTZXNzaW9uKHRoaXMuc2FzbFNlc3Npb24sdGhpcy5wYXNzd29yZCxlLmRhdGEpLHRoaXMuY29ubmVjdGlvbi5zZW5kU0NSQU1DbGllbnRGaW5hbE1lc3NhZ2UoXG50aGlzLnNhc2xTZXNzaW9uLnJlc3BvbnNlKX1faGFuZGxlQXV0aFNBU0xGaW5hbChlKXtobi5maW5hbGl6ZVNlc3Npb24odGhpcy5zYXNsU2Vzc2lvbixcbmUuZGF0YSksdGhpcy5zYXNsU2Vzc2lvbj1udWxsfV9oYW5kbGVCYWNrZW5kS2V5RGF0YShlKXt0aGlzLnByb2Nlc3NJRD1lLnByb2Nlc3NJRCxcbnRoaXMuc2VjcmV0S2V5PWUuc2VjcmV0S2V5fV9oYW5kbGVSZWFkeUZvclF1ZXJ5KGUpe3RoaXMuX2Nvbm5lY3RpbmcmJih0aGlzLl9jb25uZWN0aW5nPVxuITEsdGhpcy5fY29ubmVjdGVkPSEwLGNsZWFyVGltZW91dCh0aGlzLmNvbm5lY3Rpb25UaW1lb3V0SGFuZGxlKSx0aGlzLl9jb25uZWN0aW9uQ2FsbGJhY2smJlxuKHRoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjayhudWxsLHRoaXMpLHRoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjaz1udWxsKSx0aGlzLmVtaXQoXCJjXFxcbm9ubmVjdFwiKSk7bGV0e2FjdGl2ZVF1ZXJ5OnR9PXRoaXM7dGhpcy5hY3RpdmVRdWVyeT1udWxsLHRoaXMucmVhZHlGb3JRdWVyeT0hMCx0JiZcbnQuaGFuZGxlUmVhZHlGb3JRdWVyeSh0aGlzLmNvbm5lY3Rpb24pLHRoaXMuX3B1bHNlUXVlcnlRdWV1ZSgpfV9oYW5kbGVFcnJvcldoaWxlQ29ubmVjdGluZyhlKXtcbmlmKCF0aGlzLl9jb25uZWN0aW9uRXJyb3Ipe2lmKHRoaXMuX2Nvbm5lY3Rpb25FcnJvcj0hMCxjbGVhclRpbWVvdXQodGhpcy5jb25uZWN0aW9uVGltZW91dEhhbmRsZSksXG50aGlzLl9jb25uZWN0aW9uQ2FsbGJhY2spcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjayhlKTt0aGlzLmVtaXQoXCJlcnJvclwiLGUpfX1faGFuZGxlRXJyb3JFdmVudChlKXtcbmlmKHRoaXMuX2Nvbm5lY3RpbmcpcmV0dXJuIHRoaXMuX2hhbmRsZUVycm9yV2hpbGVDb25uZWN0aW5nKGUpO3RoaXMuX3F1ZXJ5YWJsZT0hMSxcbnRoaXMuX2Vycm9yQWxsUXVlcmllcyhlKSx0aGlzLmVtaXQoXCJlcnJvclwiLGUpfV9oYW5kbGVFcnJvck1lc3NhZ2UoZSl7aWYodGhpcy5fY29ubmVjdGluZylcbnJldHVybiB0aGlzLl9oYW5kbGVFcnJvcldoaWxlQ29ubmVjdGluZyhlKTtsZXQgdD10aGlzLmFjdGl2ZVF1ZXJ5O2lmKCF0KXt0aGlzLl9oYW5kbGVFcnJvckV2ZW50KFxuZSk7cmV0dXJufXRoaXMuYWN0aXZlUXVlcnk9bnVsbCx0LmhhbmRsZUVycm9yKGUsdGhpcy5jb25uZWN0aW9uKX1faGFuZGxlUm93RGVzY3JpcHRpb24oZSl7XG50aGlzLmFjdGl2ZVF1ZXJ5LmhhbmRsZVJvd0Rlc2NyaXB0aW9uKGUpfV9oYW5kbGVEYXRhUm93KGUpe3RoaXMuYWN0aXZlUXVlcnkuaGFuZGxlRGF0YVJvdyhcbmUpfV9oYW5kbGVQb3J0YWxTdXNwZW5kZWQoZSl7dGhpcy5hY3RpdmVRdWVyeS5oYW5kbGVQb3J0YWxTdXNwZW5kZWQodGhpcy5jb25uZWN0aW9uKX1faGFuZGxlRW1wdHlRdWVyeShlKXtcbnRoaXMuYWN0aXZlUXVlcnkuaGFuZGxlRW1wdHlRdWVyeSh0aGlzLmNvbm5lY3Rpb24pfV9oYW5kbGVDb21tYW5kQ29tcGxldGUoZSl7dGhpcy5cbmFjdGl2ZVF1ZXJ5LmhhbmRsZUNvbW1hbmRDb21wbGV0ZShlLHRoaXMuY29ubmVjdGlvbil9X2hhbmRsZVBhcnNlQ29tcGxldGUoZSl7dGhpcy5cbmFjdGl2ZVF1ZXJ5Lm5hbWUmJih0aGlzLmNvbm5lY3Rpb24ucGFyc2VkU3RhdGVtZW50c1t0aGlzLmFjdGl2ZVF1ZXJ5Lm5hbWVdPXRoaXMuXG5hY3RpdmVRdWVyeS50ZXh0KX1faGFuZGxlQ29weUluUmVzcG9uc2UoZSl7dGhpcy5hY3RpdmVRdWVyeS5oYW5kbGVDb3B5SW5SZXNwb25zZShcbnRoaXMuY29ubmVjdGlvbil9X2hhbmRsZUNvcHlEYXRhKGUpe3RoaXMuYWN0aXZlUXVlcnkuaGFuZGxlQ29weURhdGEoZSx0aGlzLmNvbm5lY3Rpb24pfV9oYW5kbGVOb3RpZmljYXRpb24oZSl7XG50aGlzLmVtaXQoXCJub3RpZmljYXRpb25cIixlKX1faGFuZGxlTm90aWNlKGUpe3RoaXMuZW1pdChcIm5vdGljZVwiLGUpfWdldFN0YXJ0dXBDb25mKCl7XG52YXIgZT10aGlzLmNvbm5lY3Rpb25QYXJhbWV0ZXJzLHQ9e3VzZXI6ZS51c2VyLGRhdGFiYXNlOmUuZGF0YWJhc2V9LG49ZS5hcHBsaWNhdGlvbl9uYW1lfHxcbmUuZmFsbGJhY2tfYXBwbGljYXRpb25fbmFtZTtyZXR1cm4gbiYmKHQuYXBwbGljYXRpb25fbmFtZT1uKSxlLnJlcGxpY2F0aW9uJiYodC5yZXBsaWNhdGlvbj1cblwiXCIrZS5yZXBsaWNhdGlvbiksZS5zdGF0ZW1lbnRfdGltZW91dCYmKHQuc3RhdGVtZW50X3RpbWVvdXQ9U3RyaW5nKHBhcnNlSW50KGUuc3RhdGVtZW50X3RpbWVvdXQsXG4xMCkpKSxlLmxvY2tfdGltZW91dCYmKHQubG9ja190aW1lb3V0PVN0cmluZyhwYXJzZUludChlLmxvY2tfdGltZW91dCwxMCkpKSxlLmlkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0JiZcbih0LmlkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0PVN0cmluZyhwYXJzZUludChlLmlkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0LFxuMTApKSksZS5vcHRpb25zJiYodC5vcHRpb25zPWUub3B0aW9ucyksdH1jYW5jZWwoZSx0KXtpZihlLmFjdGl2ZVF1ZXJ5PT09dCl7dmFyIG49dGhpcy5cbmNvbm5lY3Rpb247dGhpcy5ob3N0JiZ0aGlzLmhvc3QuaW5kZXhPZihcIi9cIik9PT0wP24uY29ubmVjdCh0aGlzLmhvc3QrXCIvLnMuUEdTUUwuXCIrXG50aGlzLnBvcnQpOm4uY29ubmVjdCh0aGlzLnBvcnQsdGhpcy5ob3N0KSxuLm9uKFwiY29ubmVjdFwiLGZ1bmN0aW9uKCl7bi5jYW5jZWwoZS5wcm9jZXNzSUQsXG5lLnNlY3JldEtleSl9KX1lbHNlIGUucXVlcnlRdWV1ZS5pbmRleE9mKHQpIT09LTEmJmUucXVlcnlRdWV1ZS5zcGxpY2UoZS5xdWVyeVF1ZXVlLlxuaW5kZXhPZih0KSwxKX1zZXRUeXBlUGFyc2VyKGUsdCxuKXtyZXR1cm4gdGhpcy5fdHlwZXMuc2V0VHlwZVBhcnNlcihlLHQsbil9Z2V0VHlwZVBhcnNlcihlLHQpe1xucmV0dXJuIHRoaXMuX3R5cGVzLmdldFR5cGVQYXJzZXIoZSx0KX1lc2NhcGVJZGVudGlmaWVyKGUpe3JldHVybidcIicrZS5yZXBsYWNlKC9cIi9nLFxuJ1wiXCInKSsnXCInfWVzY2FwZUxpdGVyYWwoZSl7Zm9yKHZhciB0PSExLG49XCInXCIsaT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgcz1lW2ldO3M9PT1cblwiJ1wiP24rPXMrczpzPT09XCJcXFxcXCI/KG4rPXMrcyx0PSEwKTpuKz1zfXJldHVybiBuKz1cIidcIix0PT09ITAmJihuPVwiIEVcIituKSxufV9wdWxzZVF1ZXJ5UXVldWUoKXtcbmlmKHRoaXMucmVhZHlGb3JRdWVyeT09PSEwKWlmKHRoaXMuYWN0aXZlUXVlcnk9dGhpcy5xdWVyeVF1ZXVlLnNoaWZ0KCksdGhpcy5hY3RpdmVRdWVyeSl7XG50aGlzLnJlYWR5Rm9yUXVlcnk9ITEsdGhpcy5oYXNFeGVjdXRlZD0hMDtsZXQgZT10aGlzLmFjdGl2ZVF1ZXJ5LnN1Ym1pdCh0aGlzLmNvbm5lY3Rpb24pO1xuZSYmbS5uZXh0VGljaygoKT0+e3RoaXMuYWN0aXZlUXVlcnkuaGFuZGxlRXJyb3IoZSx0aGlzLmNvbm5lY3Rpb24pLHRoaXMucmVhZHlGb3JRdWVyeT1cbiEwLHRoaXMuX3B1bHNlUXVlcnlRdWV1ZSgpfSl9ZWxzZSB0aGlzLmhhc0V4ZWN1dGVkJiYodGhpcy5hY3RpdmVRdWVyeT1udWxsLHRoaXMuXG5lbWl0KFwiZHJhaW5cIikpfXF1ZXJ5KGUsdCxuKXt2YXIgaSxzLG8sdSxjO2lmKGU9PW51bGwpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsaWVudFxcXG4gd2FzIHBhc3NlZCBhIG51bGwgb3IgdW5kZWZpbmVkIHF1ZXJ5XCIpO3JldHVybiB0eXBlb2YgZS5zdWJtaXQ9PVwiZnVuY3Rpb25cIj8obz1lLlxucXVlcnlfdGltZW91dHx8dGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycy5xdWVyeV90aW1lb3V0LHM9aT1lLHR5cGVvZiB0PT1cImZ1bmN0aW9uXCImJlxuKGkuY2FsbGJhY2s9aS5jYWxsYmFja3x8dCkpOihvPXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMucXVlcnlfdGltZW91dCxpPW5ldyBQcyhcbmUsdCxuKSxpLmNhbGxiYWNrfHwocz1uZXcgdGhpcy5fUHJvbWlzZSgoaCxsKT0+e2kuY2FsbGJhY2s9KHksRSk9Pnk/bCh5KTpoKEUpfSkpKSxcbm8mJihjPWkuY2FsbGJhY2ssdT1zZXRUaW1lb3V0KCgpPT57dmFyIGg9bmV3IEVycm9yKFwiUXVlcnkgcmVhZCB0aW1lb3V0XCIpO20ubmV4dFRpY2soXG4oKT0+e2kuaGFuZGxlRXJyb3IoaCx0aGlzLmNvbm5lY3Rpb24pfSksYyhoKSxpLmNhbGxiYWNrPSgpPT57fTt2YXIgbD10aGlzLnF1ZXJ5UXVldWUuXG5pbmRleE9mKGkpO2w+LTEmJnRoaXMucXVlcnlRdWV1ZS5zcGxpY2UobCwxKSx0aGlzLl9wdWxzZVF1ZXJ5UXVldWUoKX0sbyksaS5jYWxsYmFjaz1cbihoLGwpPT57Y2xlYXJUaW1lb3V0KHUpLGMoaCxsKX0pLHRoaXMuYmluYXJ5JiYhaS5iaW5hcnkmJihpLmJpbmFyeT0hMCksaS5fcmVzdWx0JiZcbiFpLl9yZXN1bHQuX3R5cGVzJiYoaS5fcmVzdWx0Ll90eXBlcz10aGlzLl90eXBlcyksdGhpcy5fcXVlcnlhYmxlP3RoaXMuX2VuZGluZz8obS5cbm5leHRUaWNrKCgpPT57aS5oYW5kbGVFcnJvcihuZXcgRXJyb3IoXCJDbGllbnQgd2FzIGNsb3NlZCBhbmQgaXMgbm90IHF1ZXJ5YWJsZVwiKSxcbnRoaXMuY29ubmVjdGlvbil9KSxzKToodGhpcy5xdWVyeVF1ZXVlLnB1c2goaSksdGhpcy5fcHVsc2VRdWVyeVF1ZXVlKCkscyk6KG0ubmV4dFRpY2soXG4oKT0+e2kuaGFuZGxlRXJyb3IobmV3IEVycm9yKFwiQ2xpZW50IGhhcyBlbmNvdW50ZXJlZCBhIGNvbm5lY3Rpb24gZXJyb3IgYW5kIGlzIG5cXFxub3QgcXVlcnlhYmxlXCIpLHRoaXMuY29ubmVjdGlvbil9KSxzKX1yZWYoKXt0aGlzLmNvbm5lY3Rpb24ucmVmKCl9dW5yZWYoKXt0aGlzLmNvbm5lY3Rpb24uXG51bnJlZigpfWVuZChlKXtpZih0aGlzLl9lbmRpbmc9ITAsIXRoaXMuY29ubmVjdGlvbi5fY29ubmVjdGluZylpZihlKWUoKTtlbHNlIHJldHVybiB0aGlzLlxuX1Byb21pc2UucmVzb2x2ZSgpO2lmKHRoaXMuYWN0aXZlUXVlcnl8fCF0aGlzLl9xdWVyeWFibGU/dGhpcy5jb25uZWN0aW9uLnN0cmVhbS5cbmRlc3Ryb3koKTp0aGlzLmNvbm5lY3Rpb24uZW5kKCksZSl0aGlzLmNvbm5lY3Rpb24ub25jZShcImVuZFwiLGUpO2Vsc2UgcmV0dXJuIG5ldyB0aGlzLlxuX1Byb21pc2UodD0+e3RoaXMuY29ubmVjdGlvbi5vbmNlKFwiZW5kXCIsdCl9KX19O2EobG4sXCJDbGllbnRcIik7dmFyIHZ0PWxuO3Z0LlF1ZXJ5PVxuUHM7QnMuZXhwb3J0cz12dH0pO3ZhciBEcz1JKCh1ZixNcyk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIHZjPWdlKCkuRXZlbnRFbWl0dGVyLFJzPWEoZnVuY3Rpb24oKXt9LFwiXFxcbk5PT1BcIiksRnM9YSgocixlKT0+e2xldCB0PXIuZmluZEluZGV4KGUpO3JldHVybiB0PT09LTE/dm9pZCAwOnIuc3BsaWNlKHQsMSlbMF19LFxuXCJyZW1vdmVXaGVyZVwiKSxkbj1jbGFzcyBkbntjb25zdHJ1Y3RvcihlLHQsbil7dGhpcy5jbGllbnQ9ZSx0aGlzLmlkbGVMaXN0ZW5lcj10LFxudGhpcy50aW1lb3V0SWQ9bn19O2EoZG4sXCJJZGxlSXRlbVwiKTt2YXIgZm49ZG4seW49Y2xhc3MgeW57Y29uc3RydWN0b3IoZSl7dGhpcy5jYWxsYmFjaz1cbmV9fTthKHluLFwiUGVuZGluZ0l0ZW1cIik7dmFyIE5lPXluO2Z1bmN0aW9uIF9jKCl7dGhyb3cgbmV3IEVycm9yKFwiUmVsZWFzZSBjYWxsZWQgXFxcbm9uIGNsaWVudCB3aGljaCBoYXMgYWxyZWFkeSBiZWVuIHJlbGVhc2VkIHRvIHRoZSBwb29sLlwiKX1hKF9jLFwidGhyb3dPbkRvdWJsZVJlbGVcXFxuYXNlXCIpO2Z1bmN0aW9uIF90KHIsZSl7aWYoZSlyZXR1cm57Y2FsbGJhY2s6ZSxyZXN1bHQ6dm9pZCAwfTtsZXQgdCxuLGk9YShmdW5jdGlvbihvLHUpe1xubz90KG8pOm4odSl9LFwiY2JcIikscz1uZXcgcihmdW5jdGlvbihvLHUpe249byx0PXV9KS5jYXRjaChvPT57dGhyb3cgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoXG5vKSxvfSk7cmV0dXJue2NhbGxiYWNrOmkscmVzdWx0OnN9fWEoX3QsXCJwcm9taXNpZnlcIik7ZnVuY3Rpb24gQWMocixlKXtyZXR1cm4gYShmdW5jdGlvbiB0KG4pe1xubi5jbGllbnQ9ZSxlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix0KSxlLm9uKFwiZXJyb3JcIiwoKT0+e3IubG9nKFwiYWRkaXRpb25hbCBjbGllblxcXG50IGVycm9yIGFmdGVyIGRpc2Nvbm5lY3Rpb24gZHVlIHRvIGVycm9yXCIsbil9KSxyLl9yZW1vdmUoZSksci5lbWl0KFwiZXJyb3JcIixuLGUpfSxcblwiaWRsZUxpc3RlbmVyXCIpfWEoQWMsXCJtYWtlSWRsZUxpc3RlbmVyXCIpO3ZhciBtbj1jbGFzcyBtbiBleHRlbmRzIHZje2NvbnN0cnVjdG9yKGUsdCl7XG5zdXBlcigpLHRoaXMub3B0aW9ucz1PYmplY3QuYXNzaWduKHt9LGUpLGUhPW51bGwmJlwicGFzc3dvcmRcImluIGUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbnRoaXMub3B0aW9ucyxcInBhc3N3b3JkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLHZhbHVlOmUucGFzc3dvcmR9KSxcbmUhPW51bGwmJmUuc3NsJiZlLnNzbC5rZXkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLm9wdGlvbnMuc3NsLFwia2V5XCIse2VudW1lcmFibGU6ITF9KSxcbnRoaXMub3B0aW9ucy5tYXg9dGhpcy5vcHRpb25zLm1heHx8dGhpcy5vcHRpb25zLnBvb2xTaXplfHwxMCx0aGlzLm9wdGlvbnMubWF4VXNlcz1cbnRoaXMub3B0aW9ucy5tYXhVc2VzfHwxLzAsdGhpcy5vcHRpb25zLmFsbG93RXhpdE9uSWRsZT10aGlzLm9wdGlvbnMuYWxsb3dFeGl0T25JZGxlfHxcbiExLHRoaXMub3B0aW9ucy5tYXhMaWZldGltZVNlY29uZHM9dGhpcy5vcHRpb25zLm1heExpZmV0aW1lU2Vjb25kc3x8MCx0aGlzLmxvZz10aGlzLlxub3B0aW9ucy5sb2d8fGZ1bmN0aW9uKCl7fSx0aGlzLkNsaWVudD10aGlzLm9wdGlvbnMuQ2xpZW50fHx0fHxBdCgpLkNsaWVudCx0aGlzLlByb21pc2U9XG50aGlzLm9wdGlvbnMuUHJvbWlzZXx8Yi5Qcm9taXNlLHR5cGVvZiB0aGlzLm9wdGlvbnMuaWRsZVRpbWVvdXRNaWxsaXM+XCJ1XCImJih0aGlzLlxub3B0aW9ucy5pZGxlVGltZW91dE1pbGxpcz0xZTQpLHRoaXMuX2NsaWVudHM9W10sdGhpcy5faWRsZT1bXSx0aGlzLl9leHBpcmVkPW5ldyBXZWFrU2V0LFxudGhpcy5fcGVuZGluZ1F1ZXVlPVtdLHRoaXMuX2VuZENhbGxiYWNrPXZvaWQgMCx0aGlzLmVuZGluZz0hMSx0aGlzLmVuZGVkPSExfV9pc0Z1bGwoKXtcbnJldHVybiB0aGlzLl9jbGllbnRzLmxlbmd0aD49dGhpcy5vcHRpb25zLm1heH1fcHVsc2VRdWV1ZSgpe2lmKHRoaXMubG9nKFwicHVsc2UgcVxcXG51ZXVlXCIpLHRoaXMuZW5kZWQpe3RoaXMubG9nKFwicHVsc2UgcXVldWUgZW5kZWRcIik7cmV0dXJufWlmKHRoaXMuZW5kaW5nKXt0aGlzLmxvZyhcblwicHVsc2UgcXVldWUgb24gZW5kaW5nXCIpLHRoaXMuX2lkbGUubGVuZ3RoJiZ0aGlzLl9pZGxlLnNsaWNlKCkubWFwKHQ9Pnt0aGlzLl9yZW1vdmUoXG50LmNsaWVudCl9KSx0aGlzLl9jbGllbnRzLmxlbmd0aHx8KHRoaXMuZW5kZWQ9ITAsdGhpcy5fZW5kQ2FsbGJhY2soKSk7cmV0dXJufWlmKCF0aGlzLlxuX3BlbmRpbmdRdWV1ZS5sZW5ndGgpe3RoaXMubG9nKFwibm8gcXVldWVkIHJlcXVlc3RzXCIpO3JldHVybn1pZighdGhpcy5faWRsZS5sZW5ndGgmJlxudGhpcy5faXNGdWxsKCkpcmV0dXJuO2xldCBlPXRoaXMuX3BlbmRpbmdRdWV1ZS5zaGlmdCgpO2lmKHRoaXMuX2lkbGUubGVuZ3RoKXtsZXQgdD10aGlzLlxuX2lkbGUucG9wKCk7Y2xlYXJUaW1lb3V0KHQudGltZW91dElkKTtsZXQgbj10LmNsaWVudDtuLnJlZiYmbi5yZWYoKTtsZXQgaT10LmlkbGVMaXN0ZW5lcjtcbnJldHVybiB0aGlzLl9hY3F1aXJlQ2xpZW50KG4sZSxpLCExKX1pZighdGhpcy5faXNGdWxsKCkpcmV0dXJuIHRoaXMubmV3Q2xpZW50KGUpO1xudGhyb3cgbmV3IEVycm9yKFwidW5leHBlY3RlZCBjb25kaXRpb25cIil9X3JlbW92ZShlKXtsZXQgdD1Gcyh0aGlzLl9pZGxlLG49Pm4uY2xpZW50PT09XG5lKTt0IT09dm9pZCAwJiZjbGVhclRpbWVvdXQodC50aW1lb3V0SWQpLHRoaXMuX2NsaWVudHM9dGhpcy5fY2xpZW50cy5maWx0ZXIobj0+biE9PVxuZSksZS5lbmQoKSx0aGlzLmVtaXQoXCJyZW1vdmVcIixlKX1jb25uZWN0KGUpe2lmKHRoaXMuZW5kaW5nKXtsZXQgaT1uZXcgRXJyb3IoXCJDYW5cXFxubm90IHVzZSBhIHBvb2wgYWZ0ZXIgY2FsbGluZyBlbmQgb24gdGhlIHBvb2xcIik7cmV0dXJuIGU/ZShpKTp0aGlzLlByb21pc2UucmVqZWN0KFxuaSl9bGV0IHQ9X3QodGhpcy5Qcm9taXNlLGUpLG49dC5yZXN1bHQ7aWYodGhpcy5faXNGdWxsKCl8fHRoaXMuX2lkbGUubGVuZ3RoKXtpZih0aGlzLlxuX2lkbGUubGVuZ3RoJiZtLm5leHRUaWNrKCgpPT50aGlzLl9wdWxzZVF1ZXVlKCkpLCF0aGlzLm9wdGlvbnMuY29ubmVjdGlvblRpbWVvdXRNaWxsaXMpXG5yZXR1cm4gdGhpcy5fcGVuZGluZ1F1ZXVlLnB1c2gobmV3IE5lKHQuY2FsbGJhY2spKSxuO2xldCBpPWEoKHUsYyxoKT0+e2NsZWFyVGltZW91dChcbm8pLHQuY2FsbGJhY2sodSxjLGgpfSxcInF1ZXVlQ2FsbGJhY2tcIikscz1uZXcgTmUoaSksbz1zZXRUaW1lb3V0KCgpPT57RnModGhpcy5fcGVuZGluZ1F1ZXVlLFxudT0+dS5jYWxsYmFjaz09PWkpLHMudGltZWRPdXQ9ITAsdC5jYWxsYmFjayhuZXcgRXJyb3IoXCJ0aW1lb3V0IGV4Y2VlZGVkIHdoZW4gdHJ5XFxcbmluZyB0byBjb25uZWN0XCIpKX0sdGhpcy5vcHRpb25zLmNvbm5lY3Rpb25UaW1lb3V0TWlsbGlzKTtyZXR1cm4gdGhpcy5fcGVuZGluZ1F1ZXVlLlxucHVzaChzKSxufXJldHVybiB0aGlzLm5ld0NsaWVudChuZXcgTmUodC5jYWxsYmFjaykpLG59bmV3Q2xpZW50KGUpe2xldCB0PW5ldyB0aGlzLlxuQ2xpZW50KHRoaXMub3B0aW9ucyk7dGhpcy5fY2xpZW50cy5wdXNoKHQpO2xldCBuPUFjKHRoaXMsdCk7dGhpcy5sb2coXCJjaGVja2luZyBjXFxcbmxpZW50IHRpbWVvdXRcIik7bGV0IGkscz0hMTt0aGlzLm9wdGlvbnMuY29ubmVjdGlvblRpbWVvdXRNaWxsaXMmJihpPXNldFRpbWVvdXQoKCk9PntcbnRoaXMubG9nKFwiZW5kaW5nIGNsaWVudCBkdWUgdG8gdGltZW91dFwiKSxzPSEwLHQuY29ubmVjdGlvbj90LmNvbm5lY3Rpb24uc3RyZWFtLmRlc3Ryb3koKTpcbnQuZW5kKCl9LHRoaXMub3B0aW9ucy5jb25uZWN0aW9uVGltZW91dE1pbGxpcykpLHRoaXMubG9nKFwiY29ubmVjdGluZyBuZXcgY2xpZW50XCIpLFxudC5jb25uZWN0KG89PntpZihpJiZjbGVhclRpbWVvdXQoaSksdC5vbihcImVycm9yXCIsbiksbyl0aGlzLmxvZyhcImNsaWVudCBmYWlsZWQgdG9cXFxuIGNvbm5lY3RcIixvKSx0aGlzLl9jbGllbnRzPXRoaXMuX2NsaWVudHMuZmlsdGVyKHU9PnUhPT10KSxzJiYoby5tZXNzYWdlPVwiQ29ubmVjdFxcXG5pb24gdGVybWluYXRlZCBkdWUgdG8gY29ubmVjdGlvbiB0aW1lb3V0XCIpLHRoaXMuX3B1bHNlUXVldWUoKSxlLnRpbWVkT3V0fHxlLmNhbGxiYWNrKFxubyx2b2lkIDAsUnMpO2Vsc2V7aWYodGhpcy5sb2coXCJuZXcgY2xpZW50IGNvbm5lY3RlZFwiKSx0aGlzLm9wdGlvbnMubWF4TGlmZXRpbWVTZWNvbmRzIT09XG4wKXtsZXQgdT1zZXRUaW1lb3V0KCgpPT57dGhpcy5sb2coXCJlbmRpbmcgY2xpZW50IGR1ZSB0byBleHBpcmVkIGxpZmV0aW1lXCIpLHRoaXMuXG5fZXhwaXJlZC5hZGQodCksdGhpcy5faWRsZS5maW5kSW5kZXgoaD0+aC5jbGllbnQ9PT10KSE9PS0xJiZ0aGlzLl9hY3F1aXJlQ2xpZW50KFxudCxuZXcgTmUoKGgsbCx5KT0+eSgpKSxuLCExKX0sdGhpcy5vcHRpb25zLm1heExpZmV0aW1lU2Vjb25kcyoxZTMpO3UudW5yZWYoKSx0Lm9uY2UoXG5cImVuZFwiLCgpPT5jbGVhclRpbWVvdXQodSkpfXJldHVybiB0aGlzLl9hY3F1aXJlQ2xpZW50KHQsZSxuLCEwKX19KX1fYWNxdWlyZUNsaWVudChlLHQsbixpKXtcbmkmJnRoaXMuZW1pdChcImNvbm5lY3RcIixlKSx0aGlzLmVtaXQoXCJhY3F1aXJlXCIsZSksZS5yZWxlYXNlPXRoaXMuX3JlbGVhc2VPbmNlKGUsbiksXG5lLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixuKSx0LnRpbWVkT3V0P2kmJnRoaXMub3B0aW9ucy52ZXJpZnk/dGhpcy5vcHRpb25zLnZlcmlmeShcbmUsZS5yZWxlYXNlKTplLnJlbGVhc2UoKTppJiZ0aGlzLm9wdGlvbnMudmVyaWZ5P3RoaXMub3B0aW9ucy52ZXJpZnkoZSxzPT57aWYocylyZXR1cm4gZS5cbnJlbGVhc2UocyksdC5jYWxsYmFjayhzLHZvaWQgMCxScyk7dC5jYWxsYmFjayh2b2lkIDAsZSxlLnJlbGVhc2UpfSk6dC5jYWxsYmFjayh2b2lkIDAsXG5lLGUucmVsZWFzZSl9X3JlbGVhc2VPbmNlKGUsdCl7bGV0IG49ITE7cmV0dXJuIGk9PntuJiZfYygpLG49ITAsdGhpcy5fcmVsZWFzZShlLFxudCxpKX19X3JlbGVhc2UoZSx0LG4pe2lmKGUub24oXCJlcnJvclwiLHQpLGUuX3Bvb2xVc2VDb3VudD0oZS5fcG9vbFVzZUNvdW50fHwwKSsxLFxudGhpcy5lbWl0KFwicmVsZWFzZVwiLG4sZSksbnx8dGhpcy5lbmRpbmd8fCFlLl9xdWVyeWFibGV8fGUuX2VuZGluZ3x8ZS5fcG9vbFVzZUNvdW50Pj1cbnRoaXMub3B0aW9ucy5tYXhVc2VzKXtlLl9wb29sVXNlQ291bnQ+PXRoaXMub3B0aW9ucy5tYXhVc2VzJiZ0aGlzLmxvZyhcInJlbW92ZSBleFxcXG5wZW5kZWQgY2xpZW50XCIpLHRoaXMuX3JlbW92ZShlKSx0aGlzLl9wdWxzZVF1ZXVlKCk7cmV0dXJufWlmKHRoaXMuX2V4cGlyZWQuaGFzKGUpKXtcbnRoaXMubG9nKFwicmVtb3ZlIGV4cGlyZWQgY2xpZW50XCIpLHRoaXMuX2V4cGlyZWQuZGVsZXRlKGUpLHRoaXMuX3JlbW92ZShlKSx0aGlzLl9wdWxzZVF1ZXVlKCk7XG5yZXR1cm59bGV0IHM7dGhpcy5vcHRpb25zLmlkbGVUaW1lb3V0TWlsbGlzJiYocz1zZXRUaW1lb3V0KCgpPT57dGhpcy5sb2coXCJyZW1vdmVcXFxuIGlkbGUgY2xpZW50XCIpLHRoaXMuX3JlbW92ZShlKX0sdGhpcy5vcHRpb25zLmlkbGVUaW1lb3V0TWlsbGlzKSx0aGlzLm9wdGlvbnMuYWxsb3dFeGl0T25JZGxlJiZcbnMudW5yZWYoKSksdGhpcy5vcHRpb25zLmFsbG93RXhpdE9uSWRsZSYmZS51bnJlZigpLHRoaXMuX2lkbGUucHVzaChuZXcgZm4oZSx0LHMpKSxcbnRoaXMuX3B1bHNlUXVldWUoKX1xdWVyeShlLHQsbil7aWYodHlwZW9mIGU9PVwiZnVuY3Rpb25cIil7bGV0IHM9X3QodGhpcy5Qcm9taXNlLGUpO1xucmV0dXJuIFMoZnVuY3Rpb24oKXtyZXR1cm4gcy5jYWxsYmFjayhuZXcgRXJyb3IoXCJQYXNzaW5nIGEgZnVuY3Rpb24gYXMgdGhlIGZpcnN0XFxcbiBwYXJhbWV0ZXIgdG8gcG9vbC5xdWVyeSBpcyBub3Qgc3VwcG9ydGVkXCIpKX0pLHMucmVzdWx0fXR5cGVvZiB0PT1cImZ1bmN0aW9uXCImJihuPVxudCx0PXZvaWQgMCk7bGV0IGk9X3QodGhpcy5Qcm9taXNlLG4pO3JldHVybiBuPWkuY2FsbGJhY2ssdGhpcy5jb25uZWN0KChzLG8pPT57aWYocylcbnJldHVybiBuKHMpO2xldCB1PSExLGM9YShoPT57dXx8KHU9ITAsby5yZWxlYXNlKGgpLG4oaCkpfSxcIm9uRXJyb3JcIik7by5vbmNlKFwiZXJyXFxcbm9yXCIsYyksdGhpcy5sb2coXCJkaXNwYXRjaGluZyBxdWVyeVwiKTt0cnl7by5xdWVyeShlLHQsKGgsbCk9PntpZih0aGlzLmxvZyhcInF1ZXJ5IFxcXG5kaXNwYXRjaGVkXCIpLG8ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGMpLCF1KXJldHVybiB1PSEwLG8ucmVsZWFzZShoKSxoP24oaCk6bih2b2lkIDAsXG5sKX0pfWNhdGNoKGgpe3JldHVybiBvLnJlbGVhc2UoaCksbihoKX19KSxpLnJlc3VsdH1lbmQoZSl7aWYodGhpcy5sb2coXCJlbmRpbmdcIiksXG50aGlzLmVuZGluZyl7bGV0IG49bmV3IEVycm9yKFwiQ2FsbGVkIGVuZCBvbiBwb29sIG1vcmUgdGhhbiBvbmNlXCIpO3JldHVybiBlP2Uobik6XG50aGlzLlByb21pc2UucmVqZWN0KG4pfXRoaXMuZW5kaW5nPSEwO2xldCB0PV90KHRoaXMuUHJvbWlzZSxlKTtyZXR1cm4gdGhpcy5fZW5kQ2FsbGJhY2s9XG50LmNhbGxiYWNrLHRoaXMuX3B1bHNlUXVldWUoKSx0LnJlc3VsdH1nZXQgd2FpdGluZ0NvdW50KCl7cmV0dXJuIHRoaXMuX3BlbmRpbmdRdWV1ZS5cbmxlbmd0aH1nZXQgaWRsZUNvdW50KCl7cmV0dXJuIHRoaXMuX2lkbGUubGVuZ3RofWdldCBleHBpcmVkQ291bnQoKXtyZXR1cm4gdGhpcy5fY2xpZW50cy5cbnJlZHVjZSgoZSx0KT0+ZSsodGhpcy5fZXhwaXJlZC5oYXModCk/MTowKSwwKX1nZXQgdG90YWxDb3VudCgpe3JldHVybiB0aGlzLl9jbGllbnRzLlxubGVuZ3RofX07YShtbixcIlBvb2xcIik7dmFyIHBuPW1uO01zLmV4cG9ydHM9cG59KTt2YXIgT3M9e307WChPcyx7ZGVmYXVsdDooKT0+Q2N9KTt2YXIgQ2Msa3M9SygoKT0+e1widXNlIHN0cmljdFwiO3AoKTtDYz17fX0pO3ZhciBVcz1JKChmZixJYyk9PntJYy5leHBvcnRzPXtuYW1lOlwicGdcIix2ZXJzaW9uOlwiOC44LjBcIixkZXNjcmlwdGlvbjpcIlBvc3RncmVTUUxcXFxuIGNsaWVudCAtIHB1cmUgamF2YXNjcmlwdCAmIGxpYnBxIHdpdGggdGhlIHNhbWUgQVBJXCIsa2V5d29yZHM6W1wiZGF0YWJhc2VcIixcImxpYnBxXCIsXG5cInBnXCIsXCJwb3N0Z3JlXCIsXCJwb3N0Z3Jlc1wiLFwicG9zdGdyZXNxbFwiLFwicmRibXNcIl0saG9tZXBhZ2U6XCJodHRwczovL2dpdGh1Yi5jb20vYnJpXFxcbmFuYy9ub2RlLXBvc3RncmVzXCIscmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImdpdDovL2dpdGh1Yi5jb20vYnJpYW5jL25vZGUtcG9zdFxcXG5ncmVzLmdpdFwiLGRpcmVjdG9yeTpcInBhY2thZ2VzL3BnXCJ9LGF1dGhvcjpcIkJyaWFuIENhcmxzb24gPGJyaWFuLm0uY2FybHNvbkBnbWFpbC5cXFxuY29tPlwiLG1haW46XCIuL2xpYlwiLGRlcGVuZGVuY2llczp7XCJidWZmZXItd3JpdGVyXCI6XCIyLjAuMFwiLFwicGFja2V0LXJlYWRlclwiOlwiMS4wLjBcIixcblwicGctY29ubmVjdGlvbi1zdHJpbmdcIjpcIl4yLjUuMFwiLFwicGctcG9vbFwiOlwiXjMuNS4yXCIsXCJwZy1wcm90b2NvbFwiOlwiXjEuNS4wXCIsXCJwZy10eVxcXG5wZXNcIjpcIl4yLjEuMFwiLHBncGFzczpcIjEueFwifSxkZXZEZXBlbmRlbmNpZXM6e2FzeW5jOlwiMi42LjRcIixibHVlYmlyZDpcIjMuNS4yXCIsY286XCJcXFxuNC42LjBcIixcInBnLWNvcHktc3RyZWFtc1wiOlwiMC4zLjBcIn0scGVlckRlcGVuZGVuY2llczp7XCJwZy1uYXRpdmVcIjpcIj49My4wLjFcIn0scGVlckRlcGVuZGVuY2llc01ldGE6e1xuXCJwZy1uYXRpdmVcIjp7b3B0aW9uYWw6ITB9fSxzY3JpcHRzOnt0ZXN0OlwibWFrZSB0ZXN0LWFsbFwifSxmaWxlczpbXCJsaWJcIixcIlNQT05TT1JTXFxcbi5tZFwiXSxsaWNlbnNlOlwiTUlUXCIsZW5naW5lczp7bm9kZTpcIj49IDguMC4wXCJ9LGdpdEhlYWQ6XCJjOTlmYjJjMTI3ZGRmOGQ3MTI1MDBkYjJjXFxcbjdiOWE1NDkxYTE3ODY1NVwifX0pO3ZhciBRcz1JKChwZixOcyk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIHFzPWdlKCkuRXZlbnRFbWl0dGVyLFRjPShHZSgpLGsoSGUpKSxnbj10dCgpLFxuUWU9TnMuZXhwb3J0cz1mdW5jdGlvbihyLGUsdCl7cXMuY2FsbCh0aGlzKSxyPWduLm5vcm1hbGl6ZVF1ZXJ5Q29uZmlnKHIsZSx0KSx0aGlzLlxudGV4dD1yLnRleHQsdGhpcy52YWx1ZXM9ci52YWx1ZXMsdGhpcy5uYW1lPXIubmFtZSx0aGlzLmNhbGxiYWNrPXIuY2FsbGJhY2ssdGhpcy5cbnN0YXRlPVwibmV3XCIsdGhpcy5fYXJyYXlNb2RlPXIucm93TW9kZT09PVwiYXJyYXlcIix0aGlzLl9lbWl0Um93RXZlbnRzPSExLHRoaXMub24oXCJcXFxubmV3TGlzdGVuZXJcIixmdW5jdGlvbihuKXtuPT09XCJyb3dcIiYmKHRoaXMuX2VtaXRSb3dFdmVudHM9ITApfS5iaW5kKHRoaXMpKX07VGMuaW5oZXJpdHMoXG5RZSxxcyk7dmFyIFBjPXtzcWxTdGF0ZTpcImNvZGVcIixzdGF0ZW1lbnRQb3NpdGlvbjpcInBvc2l0aW9uXCIsbWVzc2FnZVByaW1hcnk6XCJtZXNzXFxcbmFnZVwiLGNvbnRleHQ6XCJ3aGVyZVwiLHNjaGVtYU5hbWU6XCJzY2hlbWFcIix0YWJsZU5hbWU6XCJ0YWJsZVwiLGNvbHVtbk5hbWU6XCJjb2x1bW5cIixkYXRhVHlwZU5hbWU6XCJcXFxuZGF0YVR5cGVcIixjb25zdHJhaW50TmFtZTpcImNvbnN0cmFpbnRcIixzb3VyY2VGaWxlOlwiZmlsZVwiLHNvdXJjZUxpbmU6XCJsaW5lXCIsc291cmNlRnVuY3Rpb246XCJcXFxucm91dGluZVwifTtRZS5wcm90b3R5cGUuaGFuZGxlRXJyb3I9ZnVuY3Rpb24ocil7dmFyIGU9dGhpcy5uYXRpdmUucHEucmVzdWx0RXJyb3JGaWVsZHMoKTtcbmlmKGUpZm9yKHZhciB0IGluIGUpe3ZhciBuPVBjW3RdfHx0O3Jbbl09ZVt0XX10aGlzLmNhbGxiYWNrP3RoaXMuY2FsbGJhY2socik6dGhpcy5cbmVtaXQoXCJlcnJvclwiLHIpLHRoaXMuc3RhdGU9XCJlcnJvclwifTtRZS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihyLGUpe3JldHVybiB0aGlzLlxuX2dldFByb21pc2UoKS50aGVuKHIsZSl9O1FlLnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbihyKXtyZXR1cm4gdGhpcy5fZ2V0UHJvbWlzZSgpLlxuY2F0Y2gocil9O1FlLnByb3RvdHlwZS5fZ2V0UHJvbWlzZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9taXNlP3RoaXMuX3Byb21pc2U6XG4odGhpcy5fcHJvbWlzZT1uZXcgUHJvbWlzZShmdW5jdGlvbihyLGUpe3RoaXMuX29uY2UoXCJlbmRcIixyKSx0aGlzLl9vbmNlKFwiZXJyb3JcIixcbmUpfS5iaW5kKHRoaXMpKSx0aGlzLl9wcm9taXNlKX07UWUucHJvdG90eXBlLnN1Ym1pdD1mdW5jdGlvbihyKXt0aGlzLnN0YXRlPVwicnVublxcXG5pbmdcIjt2YXIgZT10aGlzO3RoaXMubmF0aXZlPXIubmF0aXZlLHIubmF0aXZlLmFycmF5TW9kZT10aGlzLl9hcnJheU1vZGU7dmFyIHQ9YShcbmZ1bmN0aW9uKHMsbyx1KXtpZihyLm5hdGl2ZS5hcnJheU1vZGU9ITEsUyhmdW5jdGlvbigpe2UuZW1pdChcIl9kb25lXCIpfSkscylyZXR1cm4gZS5cbmhhbmRsZUVycm9yKHMpO2UuX2VtaXRSb3dFdmVudHMmJih1Lmxlbmd0aD4xP28uZm9yRWFjaCgoYyxoKT0+e2MuZm9yRWFjaChsPT57ZS5lbWl0KFxuXCJyb3dcIixsLHVbaF0pfSl9KTpvLmZvckVhY2goZnVuY3Rpb24oYyl7ZS5lbWl0KFwicm93XCIsYyx1KX0pKSxlLnN0YXRlPVwiZW5kXCIsZS5lbWl0KFxuXCJlbmRcIix1KSxlLmNhbGxiYWNrJiZlLmNhbGxiYWNrKG51bGwsdSl9LFwiYWZ0ZXJcIik7aWYobS5kb21haW4mJih0PW0uZG9tYWluLmJpbmQoXG50KSksdGhpcy5uYW1lKXt0aGlzLm5hbWUubGVuZ3RoPjYzJiYoY29uc29sZS5lcnJvcihcIldhcm5pbmchIFBvc3RncmVzIG9ubHkgc3VwcG9cXFxucnRzIDYzIGNoYXJhY3RlcnMgZm9yIHF1ZXJ5IG5hbWVzLlwiKSxjb25zb2xlLmVycm9yKFwiWW91IHN1cHBsaWVkICVzICglcylcIix0aGlzLm5hbWUsXG50aGlzLm5hbWUubGVuZ3RoKSxjb25zb2xlLmVycm9yKFwiVGhpcyBjYW4gY2F1c2UgY29uZmxpY3RzIGFuZCBzaWxlbnQgZXJyb3JzIGV4ZWNcXFxudXRpbmcgcXVlcmllc1wiKSk7dmFyIG49KHRoaXMudmFsdWVzfHxbXSkubWFwKGduLnByZXBhcmVWYWx1ZSk7aWYoci5uYW1lZFF1ZXJpZXNbdGhpcy5cbm5hbWVdKXtpZih0aGlzLnRleHQmJnIubmFtZWRRdWVyaWVzW3RoaXMubmFtZV0hPT10aGlzLnRleHQpe2xldCBzPW5ldyBFcnJvcihgUHJlXFxcbnBhcmVkIHN0YXRlbWVudHMgbXVzdCBiZSB1bmlxdWUgLSAnJHt0aGlzLm5hbWV9JyB3YXMgdXNlZCBmb3IgYSBkaWZmZXJlbnQgc3RhdGVtXFxcbmVudGApO3JldHVybiB0KHMpfXJldHVybiByLm5hdGl2ZS5leGVjdXRlKHRoaXMubmFtZSxuLHQpfXJldHVybiByLm5hdGl2ZS5wcmVwYXJlKFxudGhpcy5uYW1lLHRoaXMudGV4dCxuLmxlbmd0aCxmdW5jdGlvbihzKXtyZXR1cm4gcz90KHMpOihyLm5hbWVkUXVlcmllc1tlLm5hbWVdPWUuXG50ZXh0LGUubmF0aXZlLmV4ZWN1dGUoZS5uYW1lLG4sdCkpfSl9ZWxzZSBpZih0aGlzLnZhbHVlcyl7aWYoIUFycmF5LmlzQXJyYXkodGhpcy5cbnZhbHVlcykpe2xldCBzPW5ldyBFcnJvcihcIlF1ZXJ5IHZhbHVlcyBtdXN0IGJlIGFuIGFycmF5XCIpO3JldHVybiB0KHMpfXZhciBpPXRoaXMuXG52YWx1ZXMubWFwKGduLnByZXBhcmVWYWx1ZSk7ci5uYXRpdmUucXVlcnkodGhpcy50ZXh0LGksdCl9ZWxzZSByLm5hdGl2ZS5xdWVyeSh0aGlzLlxudGV4dCx0KX19KTt2YXIgR3M9SSgoZ2YsSHMpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBCYz0oa3MoKSxrKE9zKSksTGM9aHIoKSxtZj1VcygpLFdzPWdlKCkuXG5FdmVudEVtaXR0ZXIsUmM9KEdlKCksayhIZSkpLEZjPWd0KCksanM9UXMoKSxaPUhzLmV4cG9ydHM9ZnVuY3Rpb24ocil7V3MuY2FsbCh0aGlzKSxcbnI9cnx8e30sdGhpcy5fUHJvbWlzZT1yLlByb21pc2V8fGIuUHJvbWlzZSx0aGlzLl90eXBlcz1uZXcgTGMoci50eXBlcyksdGhpcy5uYXRpdmU9XG5uZXcgQmMoe3R5cGVzOnRoaXMuX3R5cGVzfSksdGhpcy5fcXVlcnlRdWV1ZT1bXSx0aGlzLl9lbmRpbmc9ITEsdGhpcy5fY29ubmVjdGluZz1cbiExLHRoaXMuX2Nvbm5lY3RlZD0hMSx0aGlzLl9xdWVyeWFibGU9ITA7dmFyIGU9dGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycz1uZXcgRmMoXG5yKTt0aGlzLnVzZXI9ZS51c2VyLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicGFzc3dvcmRcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsXG53cml0YWJsZTohMCx2YWx1ZTplLnBhc3N3b3JkfSksdGhpcy5kYXRhYmFzZT1lLmRhdGFiYXNlLHRoaXMuaG9zdD1lLmhvc3QsdGhpcy5wb3J0PVxuZS5wb3J0LHRoaXMubmFtZWRRdWVyaWVzPXt9fTtaLlF1ZXJ5PWpzO1JjLmluaGVyaXRzKFosV3MpO1oucHJvdG90eXBlLl9lcnJvckFsbFF1ZXJpZXM9XG5mdW5jdGlvbihyKXtsZXQgZT1hKHQ9PnttLm5leHRUaWNrKCgpPT57dC5uYXRpdmU9dGhpcy5uYXRpdmUsdC5oYW5kbGVFcnJvcihyKX0pfSxcblwiZW5xdWV1ZUVycm9yXCIpO3RoaXMuX2hhc0FjdGl2ZVF1ZXJ5KCkmJihlKHRoaXMuX2FjdGl2ZVF1ZXJ5KSx0aGlzLl9hY3RpdmVRdWVyeT1cbm51bGwpLHRoaXMuX3F1ZXJ5UXVldWUuZm9yRWFjaChlKSx0aGlzLl9xdWVyeVF1ZXVlLmxlbmd0aD0wfTtaLnByb3RvdHlwZS5fY29ubmVjdD1cbmZ1bmN0aW9uKHIpe3ZhciBlPXRoaXM7aWYodGhpcy5fY29ubmVjdGluZyl7bS5uZXh0VGljaygoKT0+cihuZXcgRXJyb3IoXCJDbGllbnQgaFxcXG5hcyBhbHJlYWR5IGJlZW4gY29ubmVjdGVkLiBZb3UgY2Fubm90IHJldXNlIGEgY2xpZW50LlwiKSkpO3JldHVybn10aGlzLl9jb25uZWN0aW5nPVxuITAsdGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycy5nZXRMaWJwcUNvbm5lY3Rpb25TdHJpbmcoZnVuY3Rpb24odCxuKXtpZih0KXJldHVybiByKFxudCk7ZS5uYXRpdmUuY29ubmVjdChuLGZ1bmN0aW9uKGkpe2lmKGkpcmV0dXJuIGUubmF0aXZlLmVuZCgpLHIoaSk7ZS5fY29ubmVjdGVkPSEwLFxuZS5uYXRpdmUub24oXCJlcnJvclwiLGZ1bmN0aW9uKHMpe2UuX3F1ZXJ5YWJsZT0hMSxlLl9lcnJvckFsbFF1ZXJpZXMocyksZS5lbWl0KFwiZXJcXFxucm9yXCIscyl9KSxlLm5hdGl2ZS5vbihcIm5vdGlmaWNhdGlvblwiLGZ1bmN0aW9uKHMpe2UuZW1pdChcIm5vdGlmaWNhdGlvblwiLHtjaGFubmVsOnMuXG5yZWxuYW1lLHBheWxvYWQ6cy5leHRyYX0pfSksZS5lbWl0KFwiY29ubmVjdFwiKSxlLl9wdWxzZVF1ZXJ5UXVldWUoITApLHIoKX0pfSl9O1ouXG5wcm90b3R5cGUuY29ubmVjdD1mdW5jdGlvbihyKXtpZihyKXt0aGlzLl9jb25uZWN0KHIpO3JldHVybn1yZXR1cm4gbmV3IHRoaXMuX1Byb21pc2UoXG4oZSx0KT0+e3RoaXMuX2Nvbm5lY3Qobj0+e24/dChuKTplKCl9KX0pfTtaLnByb3RvdHlwZS5xdWVyeT1mdW5jdGlvbihyLGUsdCl7dmFyIG4sXG5pLHMsbyx1O2lmKHI9PW51bGwpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsaWVudCB3YXMgcGFzc2VkIGEgbnVsbCBvciB1bmRlZmluZWQgcXVcXFxuZXJ5XCIpO2lmKHR5cGVvZiByLnN1Ym1pdD09XCJmdW5jdGlvblwiKXM9ci5xdWVyeV90aW1lb3V0fHx0aGlzLmNvbm5lY3Rpb25QYXJhbWV0ZXJzLlxucXVlcnlfdGltZW91dCxpPW49cix0eXBlb2YgZT09XCJmdW5jdGlvblwiJiYoci5jYWxsYmFjaz1lKTtlbHNlIGlmKHM9dGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycy5cbnF1ZXJ5X3RpbWVvdXQsbj1uZXcganMocixlLHQpLCFuLmNhbGxiYWNrKXtsZXQgYyxoO2k9bmV3IHRoaXMuX1Byb21pc2UoKGwseSk9PntjPVxubCxoPXl9KSxuLmNhbGxiYWNrPShsLHkpPT5sP2gobCk6Yyh5KX1yZXR1cm4gcyYmKHU9bi5jYWxsYmFjayxvPXNldFRpbWVvdXQoKCk9PntcbnZhciBjPW5ldyBFcnJvcihcIlF1ZXJ5IHJlYWQgdGltZW91dFwiKTttLm5leHRUaWNrKCgpPT57bi5oYW5kbGVFcnJvcihjLHRoaXMuY29ubmVjdGlvbil9KSxcbnUoYyksbi5jYWxsYmFjaz0oKT0+e307dmFyIGg9dGhpcy5fcXVlcnlRdWV1ZS5pbmRleE9mKG4pO2g+LTEmJnRoaXMuX3F1ZXJ5UXVldWUuXG5zcGxpY2UoaCwxKSx0aGlzLl9wdWxzZVF1ZXJ5UXVldWUoKX0scyksbi5jYWxsYmFjaz0oYyxoKT0+e2NsZWFyVGltZW91dChvKSx1KGMsaCl9KSxcbnRoaXMuX3F1ZXJ5YWJsZT90aGlzLl9lbmRpbmc/KG4ubmF0aXZlPXRoaXMubmF0aXZlLG0ubmV4dFRpY2soKCk9PntuLmhhbmRsZUVycm9yKFxubmV3IEVycm9yKFwiQ2xpZW50IHdhcyBjbG9zZWQgYW5kIGlzIG5vdCBxdWVyeWFibGVcIikpfSksaSk6KHRoaXMuX3F1ZXJ5UXVldWUucHVzaChcbm4pLHRoaXMuX3B1bHNlUXVlcnlRdWV1ZSgpLGkpOihuLm5hdGl2ZT10aGlzLm5hdGl2ZSxtLm5leHRUaWNrKCgpPT57bi5oYW5kbGVFcnJvcihcbm5ldyBFcnJvcihcIkNsaWVudCBoYXMgZW5jb3VudGVyZWQgYSBjb25uZWN0aW9uIGVycm9yIGFuZCBpcyBub3QgcXVlcnlhYmxlXCIpKX0pLGkpfTtcbloucHJvdG90eXBlLmVuZD1mdW5jdGlvbihyKXt2YXIgZT10aGlzO3RoaXMuX2VuZGluZz0hMCx0aGlzLl9jb25uZWN0ZWR8fHRoaXMub25jZShcblwiY29ubmVjdFwiLHRoaXMuZW5kLmJpbmQodGhpcyxyKSk7dmFyIHQ7cmV0dXJuIHJ8fCh0PW5ldyB0aGlzLl9Qcm9taXNlKGZ1bmN0aW9uKG4saSl7XG5yPWEocz0+cz9pKHMpOm4oKSxcImNiXCIpfSkpLHRoaXMubmF0aXZlLmVuZChmdW5jdGlvbigpe2UuX2Vycm9yQWxsUXVlcmllcyhuZXcgRXJyb3IoXG5cIkNvbm5lY3Rpb24gdGVybWluYXRlZFwiKSksbS5uZXh0VGljaygoKT0+e2UuZW1pdChcImVuZFwiKSxyJiZyKCl9KX0pLHR9O1oucHJvdG90eXBlLlxuX2hhc0FjdGl2ZVF1ZXJ5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2FjdGl2ZVF1ZXJ5JiZ0aGlzLl9hY3RpdmVRdWVyeS5zdGF0ZSE9PVwiXFxcbmVycm9yXCImJnRoaXMuX2FjdGl2ZVF1ZXJ5LnN0YXRlIT09XCJlbmRcIn07Wi5wcm90b3R5cGUuX3B1bHNlUXVlcnlRdWV1ZT1mdW5jdGlvbihyKXtcbmlmKHRoaXMuX2Nvbm5lY3RlZCYmIXRoaXMuX2hhc0FjdGl2ZVF1ZXJ5KCkpe3ZhciBlPXRoaXMuX3F1ZXJ5UXVldWUuc2hpZnQoKTtpZighZSl7XG5yfHx0aGlzLmVtaXQoXCJkcmFpblwiKTtyZXR1cm59dGhpcy5fYWN0aXZlUXVlcnk9ZSxlLnN1Ym1pdCh0aGlzKTt2YXIgdD10aGlzO2Uub25jZShcblwiX2RvbmVcIixmdW5jdGlvbigpe3QuX3B1bHNlUXVlcnlRdWV1ZSgpfSl9fTtaLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24ocil7dGhpcy5cbl9hY3RpdmVRdWVyeT09PXI/dGhpcy5uYXRpdmUuY2FuY2VsKGZ1bmN0aW9uKCl7fSk6dGhpcy5fcXVlcnlRdWV1ZS5pbmRleE9mKHIpIT09XG4tMSYmdGhpcy5fcXVlcnlRdWV1ZS5zcGxpY2UodGhpcy5fcXVlcnlRdWV1ZS5pbmRleE9mKHIpLDEpfTtaLnByb3RvdHlwZS5yZWY9ZnVuY3Rpb24oKXt9O1xuWi5wcm90b3R5cGUudW5yZWY9ZnVuY3Rpb24oKXt9O1oucHJvdG90eXBlLnNldFR5cGVQYXJzZXI9ZnVuY3Rpb24ocixlLHQpe3JldHVybiB0aGlzLlxuX3R5cGVzLnNldFR5cGVQYXJzZXIocixlLHQpfTtaLnByb3RvdHlwZS5nZXRUeXBlUGFyc2VyPWZ1bmN0aW9uKHIsZSl7cmV0dXJuIHRoaXMuXG5fdHlwZXMuZ2V0VHlwZVBhcnNlcihyLGUpfX0pO3ZhciB3bj1JKChTZiwkcyk9PntcInVzZSBzdHJpY3RcIjtwKCk7JHMuZXhwb3J0cz1HcygpfSk7dmFyIEF0PUkoKEVmLG50KT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgTWM9THMoKSxEYz1ldCgpLE9jPWNuKCksa2M9RHMoKSx7RGF0YWJhc2VFcnJvcjpVY309b24oKSxcbnFjPWEocj0+e3ZhciBlO3JldHVybiBlPWNsYXNzIGV4dGVuZHMga2N7Y29uc3RydWN0b3Iobil7c3VwZXIobixyKX19LGEoZSxcIkJvdW5kUFxcXG5vb2xcIiksZX0sXCJwb29sRmFjdG9yeVwiKSxibj1hKGZ1bmN0aW9uKHIpe3RoaXMuZGVmYXVsdHM9RGMsdGhpcy5DbGllbnQ9cix0aGlzLlF1ZXJ5PVxudGhpcy5DbGllbnQuUXVlcnksdGhpcy5Qb29sPXFjKHRoaXMuQ2xpZW50KSx0aGlzLl9wb29scz1bXSx0aGlzLkNvbm5lY3Rpb249T2MsdGhpcy5cbnR5cGVzPVhlKCksdGhpcy5EYXRhYmFzZUVycm9yPVVjfSxcIlBHXCIpO3R5cGVvZiBtLmVudi5OT0RFX1BHX0ZPUkNFX05BVElWRTxcInVcIj9udC5cbmV4cG9ydHM9bmV3IGJuKHduKCkpOihudC5leHBvcnRzPW5ldyBibihNYyksT2JqZWN0LmRlZmluZVByb3BlcnR5KG50LmV4cG9ydHMsXCJuYVxcXG50aXZlXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLGdldCgpe3ZhciByPW51bGw7dHJ5e3I9bmV3IGJuKHduKCkpfWNhdGNoKGUpe1xuaWYoZS5jb2RlIT09XCJNT0RVTEVfTk9UX0ZPVU5EXCIpdGhyb3cgZX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG50LmV4cG9ydHMsXCJcXFxubmF0aXZlXCIse3ZhbHVlOnJ9KSxyfX0pKX0pO3AoKTt2YXIgQ3Q9V2UoQXQoKSk7d3QoKTtwKCk7ZnIoKTt3dCgpO3ZhciB6cz1XZSh0dCgpKTt2YXIgU249Y2xhc3MgU24gZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyk7VCh0aGlzLFwibmFtZVwiLFwiTlxcXG5lb25EYkVycm9yXCIpO1QodGhpcyxcImNvZGVcIixudWxsKTtUKHRoaXMsXCJzb3VyY2VFcnJvclwiKX19O2EoU24sXCJOZW9uRGJFcnJvclwiKTt2YXIgQWU9U24sXG5Lcz1cInRyYW5zYWN0aW9uKCkgZXhwZWN0cyBhbiBhcnJheSBvZiBxdWVyaWVzLCBvciBhIGZ1bmN0aW9uIHJldHVybmluZyBhbiBhcnJheSBcXFxub2YgcXVlcmllc1wiO2Z1bmN0aW9uIFlzKHIse2FycmF5TW9kZTplLGZ1bGxSZXN1bHRzOnQsZmV0Y2hPcHRpb25zOm4saXNvbGF0aW9uTGV2ZWw6aSxcbnJlYWRPbmx5OnMsZGVmZXJyYWJsZTpvLHF1ZXJ5Q2FsbGJhY2s6dSxyZXN1bHRDYWxsYmFjazpjfT17fSl7aWYoIXIpdGhyb3cgbmV3IEVycm9yKFxuXCJObyBkYXRhYmFzZSBjb25uZWN0aW9uIHN0cmluZyB3YXMgcHJvdmlkZWQgdG8gYG5lb24oKWAuIFBlcmhhcHMgYW4gZW52aXJvbm1lbnQgXFxcbnZhcmlhYmxlIGhhcyBub3QgYmVlbiBzZXQ/XCIpO2xldCBoO3RyeXtoPWxyKHIpfWNhdGNoe3Rocm93IG5ldyBFcnJvcihcIkRhdGFiYXNlIGNcXFxub25uZWN0aW9uIHN0cmluZyBwcm92aWRlZCB0byBgbmVvbigpYCBpcyBub3QgYSB2YWxpZCBVUkwuIENvbm5lY3Rpb24gc3RyaW5nOiBcIitTdHJpbmcoXG5yKSl9bGV0e3Byb3RvY29sOmwsdXNlcm5hbWU6eSxwYXNzd29yZDpFLGhvc3RuYW1lOl8scG9ydDpQLHBhdGhuYW1lOk59PWg7aWYobCE9PVxuXCJwb3N0Z3JlczpcIiYmbCE9PVwicG9zdGdyZXNxbDpcInx8IXl8fCFFfHwhX3x8IU4pdGhyb3cgbmV3IEVycm9yKFwiRGF0YWJhc2UgY29ubmVjdFxcXG5pb24gc3RyaW5nIGZvcm1hdCBmb3IgYG5lb24oKWAgc2hvdWxkIGJlOiBwb3N0Z3Jlc3FsOi8vdXNlcjpwYXNzd29yZEBob3N0LnRsZC9kYlxcXG5uYW1lP29wdGlvbj12YWx1ZVwiKTtmdW5jdGlvbiBKKEEsLi4uZyl7bGV0IEQsSDtpZih0eXBlb2YgQT09XCJzdHJpbmdcIilEPUEsSD1nWzFdLFxuZz1nWzBdPz9bXTtlbHNle0Q9XCJcIjtmb3IobGV0IFc9MDtXPEEubGVuZ3RoO1crKylEKz1BW1ddLFc8Zy5sZW5ndGgmJihEKz1cIiRcIisoVysxKSl9XG5nPWcubWFwKFc9PigwLHpzLnByZXBhcmVWYWx1ZSkoVykpO2xldCBRPXtxdWVyeTpELHBhcmFtczpnfTtyZXR1cm4gdSYmdShRKSxOYyhwZSxcblEsSCl9YShKLFwicmVzb2x2ZVwiKSxKLnRyYW5zYWN0aW9uPWFzeW5jKEEsZyk9PntpZih0eXBlb2YgQT09XCJmdW5jdGlvblwiJiYoQT1BKEopKSxcbiFBcnJheS5pc0FycmF5KEEpKXRocm93IG5ldyBFcnJvcihLcyk7bGV0IEQ9QS5tYXAoSD0+e2lmKEhbU3ltYm9sLnRvU3RyaW5nVGFnXSE9PVxuXCJOZW9uUXVlcnlQcm9taXNlXCIpdGhyb3cgbmV3IEVycm9yKEtzKTtyZXR1cm4gSC5wYXJhbWV0ZXJpemVkUXVlcnl9KTtyZXR1cm4gcGUoRCxcbmcpfTthc3luYyBmdW5jdGlvbiBwZShBLGcpe2xldCBEPW4/P3t9LHtmZXRjaEVuZHBvaW50OkgsZmV0Y2hDb25uZWN0aW9uQ2FjaGU6USxmZXRjaEZ1bmN0aW9uOld9PV9lLFxudWU9dHlwZW9mIEg9PVwiZnVuY3Rpb25cIj9IKF8sUCk6SCxkZT1BcnJheS5pc0FycmF5KEEpP3txdWVyaWVzOkF9OkEsTD1lPz8hMSxHPXQ/P1xuITEsY2U9aSx5ZT1zLHhlPW87ZyE9PXZvaWQgMCYmKGcuYXJyYXlNb2RlIT09dm9pZCAwJiYoTD1nLmFycmF5TW9kZSksZy5mdWxsUmVzdWx0cyE9PVxudm9pZCAwJiYoRz1nLmZ1bGxSZXN1bHRzKSxnLmZldGNoT3B0aW9ucyE9PXZvaWQgMCYmKEQ9ey4uLkQsLi4uZy5mZXRjaE9wdGlvbnN9KSxcbmcuaXNvbGF0aW9uTGV2ZWwhPT12b2lkIDAmJihjZT1nLmlzb2xhdGlvbkxldmVsKSxnLnJlYWRPbmx5IT09dm9pZCAwJiYoeWU9Zy5yZWFkT25seSksXG5nLmRlZmVycmFibGUhPT12b2lkIDAmJih4ZT1nLmRlZmVycmFibGUpKTtsZXQgaGU9e1wiTmVvbi1Db25uZWN0aW9uLVN0cmluZ1wiOnIsXCJOZVxcXG5vbi1SYXctVGV4dC1PdXRwdXRcIjpcInRydWVcIixcIk5lb24tQXJyYXktTW9kZVwiOlwidHJ1ZVwifTtRPT09ITAmJihoZVtcIk5lb24tUG9vbC1PcHQtXFxcbkluXCJdPVwidHJ1ZVwiKSxBcnJheS5pc0FycmF5KEEpJiYoY2UhPT12b2lkIDAmJihoZVtcIk5lb24tQmF0Y2gtSXNvbGF0aW9uLUxldmVsXCJdPWNlKSxcbnllIT09dm9pZCAwJiYoaGVbXCJOZW9uLUJhdGNoLVJlYWQtT25seVwiXT1TdHJpbmcoeWUpKSx4ZSE9PXZvaWQgMCYmKGhlW1wiTmVvbi1CYXRjXFxcbmgtRGVmZXJyYWJsZVwiXT1TdHJpbmcoeGUpKSk7bGV0IGllO3RyeXtpZT1hd2FpdChXPz9mZXRjaCkodWUse21ldGhvZDpcIlBPU1RcIixib2R5OkpTT04uXG5zdHJpbmdpZnkoZGUpLGhlYWRlcnM6aGUsLi4uRH0pfWNhdGNoKHNlKXtsZXQgJD1uZXcgQWUoYEVycm9yIGNvbm5lY3RpbmcgdG8gZGF0YVxcXG5iYXNlOiAke3NlLm1lc3NhZ2V9YCk7dGhyb3cgJC5zb3VyY2VFcnJvcj1zZSwkfWlmKGllLm9rKXtsZXQgc2U9YXdhaXQgaWUuanNvbigpO1xuaWYoQXJyYXkuaXNBcnJheShBKSl7bGV0ICQ9c2UucmVzdWx0cztpZighQXJyYXkuaXNBcnJheSgkKSl0aHJvdyBuZXcgQWUoXCJOZW9uIGluXFxcbnRlcm5hbCBlcnJvcjogdW5leHBlY3RlZCByZXN1bHQgZm9ybWF0XCIpO3JldHVybiAkLm1hcCgobmUsQ2UpPT5WcyhuZSx7YXJyYXlNb2RlOkwsXG5mdWxsUmVzdWx0czpHLHBhcmFtZXRlcml6ZWRRdWVyeTpBW0NlXSxyZXN1bHRDYWxsYmFjazpjfSkpfWVsc2UgcmV0dXJuIFZzKHNlLHthcnJheU1vZGU6TCxcbmZ1bGxSZXN1bHRzOkcscGFyYW1ldGVyaXplZFF1ZXJ5OkEscmVzdWx0Q2FsbGJhY2s6Y30pfWVsc2V7bGV0e3N0YXR1czpzZX09aWU7aWYoc2U9PT1cbjQwMCl7bGV0e21lc3NhZ2U6JCxjb2RlOm5lfT1hd2FpdCBpZS5qc29uKCksQ2U9bmV3IEFlKCQpO3Rocm93IENlLmNvZGU9bmUsQ2V9ZWxzZXtcbmxldCAkPWF3YWl0IGllLnRleHQoKTt0aHJvdyBuZXcgQWUoYFNlcnZlciBlcnJvciAoSFRUUCBzdGF0dXMgJHtzZX0pOiAkeyR9YCl9fX1yZXR1cm4gYShcbnBlLFwiZXhlY3V0ZVwiKSxKfWEoWXMsXCJuZW9uXCIpO2Z1bmN0aW9uIE5jKHIsZSx0KXtyZXR1cm57W1N5bWJvbC50b1N0cmluZ1RhZ106XCJOZW9cXFxublF1ZXJ5UHJvbWlzZVwiLHBhcmFtZXRlcml6ZWRRdWVyeTplLG9wdHM6dCx0aGVuOihuLGkpPT5yKGUsdCkudGhlbihuLGkpLGNhdGNoOm49PnIoXG5lLHQpLmNhdGNoKG4pLGZpbmFsbHk6bj0+cihlLHQpLmZpbmFsbHkobil9fWEoTmMsXCJjcmVhdGVOZW9uUXVlcnlQcm9taXNlXCIpO2Z1bmN0aW9uIFZzKHIse1xuYXJyYXlNb2RlOmUsZnVsbFJlc3VsdHM6dCxwYXJhbWV0ZXJpemVkUXVlcnk6bixyZXN1bHRDYWxsYmFjazppfSl7bGV0IHM9ci5maWVsZHMuXG5tYXAoYz0+Yy5uYW1lKSxvPXIuZmllbGRzLm1hcChjPT5TZS50eXBlcy5nZXRUeXBlUGFyc2VyKGMuZGF0YVR5cGVJRCkpLHU9ZT09PSEwP1xuci5yb3dzLm1hcChjPT5jLm1hcCgoaCxsKT0+aD09PW51bGw/bnVsbDpvW2xdKGgpKSk6ci5yb3dzLm1hcChjPT5PYmplY3QuZnJvbUVudHJpZXMoXG5jLm1hcCgoaCxsKT0+W3NbbF0saD09PW51bGw/bnVsbDpvW2xdKGgpXSkpKTtyZXR1cm4gaSYmaShuLHIsdSx7YXJyYXlNb2RlOmUsZnVsbFJlc3VsdHM6dH0pLFxudD8oci52aWFOZW9uRmV0Y2g9ITAsci5yb3dBc0FycmF5PWUsci5yb3dzPXUscik6dX1hKFZzLFwicHJvY2Vzc1F1ZXJ5UmVzdWx0XCIpO3ZhciBKcz1XZShndCgpKSxTZT1XZShBdCgpKTt2YXIgRW49Y2xhc3MgRW4gZXh0ZW5kcyBDdC5DbGllbnR7Y29uc3RydWN0b3IodCl7c3VwZXIodCk7dGhpcy5jb25maWc9dH1nZXQgbmVvbkNvbmZpZygpe1xucmV0dXJuIHRoaXMuY29ubmVjdGlvbi5zdHJlYW19Y29ubmVjdCh0KXtsZXR7bmVvbkNvbmZpZzpufT10aGlzO24uZm9yY2VEaXNhYmxlUGdTU0wmJlxuKHRoaXMuc3NsPXRoaXMuY29ubmVjdGlvbi5zc2w9ITEpLHRoaXMuc3NsJiZuLnVzZVNlY3VyZVdlYlNvY2tldCYmY29uc29sZS53YXJuKFwiXFxcblNTTCBpcyBlbmFibGVkIGZvciBib3RoIFBvc3RncmVzIChlLmcuID9zc2xtb2RlPXJlcXVpcmUgaW4gdGhlIGNvbm5lY3Rpb24gc3RyaW5nXFxcbiArIGZvcmNlRGlzYWJsZVBnU1NMID0gZmFsc2UpIGFuZCB0aGUgV2ViU29ja2V0IHR1bm5lbCAodXNlU2VjdXJlV2ViU29ja2V0ID0gdHJ1XFxcbmUpLiBEb3VibGUgZW5jcnlwdGlvbiB3aWxsIGluY3JlYXNlIGxhdGVuY3kgYW5kIENQVSB1c2FnZS4gSXQgbWF5IGJlIGFwcHJvcHJpYXRlXFxcbiB0byBkaXNhYmxlIFNTTCBpbiB0aGUgUG9zdGdyZXMgY29ubmVjdGlvbiBwYXJhbWV0ZXJzIG9yIHNldCBmb3JjZURpc2FibGVQZ1NTTCA9XFxcbiB0cnVlLlwiKTtsZXQgaT10aGlzLmNvbmZpZz8uaG9zdCE9PXZvaWQgMHx8dGhpcy5jb25maWc/LmNvbm5lY3Rpb25TdHJpbmchPT12b2lkIDB8fFxubS5lbnYuUEdIT1NUIT09dm9pZCAwLHM9bS5lbnYuVVNFUj8/bS5lbnYuVVNFUk5BTUU7aWYoIWkmJnRoaXMuaG9zdD09PVwibG9jYWxob3N0XCImJlxudGhpcy51c2VyPT09cyYmdGhpcy5kYXRhYmFzZT09PXMmJnRoaXMucGFzc3dvcmQ9PT1udWxsKXRocm93IG5ldyBFcnJvcihgTm8gZGF0YWJcXFxuYXNlIGhvc3Qgb3IgY29ubmVjdGlvbiBzdHJpbmcgd2FzIHNldCwgYW5kIGtleSBwYXJhbWV0ZXJzIGhhdmUgZGVmYXVsdCB2YWx1ZXMgKGhcXFxub3N0OiBsb2NhbGhvc3QsIHVzZXI6ICR7c30sIGRiOiAke3N9LCBwYXNzd29yZDogbnVsbCkuIElzIGFuIGVudmlyb25tZW50IHZhcmlhYmxcXFxuZSBtaXNzaW5nPyBBbHRlcm5hdGl2ZWx5LCBpZiB5b3UgaW50ZW5kZWQgdG8gY29ubmVjdCB3aXRoIHRoZXNlIHBhcmFtZXRlcnMsIHBsZWFcXFxuc2Ugc2V0IHRoZSBob3N0IHRvICdsb2NhbGhvc3QnIGV4cGxpY2l0bHkuYCk7bGV0IG89c3VwZXIuY29ubmVjdCh0KSx1PW4ucGlwZWxpbmVUTFMmJlxudGhpcy5zc2wsYz1uLnBpcGVsaW5lQ29ubmVjdD09PVwicGFzc3dvcmRcIjtpZighdSYmIW4ucGlwZWxpbmVDb25uZWN0KXJldHVybiBvO2xldCBoPXRoaXMuXG5jb25uZWN0aW9uO2lmKHUmJmgub24oXCJjb25uZWN0XCIsKCk9Pmguc3RyZWFtLmVtaXQoXCJkYXRhXCIsXCJTXCIpKSxjKXtoLnJlbW92ZUFsbExpc3RlbmVycyhcblwiYXV0aGVudGljYXRpb25DbGVhcnRleHRQYXNzd29yZFwiKSxoLnJlbW92ZUFsbExpc3RlbmVycyhcInJlYWR5Rm9yUXVlcnlcIiksaC5vbmNlKFxuXCJyZWFkeUZvclF1ZXJ5XCIsKCk9Pmgub24oXCJyZWFkeUZvclF1ZXJ5XCIsdGhpcy5faGFuZGxlUmVhZHlGb3JRdWVyeS5iaW5kKHRoaXMpKSk7XG5sZXQgbD10aGlzLnNzbD9cInNzbGNvbm5lY3RcIjpcImNvbm5lY3RcIjtoLm9uKGwsKCk9Pnt0aGlzLl9oYW5kbGVBdXRoQ2xlYXJ0ZXh0UGFzc3dvcmQoKSxcbnRoaXMuX2hhbmRsZVJlYWR5Rm9yUXVlcnkoKX0pfXJldHVybiBvfWFzeW5jIF9oYW5kbGVBdXRoU0FTTENvbnRpbnVlKHQpe2xldCBuPXRoaXMuXG5zYXNsU2Vzc2lvbixpPXRoaXMucGFzc3dvcmQscz10LmRhdGE7aWYobi5tZXNzYWdlIT09XCJTQVNMSW5pdGlhbFJlc3BvbnNlXCJ8fHR5cGVvZiBpIT1cblwic3RyaW5nXCJ8fHR5cGVvZiBzIT1cInN0cmluZ1wiKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IHByb3RvY29sIGVycm9yXCIpO2xldCBvPU9iamVjdC5cbmZyb21FbnRyaWVzKHMuc3BsaXQoXCIsXCIpLm1hcCgkPT57aWYoIS9eLj0vLnRlc3QoJCkpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogSW52YWxpXFxcbmQgYXR0cmlidXRlIHBhaXIgZW50cnlcIik7bGV0IG5lPSRbMF0sQ2U9JC5zdWJzdHJpbmcoMik7cmV0dXJuW25lLENlXX0pKSx1PW8ucixjPW8uXG5zLGg9by5pO2lmKCF1fHwhL15bIS0rLS1+XSskLy50ZXN0KHUpKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1cXFxuTUVTU0FHRTogbm9uY2UgbWlzc2luZy91bnByaW50YWJsZVwiKTtpZighY3x8IS9eKD86W2EtekEtWjAtOSsvXXs0fSkqKD86W2EtekEtWjAtOSsvXXsyfT09fFthLXpBLVowLTkrL117M309KT8kLy5cbnRlc3QoYykpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR0U6IHNhbHQgbWlzc2luZy9ub3QgYmFzZVxcXG42NFwiKTtpZighaHx8IS9eWzEtOV1bMC05XSokLy50ZXN0KGgpKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NXFxcbkVTU0FHRTogbWlzc2luZy9pbnZhbGlkIGl0ZXJhdGlvbiBjb3VudFwiKTtpZighdS5zdGFydHNXaXRoKG4uY2xpZW50Tm9uY2UpKXRocm93IG5ldyBFcnJvcihcblwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR0U6IHNlcnZlciBub25jZSBkb2VzIG5vdCBzdGFydCB3aXRoIGNsaWVudCBub25jZVwiKTtcbmlmKHUubGVuZ3RoPT09bi5jbGllbnROb25jZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1xcXG5TQUdFOiBzZXJ2ZXIgbm9uY2UgaXMgdG9vIHNob3J0XCIpO2xldCBsPXBhcnNlSW50KGgsMTApLHk9ZC5mcm9tKGMsXCJiYXNlNjRcIiksRT1uZXcgVGV4dEVuY29kZXIsXG5fPUUuZW5jb2RlKGkpLFA9YXdhaXQgdy5zdWJ0bGUuaW1wb3J0S2V5KFwicmF3XCIsXyx7bmFtZTpcIkhNQUNcIixoYXNoOntuYW1lOlwiU0hBLTI1XFxcbjZcIn19LCExLFtcInNpZ25cIl0pLE49bmV3IFVpbnQ4QXJyYXkoYXdhaXQgdy5zdWJ0bGUuc2lnbihcIkhNQUNcIixQLGQuY29uY2F0KFt5LGQuZnJvbShcblswLDAsMCwxXSldKSkpLEo9Tjtmb3IodmFyIHBlPTA7cGU8bC0xO3BlKyspTj1uZXcgVWludDhBcnJheShhd2FpdCB3LnN1YnRsZS5zaWduKFxuXCJITUFDXCIsUCxOKSksSj1kLmZyb20oSi5tYXAoKCQsbmUpPT5KW25lXV5OW25lXSkpO2xldCBBPUosZz1hd2FpdCB3LnN1YnRsZS5pbXBvcnRLZXkoXG5cInJhd1wiLEEse25hbWU6XCJITUFDXCIsaGFzaDp7bmFtZTpcIlNIQS0yNTZcIn19LCExLFtcInNpZ25cIl0pLEQ9bmV3IFVpbnQ4QXJyYXkoYXdhaXQgdy5cbnN1YnRsZS5zaWduKFwiSE1BQ1wiLGcsRS5lbmNvZGUoXCJDbGllbnQgS2V5XCIpKSksSD1hd2FpdCB3LnN1YnRsZS5kaWdlc3QoXCJTSEEtMjU2XCIsXG5EKSxRPVwibj0qLHI9XCIrbi5jbGllbnROb25jZSxXPVwicj1cIit1K1wiLHM9XCIrYytcIixpPVwiK2wsdWU9XCJjPWJpd3Mscj1cIit1LGRlPVErXCIsXCIrVytcblwiLFwiK3VlLEw9YXdhaXQgdy5zdWJ0bGUuaW1wb3J0S2V5KFwicmF3XCIsSCx7bmFtZTpcIkhNQUNcIixoYXNoOntuYW1lOlwiU0hBLTI1NlwifX0sITEsXG5bXCJzaWduXCJdKTt2YXIgRz1uZXcgVWludDhBcnJheShhd2FpdCB3LnN1YnRsZS5zaWduKFwiSE1BQ1wiLEwsRS5lbmNvZGUoZGUpKSksY2U9ZC5cbmZyb20oRC5tYXAoKCQsbmUpPT5EW25lXV5HW25lXSkpLHllPWNlLnRvU3RyaW5nKFwiYmFzZTY0XCIpO2xldCB4ZT1hd2FpdCB3LnN1YnRsZS5cbmltcG9ydEtleShcInJhd1wiLEEse25hbWU6XCJITUFDXCIsaGFzaDp7bmFtZTpcIlNIQS0yNTZcIn19LCExLFtcInNpZ25cIl0pLGhlPWF3YWl0IHcuc3VidGxlLlxuc2lnbihcIkhNQUNcIix4ZSxFLmVuY29kZShcIlNlcnZlciBLZXlcIikpLGllPWF3YWl0IHcuc3VidGxlLmltcG9ydEtleShcInJhd1wiLGhlLHtuYW1lOlwiXFxcbkhNQUNcIixoYXNoOntuYW1lOlwiU0hBLTI1NlwifX0sITEsW1wic2lnblwiXSk7dmFyIHNlPWQuZnJvbShhd2FpdCB3LnN1YnRsZS5zaWduKFwiSE1BXFxcbkNcIixpZSxFLmVuY29kZShkZSkpKTtuLm1lc3NhZ2U9XCJTQVNMUmVzcG9uc2VcIixuLnNlcnZlclNpZ25hdHVyZT1zZS50b1N0cmluZyhcImJhc1xcXG5lNjRcIiksbi5yZXNwb25zZT11ZStcIixwPVwiK3llLHRoaXMuY29ubmVjdGlvbi5zZW5kU0NSQU1DbGllbnRGaW5hbE1lc3NhZ2UodGhpcy5zYXNsU2Vzc2lvbi5cbnJlc3BvbnNlKX19O2EoRW4sXCJOZW9uQ2xpZW50XCIpO3ZhciB4bj1FbjtmdW5jdGlvbiBRYyhyLGUpe2lmKGUpcmV0dXJue2NhbGxiYWNrOmUsXG5yZXN1bHQ6dm9pZCAwfTtsZXQgdCxuLGk9YShmdW5jdGlvbihvLHUpe28/dChvKTpuKHUpfSxcImNiXCIpLHM9bmV3IHIoZnVuY3Rpb24obyx1KXtcbm49byx0PXV9KTtyZXR1cm57Y2FsbGJhY2s6aSxyZXN1bHQ6c319YShRYyxcInByb21pc2lmeVwiKTt2YXIgdm49Y2xhc3Mgdm4gZXh0ZW5kcyBDdC5Qb29se2NvbnN0cnVjdG9yKCl7XG5zdXBlciguLi5hcmd1bWVudHMpO1QodGhpcyxcIkNsaWVudFwiLHhuKTtUKHRoaXMsXCJoYXNGZXRjaFVuc3VwcG9ydGVkTGlzdGVuZXJzXCIsITEpfW9uKHQsbil7XG5yZXR1cm4gdCE9PVwiZXJyb3JcIiYmKHRoaXMuaGFzRmV0Y2hVbnN1cHBvcnRlZExpc3RlbmVycz0hMCksc3VwZXIub24odCxuKX1xdWVyeSh0LG4saSl7XG5pZighX2UucG9vbFF1ZXJ5VmlhRmV0Y2h8fHRoaXMuaGFzRmV0Y2hVbnN1cHBvcnRlZExpc3RlbmVyc3x8dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIilcbnJldHVybiBzdXBlci5xdWVyeSh0LG4saSk7dHlwZW9mIG49PVwiZnVuY3Rpb25cIiYmKGk9bixuPXZvaWQgMCk7bGV0IHM9UWModGhpcy5Qcm9taXNlLFxuaSk7aT1zLmNhbGxiYWNrO3RyeXtsZXQgbz1uZXcgSnMuZGVmYXVsdCh0aGlzLm9wdGlvbnMpLHU9ZW5jb2RlVVJJQ29tcG9uZW50LGM9ZW5jb2RlVVJJLFxuaD1gcG9zdGdyZXNxbDovLyR7dShvLnVzZXIpfToke3Uoby5wYXNzd29yZCl9QCR7dShvLmhvc3QpfS8ke2Moby5kYXRhYmFzZSl9YCxsPXR5cGVvZiB0PT1cblwic3RyaW5nXCI/dDp0LnRleHQseT1uPz90LnZhbHVlcz8/W107WXMoaCx7ZnVsbFJlc3VsdHM6ITAsYXJyYXlNb2RlOnQucm93TW9kZT09PVwiXFxcbmFycmF5XCJ9KShsLHkpLnRoZW4oXz0+aSh2b2lkIDAsXykpLmNhdGNoKF89PmkoXykpfWNhdGNoKG8pe2kobyl9cmV0dXJuIHMucmVzdWx0fX07XG5hKHZuLFwiTmVvblBvb2xcIik7dmFyIFpzPXZuO3ZhciBleHBvcnRfQ2xpZW50QmFzZT1TZS5DbGllbnRCYXNlO3ZhciBleHBvcnRfQ29ubmVjdGlvbj1TZS5Db25uZWN0aW9uO3ZhciBleHBvcnRfRGF0YWJhc2VFcnJvcj1TZS5EYXRhYmFzZUVycm9yO1xudmFyIGV4cG9ydF9RdWVyeT1TZS5RdWVyeTt2YXIgZXhwb3J0X2RlZmF1bHRzPVNlLmRlZmF1bHRzO3ZhciBleHBvcnRfdHlwZXM9U2UudHlwZXM7XG5leHBvcnR7eG4gYXMgQ2xpZW50LGV4cG9ydF9DbGllbnRCYXNlIGFzIENsaWVudEJhc2UsZXhwb3J0X0Nvbm5lY3Rpb24gYXMgQ29ubmVjdGlvbixcbmV4cG9ydF9EYXRhYmFzZUVycm9yIGFzIERhdGFiYXNlRXJyb3IsQWUgYXMgTmVvbkRiRXJyb3IsWnMgYXMgUG9vbCxleHBvcnRfUXVlcnkgYXMgUXVlcnksXG5leHBvcnRfZGVmYXVsdHMgYXMgZGVmYXVsdHMsWXMgYXMgbmVvbixfZSBhcyBuZW9uQ29uZmlnLGV4cG9ydF90eXBlcyBhcyB0eXBlc307XG4vKiEgQnVuZGxlZCBsaWNlbnNlIGluZm9ybWF0aW9uOlxuXG5pZWVlNzU0L2luZGV4LmpzOlxuICAoKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqKVxuXG5idWZmZXIvaW5kZXguanM6XG4gICgqIVxuICAgKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAgICpcbiAgICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAgICogQGxpY2Vuc2UgIE1JVFxuICAgKilcbiovXG4iXSwibmFtZXMiOlsiWHMiLCJPYmplY3QiLCJjcmVhdGUiLCJJZSIsImRlZmluZVByb3BlcnR5IiwiZW8iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ0byIsImdldE93blByb3BlcnR5TmFtZXMiLCJybyIsImdldFByb3RvdHlwZU9mIiwibm8iLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImlvIiwiciIsImUiLCJ0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJhIiwiSyIsIkkiLCJleHBvcnRzIiwiWCIsImdldCIsIl9uIiwibiIsImkiLCJjYWxsIiwiV2UiLCJfX2VzTW9kdWxlIiwiayIsIlQiLCJJbiIsIml0IiwicCIsImJ5dGVMZW5ndGgiLCJvbyIsInRvQnl0ZUFycmF5IiwidW8iLCJmcm9tQnl0ZUFycmF5IiwibG8iLCJvZSIsImVlIiwic28iLCJVaW50OEFycmF5IiwiQXJyYXkiLCJJdCIsIkVlIiwiQW4iLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwiQ24iLCJFcnJvciIsImluZGV4T2YiLCJhbyIsInMiLCJvIiwidSIsImMiLCJjbyIsImhvIiwicHVzaCIsImpvaW4iLCJUbiIsIlR0IiwicmVhZCIsImgiLCJsIiwieSIsIkUiLCJfIiwiTmFOIiwiTWF0aCIsInBvdyIsIndyaXRlIiwiUCIsIk4iLCJhYnMiLCJpc05hTiIsImZsb29yIiwibG9nIiwiTE4yIiwiR24iLCJMZSIsIlB0IiwiUGUiLCJQbiIsIlN5bWJvbCIsImZvciIsIkJ1ZmZlciIsImYiLCJTbG93QnVmZmVyIiwid28iLCJJTlNQRUNUX01BWF9CWVRFUyIsInN0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJmbyIsImNvbnNvbGUiLCJlcnJvciIsImZvbyIsInNldFByb3RvdHlwZU9mIiwiaXNCdWZmZXIiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwibGUiLCJSYW5nZUVycm9yIiwiVHlwZUVycm9yIiwiRnQiLCJGbiIsInBvb2xTaXplIiwieW8iLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIm1vIiwiYWUiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIkx0IiwidmFsdWVPZiIsImZyb20iLCJnbyIsInRvUHJpbWl0aXZlIiwiTW4iLCJwbyIsImZpbGwiLCJhbGxvYyIsIk10IiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJpc0VuY29kaW5nIiwiRG4iLCJzbGljZSIsIkJ0IiwiY29weSIsIk90IiwidHlwZSIsImlzQXJyYXkiLCJkYXRhIiwidG9TdHJpbmciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwib2Zmc2V0IiwibWluIiwiU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJjb25jYXQiLCJzZXQiLCJhcmd1bWVudHMiLCJSdCIsIkhuIiwiYm8iLCJQbyIsImtuIiwiSW8iLCJUbyIsIkFvIiwiQm8iLCJ2ZSIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImFwcGx5IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJpbnNwZWN0IiwicmVwbGFjZSIsInRyaW0iLCJPbiIsIkJuIiwibGFzdEluZGV4T2YiLCJyZWFkVUludDE2QkUiLCJpbmNsdWRlcyIsIlNvIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ4byIsIm90IiwiRW8iLCJNbyIsInZvIiwiX28iLCJEbyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsIkNvIiwiTG4iLCJmcm9tQ2hhckNvZGUiLCJPbyIsInN1YmFycmF5IiwiVSIsInJlYWRVaW50TEUiLCJyZWFkVUludExFIiwicmVhZFVpbnRCRSIsInJlYWRVSW50QkUiLCJyZWFkVWludDgiLCJyZWFkVUludDgiLCJyZWFkVWludDE2TEUiLCJyZWFkVUludDE2TEUiLCJyZWFkVWludDE2QkUiLCJyZWFkVWludDMyTEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVWludDMyQkUiLCJyZWFkVUludDMyQkUiLCJyZWFkQmlnVUludDY0TEUiLCJtZSIsIkJlIiwiamUiLCJCaWdJbnQiLCJyZWFkQmlnVUludDY0QkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEJpZ0ludDY0TEUiLCJyZWFkQmlnSW50NjRCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ6Iiwid3JpdGVVaW50TEUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVWludEJFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVpbnQ4Iiwid3JpdGVVSW50OCIsIndyaXRlVWludDE2TEUiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVaW50MTZCRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVpbnQzMkxFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVWludDMyQkUiLCJ3cml0ZVVJbnQzMkJFIiwiVW4iLCJqbiIsInFuIiwid3JpdGVCaWdVSW50NjRMRSIsIndyaXRlQmlnVUludDY0QkUiLCJ3cml0ZUludExFIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlQmlnSW50NjRMRSIsIndyaXRlQmlnSW50NjRCRSIsIk5uIiwiUW4iLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJXbiIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwiY29weVdpdGhpbiIsIlRlIiwiRHQiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJzdGFjayIsImNvZGUiLCJtZXNzYWdlIiwiaXNJbnRlZ2VyIiwiUm4iLCJMbyIsIkVSUl9PVVRfT0ZfUkFOR0UiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsIkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUyIsIlJvIiwiRm8iLCJzcGxpdCIsImtvIiwiYiIsIlMiLCJ2IiwidyIsImQiLCJtIiwiZ2xvYmFsVGhpcyIsInNldEltbWVkaWF0ZSIsInNldFRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsImNsZWFyVGltZW91dCIsImNyeXB0byIsInN1YnRsZSIsInByb2Nlc3MiLCJlbnYiLCJuZXh0VGljayIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImJpbmQiLCJnZSIsIkpjIiwia3QiLCJSZSIsIlJlZmxlY3QiLCIkbiIsIkZ1bmN0aW9uIiwiYXQiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiVW8iLCJ3YXJuIiwiVm4iLCJCIiwiaW5pdCIsIm9uY2UiLCJXbyIsIkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiS24iLCJ1dCIsInNldE1heExpc3RlbmVycyIsInpuIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImVtaXQiLCJjb250ZXh0IiwiZWkiLCJZbiIsIm5ld0xpc3RlbmVyIiwibGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwiZW1pdHRlciIsImNvdW50IiwiYWRkTGlzdGVuZXIiLCJvbiIsInByZXBlbmRMaXN0ZW5lciIsInFvIiwiZmlyZWQiLCJ0YXJnZXQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIlpuIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsInNoaWZ0IiwiTm8iLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJrZXlzIiwiSm4iLCJRbyIsImxpc3RlbmVycyIsInJhd0xpc3RlbmVycyIsImxpc3RlbmVyQ291bnQiLCJYbiIsImV2ZW50TmFtZXMiLCJwb3AiLCJ0aSIsImpvIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJIZSIsImRlZmF1bHQiLCJIbyIsIkdlIiwiJGUiLCJBIiwiZyIsIlVpbnQzMkFycmF5IiwiTCIsIkciLCJjZSIsIkQiLCJIIiwiUSIsIlciLCJ1ZSIsImRlIiwieWUiLCJ4ZSIsImhlIiwiaWUiLCJKIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJwZSIsImFkZCIsImRpZ2VzdCIsInJpIiwiTyIsIktlIiwibmkiLCJJbnQzMkFycmF5IiwiX2J1ZmZlcjgiLCJfYnVmZmVyIiwiX2J1ZmZlcjMyIiwic3RhcnQiLCJoYXNoQnl0ZUFycmF5Iiwib25lUGFzc0hhc2hlciIsImFwcGVuZEJ5dGVBcnJheSIsImVuZCIsImhhc2hTdHIiLCJhcHBlbmRTdHIiLCJoYXNoQXNjaWlTdHIiLCJhcHBlbmRBc2NpaVN0ciIsIl9oZXgiLCJoZXhDaGFycyIsImhleE91dCIsImNoYXJBdCIsIl9tZDVjeWNsZSIsIl9kYXRhTGVuZ3RoIiwiX2J1ZmZlckxlbmd0aCIsIl9zdGF0ZSIsInN0YXRlSWRlbnRpdHkiLCJnZXRTdGF0ZSIsImJ1ZmxlbiIsInN0YXRlIiwic2V0U3RhdGUiLCJidWZmZXIzMklkZW50aXR5IiwibWF0Y2giLCJVdCIsImNyZWF0ZUhhc2giLCIkbyIsImNyZWF0ZUhtYWMiLCJLbyIsInJhbmRvbUJ5dGVzIiwiR28iLCJnZXRSYW5kb21WYWx1ZXMiLCJ1cGRhdGUiLCJxdCIsIlF0IiwiaWkiLCJwYXJzZSIsIk50IiwiY3QiLCJzb3VyY2UiLCJ0cmFuc2Zvcm0iLCJWbyIsInBvc2l0aW9uIiwiZW50cmllcyIsInJlY29yZGVkIiwiZGltZW5zaW9uIiwiaXNFb2YiLCJuZXh0Q2hhcmFjdGVyIiwiZXNjYXBlZCIsInJlY29yZCIsIm5ld0VudHJ5IiwiY29uc3VtZURpbWVuc2lvbnMiLCJXdCIsInloIiwic2kiLCJ6byIsInVpIiwiZ2giLCJhaSIsIllvIiwiWm8iLCJKbyIsIlhvIiwidGVzdCIsImV4ZWMiLCJlYSIsIm9pIiwicGFyc2VGbG9hdCIsInRhIiwiRGF0ZSIsIlVUQyIsImp0Iiwic2V0VVRDRnVsbFllYXIiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInNldEZ1bGxZZWFyIiwiZW5kc1dpdGgiLCJoaSIsIlNoIiwiY2kiLCJuYSIsInJhIiwicGkiLCJ2aCIsImZpIiwiaWEiLCJGZSIsIm1hIiwic2EiLCJ0b1Bvc3RncmVzIiwiZmlsdGVyIiwibWlsbGlzZWNvbmRzIiwibWFwIiwidG9GaXhlZCIsIm9hIiwieWVhcnMiLCJtb250aHMiLCJkYXlzIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsImFhIiwidWEiLCJ0b0lTT1N0cmluZyIsInRvSVNPIiwiSHQiLCJjYSIsImhhIiwibGEiLCJmYSIsInBhIiwiUmVnRXhwIiwibGkiLCJkYSIsInlhIiwicmVkdWNlIiwieWkiLCJDaCIsImRpIiwiRWkiLCJQaCIsInhpIiwiVmUiLCJ6ZSIsImh0IiwiZ2kiLCJ3aSIsImx0IiwiYmkiLCJnYSIsIndhIiwiR3QiLCJiYSIsIlNpIiwiU2EiLCJ6dCIsIiR0IiwidGUiLCJLdCIsInhhIiwiRWEiLCJWdCIsIm1pIiwiSlNPTiIsInN1YnN0cmluZyIsIngiLCJ2YSIsInJhZGl1cyIsIl9hIiwiX2kiLCJSaCIsInZpIiwiWSIsIkFhIiwiUGkiLCJEaCIsIlRpIiwiQ2EiLCJSIiwiSWkiLCJJYSIsIkFpIiwiVGEiLCJQYSIsIkJhIiwicm91bmQiLCJDaSIsImdldFRpbWV6b25lT2Zmc2V0IiwidXNlYyIsImdldE1pY3JvU2Vjb25kcyIsInNldE1pY3JvU2Vjb25kcyIsImdldFVUQ01pY3JvU2Vjb25kcyIsIlllIiwiZW5jb2RpbmciLCJMYSIsIlJhIiwiRmEiLCJMaSIsIlVoIiwiQmkiLCJCT09MIiwiQllURUEiLCJDSEFSIiwiSU5UOCIsIklOVDIiLCJJTlQ0IiwiUkVHUFJPQyIsIlRFWFQiLCJPSUQiLCJUSUQiLCJYSUQiLCJDSUQiLCJYTUwiLCJQR19OT0RFX1RSRUUiLCJTTUdSIiwiUEFUSCIsIlBPTFlHT04iLCJDSURSIiwiRkxPQVQ0IiwiRkxPQVQ4IiwiQUJTVElNRSIsIlJFTFRJTUUiLCJUSU5URVJWQUwiLCJDSVJDTEUiLCJNQUNBRERSOCIsIk1PTkVZIiwiTUFDQUREUiIsIklORVQiLCJBQ0xJVEVNIiwiQlBDSEFSIiwiVkFSQ0hBUiIsIkRBVEUiLCJUSU1FIiwiVElNRVNUQU1QIiwiVElNRVNUQU1QVFoiLCJJTlRFUlZBTCIsIlRJTUVUWiIsIkJJVCIsIlZBUkJJVCIsIk5VTUVSSUMiLCJSRUZDVVJTT1IiLCJSRUdQUk9DRURVUkUiLCJSRUdPUEVSIiwiUkVHT1BFUkFUT1IiLCJSRUdDTEFTUyIsIlJFR1RZUEUiLCJVVUlEIiwiVFhJRF9TTkFQU0hPVCIsIlBHX0xTTiIsIlBHX05ESVNUSU5DVCIsIlBHX0RFUEVOREVOQ0lFUyIsIlRTVkVDVE9SIiwiVFNRVUVSWSIsIkdUU1ZFQ1RPUiIsIlJFR0NPTkZJRyIsIlJFR0RJQ1RJT05BUlkiLCJKU09OQiIsIlJFR05BTUVTUEFDRSIsIlJFR1JPTEUiLCJYZSIsIkplIiwiTWEiLCJEYSIsIk9hIiwia2EiLCJnZXRUeXBlUGFyc2VyIiwiVWEiLCJzZXRUeXBlUGFyc2VyIiwicWEiLCJhcnJheVBhcnNlciIsImJ1aWx0aW5zIiwiWmUiLCJ0ZXh0IiwiYmluYXJ5IiwiUmkiLCJldCIsImpoIiwiWXQiLCJob3N0IiwidXNlciIsInBsYXRmb3JtIiwiVVNFUk5BTUUiLCJVU0VSIiwiZGF0YWJhc2UiLCJwYXNzd29yZCIsImNvbm5lY3Rpb25TdHJpbmciLCJwb3J0Iiwicm93cyIsIm1heCIsImlkbGVUaW1lb3V0TWlsbGlzIiwiY2xpZW50X2VuY29kaW5nIiwic3NsIiwiYXBwbGljYXRpb25fbmFtZSIsImZhbGxiYWNrX2FwcGxpY2F0aW9uX25hbWUiLCJvcHRpb25zIiwicGFyc2VJbnB1dERhdGVzQXNVVEMiLCJzdGF0ZW1lbnRfdGltZW91dCIsImxvY2tfdGltZW91dCIsImlkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0IiwicXVlcnlfdGltZW91dCIsImNvbm5lY3RfdGltZW91dCIsImtlZXBhbGl2ZXMiLCJrZWVwYWxpdmVzX2lkbGUiLCJNZSIsIk5hIiwiUWEiLCJfX2RlZmluZVNldHRlcl9fIiwidHQiLCJHaCIsIk1pIiwiV2EiLCJqYSIsIkhhIiwiRmkiLCJmdCIsIkthIiwiJGEiLCJHYSIsInN0cmluZ2lmeSIsImoiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJWYSIsImNhbGxiYWNrIiwidmFsdWVzIiwiWnQiLCJ6YSIsInByZXBhcmVWYWx1ZSIsIm5vcm1hbGl6ZVF1ZXJ5Q29uZmlnIiwicG9zdGdyZXNNZDVQYXNzd29yZEhhc2giLCJtZDUiLCJxaSIsIlZoIiwiVWkiLCJKdCIsIllhIiwibWVjaGFuaXNtIiwiY2xpZW50Tm9uY2UiLCJyZXNwb25zZSIsIlphIiwiZXUiLCJub25jZSIsInN0YXJ0c1dpdGgiLCJzYWx0IiwibnUiLCJpdGVyYXRpb24iLCJEZSIsInJ1Iiwia2kiLCJzZXJ2ZXJTaWduYXR1cmUiLCJKYSIsInR1IiwiWGEiLCJldmVyeSIsIkRpIiwiT2kiLCJNYXAiLCJzdGFydFNlc3Npb24iLCJjb250aW51ZVNlc3Npb24iLCJmaW5hbGl6ZVNlc3Npb24iLCJYdCIsIml1IiwiZXIiLCJ0ciIsInN0YXQiLCJzdSIsInJyIiwibnIiLCJvdSIsImlyIiwiTmkiLCJTdHJpbmdEZWNvZGVyIiwic3IiLCJvciIsIlFpIiwidGQiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsInN0cmVhbSIsIkdpIiwiaWwiLCJIaSIsIlRyYW5zZm9ybSIsImF1IiwidXUiLCJ3ZSIsInB0IiwiY3UiLCJvdmVyZmxvdyIsIm1hdGNoZXIiLCJqaSIsIm1hcHBlciIsIm1heExlbmd0aCIsInNraXBPdmVyZmxvdyIsImh1IiwiV2kiLCJsdSIsImFzc2lnbiIsImF1dG9EZXN0cm95IiwiZmx1c2giLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJfZGVzdHJveSIsIl93cml0YWJsZVN0YXRlIiwiZXJyb3JFbWl0dGVkIiwiVmkiLCJhbCIsImZlIiwiJGkiLCJmdSIsIlN0cmVhbSIsInB1IiwiS2kiLCJkdSIsImR0IiwicnQiLCJzdGRlcnIiLCJ5dSIsIm11IiwiZ3UiLCJ3dSIsImJ1IiwiT2UiLCJhciIsIlN1IiwidXIiLCJmb3JtYXQiLCJ3YXJuVG8iLCJnZXRGaWxlTmFtZSIsIlBHUEFTU0ZJTEUiLCJBUFBEQVRBIiwiSE9NRSIsInVzZVBnUGFzcyIsIm1vZGUiLCJ4dSIsImdldFBhc3N3b3JkIiwicGlwZSIsIkV1IiwidnUiLCJkZXN0cm95IiwicGFyc2VMaW5lIiwiaXNWYWxpZEVudHJ5IiwiWWkiLCJsbCIsImNyIiwiaGwiLCJ6aSIsInl0IiwiY3JlYXRlUmVhZFN0cmVhbSIsImhyIiwicGwiLCJaaSIsIl91IiwibXQiLCJfdHlwZXMiLCJnZXRPdmVycmlkZXMiLCJKaSIsIkF1IiwiWGkiLCJlcyIsImxyIiwicHJvdG9jb2wiLCJVUkwiLCJ1c2VybmFtZSIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJzZWFyY2giLCJzZWFyY2hQYXJhbXMiLCJoYXNoIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZnJvbUVudHJpZXMiLCJocmVmIiwiYXV0aCIsInF1ZXJ5IiwiZnIiLCJycyIsImJsIiwidHMiLCJDdSIsInByIiwiZHIiLCJlbmNvZGVVUkkiLCJzcGxpY2UiLCJkZWNvZGVVUkkiLCJkYiIsInNzbGNlcnQiLCJzc2xrZXkiLCJzc2xyb290Y2VydCIsInNzbG1vZGUiLCJjZXJ0IiwicmVhZEZpbGVTeW5jIiwia2V5IiwicmVqZWN0VW5hdXRob3JpemVkIiwiZ3QiLCJFbCIsInNzIiwiSXUiLCJpcyIsIm5zIiwiViIsInRvVXBwZXJDYXNlIiwiVHUiLCJQR1NTTE1PREUiLCJrZSIsInJlIiwibXIiLCJyZXBsaWNhdGlvbiIsImlzRG9tYWluU29ja2V0IiwiY29ubmVjdGlvblRpbWVvdXRNaWxsaXMiLCJQR0NPTk5FQ1RfVElNRU9VVCIsImtlZXBBbGl2ZSIsImtlZXBBbGl2ZUluaXRpYWxEZWxheU1pbGxpcyIsImdldExpYnBxQ29ubmVjdGlvblN0cmluZyIsImxvb2t1cCIsInlyIiwidXMiLCJBbCIsImFzIiwiUHUiLCJvcyIsIndyIiwiY29tbWFuZCIsInJvd0NvdW50Iiwib2lkIiwiZmllbGRzIiwiX3BhcnNlcnMiLCJSb3dDdG9yIiwicm93QXNBcnJheSIsInBhcnNlUm93IiwiX3BhcnNlUm93QXNBcnJheSIsImFkZENvbW1hbmRDb21wbGV0ZSIsImFkZFJvdyIsImFkZEZpZWxkcyIsImRhdGFUeXBlSUQiLCJnciIsImZzIiwiVGwiLCJscyIsIkJ1IiwiY3MiLCJocyIsIlNyIiwidHlwZXMiLCJwb3J0YWwiLCJfcm93TW9kZSIsInJvd01vZGUiLCJkb21haW4iLCJfcmVzdWx0IiwiX3Jlc3VsdHMiLCJpc1ByZXBhcmVkU3RhdGVtZW50IiwiX2NhbmNlbGVkRHVlVG9FcnJvciIsIl9wcm9taXNlIiwicmVxdWlyZXNQcmVwYXJhdGlvbiIsIl9jaGVja0Zvck11bHRpcm93IiwiaGFuZGxlUm93RGVzY3JpcHRpb24iLCJfYWNjdW11bGF0ZVJvd3MiLCJoYW5kbGVEYXRhUm93IiwiaGFuZGxlQ29tbWFuZENvbXBsZXRlIiwic3luYyIsImhhbmRsZUVtcHR5UXVlcnkiLCJoYW5kbGVFcnJvciIsImhhbmRsZVJlYWR5Rm9yUXVlcnkiLCJzdWJtaXQiLCJwYXJzZWRTdGF0ZW1lbnRzIiwicHJlcGFyZSIsImhhc0JlZW5QYXJzZWQiLCJoYW5kbGVQb3J0YWxTdXNwZW5kZWQiLCJfZ2V0Um93cyIsImV4ZWN1dGUiLCJzdGF0ZW1lbnQiLCJ2YWx1ZU1hcHBlciIsImRlc2NyaWJlIiwiaGFuZGxlQ29weUluUmVzcG9uc2UiLCJzZW5kQ29weUZhaWwiLCJoYW5kbGVDb3B5RGF0YSIsImJyIiwiZHMiLCJTb2NrZXQiLCJfZSIsImlzSVAiLCJMdSIsInBzIiwid3QiLCJwb29sUXVlcnlWaWFGZXRjaCIsIm9wdHMiLCJkZWZhdWx0cyIsImZldGNoRW5kcG9pbnQiLCJmZXRjaENvbm5lY3Rpb25DYWNoZSIsImZldGNoRnVuY3Rpb24iLCJ3ZWJTb2NrZXRDb25zdHJ1Y3RvciIsIndzUHJveHkiLCJjb2FsZXNjZVdyaXRlcyIsInVzZVNlY3VyZVdlYlNvY2tldCIsImZvcmNlRGlzYWJsZVBnU1NMIiwiZGlzYWJsZVNOSSIsInBpcGVsaW5lQ29ubmVjdCIsInN1YnRscyIsInBpcGVsaW5lVExTIiwicm9vdENlcnRzIiwid3NQcm94eUFkZHJGb3JIb3N0Iiwic2V0Tm9EZWxheSIsInNldEtlZXBBbGl2ZSIsInJlZiIsInVucmVmIiwiY29ubmVjdCIsImNvbm5lY3RpbmciLCJwZW5kaW5nIiwiYmluYXJ5VHlwZSIsInRsc1N0YXRlIiwid3MiLCJXZWJTb2NrZXQiLCJfX3Vuc3RhYmxlX1dlYlNvY2tldCIsImZldGNoIiwiaGVhZGVycyIsIlVwZ3JhZGUiLCJ3ZWJTb2NrZXQiLCJhY2NlcHQiLCJjYXRjaCIsInN0YXJ0VGxzIiwiVHJ1c3RlZENlcnQiLCJmcm9tUEVNIiwiV2ViU29ja2V0UmVhZFF1ZXVlIiwicmF3V3JpdGUiLCJ1c2VTTkkiLCJleHBlY3RQcmVEYXRhIiwidGxzUmVhZCIsInRsc1dyaXRlIiwiZW5jcnlwdGVkIiwiYXV0aG9yaXplZCIsInRsc1JlYWRMb29wIiwic2VuZCIsIndyaXRlQnVmZmVyIiwiY2xvc2UiLCJkZXN0cm95ZWQiLCJ6ciIsIkMiLCJOb3RpY2VNZXNzYWdlIiwiRGF0YVJvd01lc3NhZ2UiLCJDb21tYW5kQ29tcGxldGVNZXNzYWdlIiwiUmVhZHlGb3JRdWVyeU1lc3NhZ2UiLCJOb3RpZmljYXRpb25SZXNwb25zZU1lc3NhZ2UiLCJCYWNrZW5kS2V5RGF0YU1lc3NhZ2UiLCJBdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkIiwiUGFyYW1ldGVyU3RhdHVzTWVzc2FnZSIsIlBhcmFtZXRlckRlc2NyaXB0aW9uTWVzc2FnZSIsIlJvd0Rlc2NyaXB0aW9uTWVzc2FnZSIsIkZpZWxkIiwiQ29weVJlc3BvbnNlIiwiQ29weURhdGFNZXNzYWdlIiwiRGF0YWJhc2VFcnJvciIsImNvcHlEb25lIiwiZW1wdHlRdWVyeSIsInJlcGxpY2F0aW9uU3RhcnQiLCJwb3J0YWxTdXNwZW5kZWQiLCJub0RhdGEiLCJjbG9zZUNvbXBsZXRlIiwiYmluZENvbXBsZXRlIiwicGFyc2VDb21wbGV0ZSIsIkRyIiwieHIiLCJPciIsImNodW5rIiwiRXIiLCJrciIsImNvbHVtblR5cGVzIiwidnIiLCJVciIsInRhYmxlSUQiLCJjb2x1bW5JRCIsImRhdGFUeXBlU2l6ZSIsImRhdGFUeXBlTW9kaWZpZXIiLCJfciIsInFyIiwiZmllbGRDb3VudCIsIkFyIiwiTnIiLCJwYXJhbWV0ZXJDb3VudCIsImRhdGFUeXBlSURzIiwiQ3IiLCJRciIsInBhcmFtZXRlck5hbWUiLCJwYXJhbWV0ZXJWYWx1ZSIsIklyIiwiV3IiLCJUciIsImpyIiwicHJvY2Vzc0lEIiwic2VjcmV0S2V5IiwiUHIiLCJIciIsInByb2Nlc3NJZCIsImNoYW5uZWwiLCJwYXlsb2FkIiwiQnIiLCJHciIsInN0YXR1cyIsIkxyIiwiJHIiLCJSciIsIktyIiwiRnIiLCJWciIsIk1yIiwieXMiLCJidCIsIldyaXRlciIsIlpyIiwic2l6ZSIsImhlYWRlclBvc2l0aW9uIiwiZW5zdXJlIiwiYWRkSW50MzIiLCJhZGRJbnQxNiIsImFkZENTdHJpbmciLCJhZGRTdHJpbmciLCJZciIsImdzIiwieHQiLCJzZXJpYWxpemUiLCJKciIsIkYiLCJSdSIsIkZ1IiwiTXUiLCJEdSIsIk91Iiwia3UiLCJtcyIsIlV1IiwiVWUiLCJxdSIsIk51IiwiUXUiLCJXdSIsImp1IiwiWHIiLCJIdSIsIkd1IiwiJHUiLCJLdSIsIlZ1IiwienUiLCJTdCIsIll1IiwiWnUiLCJKdSIsIlh1IiwiZWMiLCJzdGFydHVwIiwicmVxdWVzdFNzbCIsInNlbmRTQVNMSW5pdGlhbFJlc3BvbnNlTWVzc2FnZSIsInNlbmRTQ1JBTUNsaWVudEZpbmFsTWVzc2FnZSIsImNvcHlEYXRhIiwiY29weUZhaWwiLCJjYW5jZWwiLCJFdCIsIkJ1ZmZlclJlYWRlciIsInRjIiwidG4iLCJzZXRCdWZmZXIiLCJpbnQxNiIsImJ5dGUiLCJpbnQzMiIsInN0cmluZyIsImNzdHJpbmciLCJieXRlcyIsImVuIiwiYnMiLCJyYyIsIlNzIiwidnMiLCJxZSIsIm5jIiwiX19pbXBvcnREZWZhdWx0IiwiUGFyc2VyIiwiTSIsImljIiwic2MiLCJybiIsIm9jIiwieHMiLCJFcyIsInNuIiwiYnVmZmVyTGVuZ3RoIiwiYnVmZmVyT2Zmc2V0IiwicmVhZGVyIiwibWVyZ2VCdWZmZXIiLCJoYW5kbGVQYWNrZXQiLCJwYXJzZURhdGFSb3dNZXNzYWdlIiwicGFyc2VDb21tYW5kQ29tcGxldGVNZXNzYWdlIiwicGFyc2VSZWFkeUZvclF1ZXJ5TWVzc2FnZSIsInBhcnNlTm90aWZpY2F0aW9uTWVzc2FnZSIsInBhcnNlQXV0aGVudGljYXRpb25SZXNwb25zZSIsInBhcnNlUGFyYW1ldGVyU3RhdHVzTWVzc2FnZSIsInBhcnNlQmFja2VuZEtleURhdGEiLCJwYXJzZUVycm9yTWVzc2FnZSIsInBhcnNlUm93RGVzY3JpcHRpb25NZXNzYWdlIiwicGFyc2VQYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2UiLCJwYXJzZUNvcHlJbk1lc3NhZ2UiLCJwYXJzZUNvcHlPdXRNZXNzYWdlIiwicGFyc2VDb3B5RGF0YSIsImZhaWwiLCJwYXJzZUNvcHlNZXNzYWdlIiwicGFyc2VGaWVsZCIsIm1lY2hhbmlzbXMiLCJzZXZlcml0eSIsImRldGFpbCIsImhpbnQiLCJpbnRlcm5hbFBvc2l0aW9uIiwiaW50ZXJuYWxRdWVyeSIsInEiLCJ3aGVyZSIsInNjaGVtYSIsInRhYmxlIiwiY29sdW1uIiwiZGF0YVR5cGUiLCJjb25zdHJhaW50IiwiZmlsZSIsImxpbmUiLCJyb3V0aW5lIiwibm4iLCJiZSIsImFjIiwidWMiLCJjYyIsImhjIiwiX3MiLCJsYyIsInNvY2tldCIsInNlcnZlcm5hbWUiLCJBcyIsImNuIiwiZWYiLCJUcyIsIkNzIiwiZmMiLCJwYyIsIklzIiwiZGMiLCJ5YyIsInVuIiwiX2tlZXBBbGl2ZSIsIl9rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXMiLCJsYXN0QnVmZmVyIiwiX2VuZGluZyIsIl9lbWl0TWVzc2FnZSIsIl9jb25uZWN0aW5nIiwiYXR0YWNoTGlzdGVuZXJzIiwiX3NlbmQiLCJzZW5kQ29weUZyb21DaHVuayIsImVuZENvcHlGcm9tIiwiYW4iLCJMcyIsInNmIiwiQnMiLCJtYyIsIm5mIiwiZ2MiLCJobiIsIndjIiwiYmMiLCJTYyIsIlBzIiwieGMiLCJFYyIsImxuIiwiY29ubmVjdGlvblBhcmFtZXRlcnMiLCJfUHJvbWlzZSIsIl9jb25uZWN0ZWQiLCJfY29ubmVjdGlvbkVycm9yIiwiX3F1ZXJ5YWJsZSIsImNvbm5lY3Rpb24iLCJxdWVyeVF1ZXVlIiwiX2Nvbm5lY3Rpb25UaW1lb3V0TWlsbGlzIiwiX2Vycm9yQWxsUXVlcmllcyIsImFjdGl2ZVF1ZXJ5IiwiZm9yRWFjaCIsIl9jb25uZWN0IiwiX2Nvbm5lY3Rpb25DYWxsYmFjayIsImNvbm5lY3Rpb25UaW1lb3V0SGFuZGxlIiwiZ2V0U3RhcnR1cENvbmYiLCJfYXR0YWNoTGlzdGVuZXJzIiwiX2hhbmRsZUVycm9yRXZlbnQiLCJfaGFuZGxlQXV0aENsZWFydGV4dFBhc3N3b3JkIiwiX2hhbmRsZUF1dGhNRDVQYXNzd29yZCIsIl9oYW5kbGVBdXRoU0FTTCIsIl9oYW5kbGVBdXRoU0FTTENvbnRpbnVlIiwiX2hhbmRsZUF1dGhTQVNMRmluYWwiLCJfaGFuZGxlQmFja2VuZEtleURhdGEiLCJfaGFuZGxlRXJyb3JNZXNzYWdlIiwiX2hhbmRsZVJlYWR5Rm9yUXVlcnkiLCJfaGFuZGxlTm90aWNlIiwiX2hhbmRsZVJvd0Rlc2NyaXB0aW9uIiwiX2hhbmRsZURhdGFSb3ciLCJfaGFuZGxlUG9ydGFsU3VzcGVuZGVkIiwiX2hhbmRsZUVtcHR5UXVlcnkiLCJfaGFuZGxlQ29tbWFuZENvbXBsZXRlIiwiX2hhbmRsZVBhcnNlQ29tcGxldGUiLCJfaGFuZGxlQ29weUluUmVzcG9uc2UiLCJfaGFuZGxlQ29weURhdGEiLCJfaGFuZGxlTm90aWZpY2F0aW9uIiwiX2NoZWNrUGdQYXNzIiwic2FzbFNlc3Npb24iLCJyZWFkeUZvclF1ZXJ5IiwiX3B1bHNlUXVlcnlRdWV1ZSIsIl9oYW5kbGVFcnJvcldoaWxlQ29ubmVjdGluZyIsImVzY2FwZUlkZW50aWZpZXIiLCJlc2NhcGVMaXRlcmFsIiwiaGFzRXhlY3V0ZWQiLCJ2dCIsIlF1ZXJ5IiwiRHMiLCJ1ZiIsIk1zIiwidmMiLCJScyIsIkZzIiwiZmluZEluZGV4IiwiZG4iLCJjbGllbnQiLCJpZGxlTGlzdGVuZXIiLCJ0aW1lb3V0SWQiLCJmbiIsInluIiwiTmUiLCJfYyIsIl90IiwicmVzdWx0IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJBYyIsIl9yZW1vdmUiLCJtbiIsIm1heFVzZXMiLCJhbGxvd0V4aXRPbklkbGUiLCJtYXhMaWZldGltZVNlY29uZHMiLCJDbGllbnQiLCJBdCIsIl9jbGllbnRzIiwiX2lkbGUiLCJfZXhwaXJlZCIsIldlYWtTZXQiLCJfcGVuZGluZ1F1ZXVlIiwiX2VuZENhbGxiYWNrIiwiZW5kaW5nIiwiZW5kZWQiLCJfaXNGdWxsIiwiX3B1bHNlUXVldWUiLCJfYWNxdWlyZUNsaWVudCIsIm5ld0NsaWVudCIsInJlamVjdCIsInRpbWVkT3V0IiwicmVsZWFzZSIsIl9yZWxlYXNlT25jZSIsInZlcmlmeSIsIl9yZWxlYXNlIiwiX3Bvb2xVc2VDb3VudCIsImhhcyIsImRlbGV0ZSIsIndhaXRpbmdDb3VudCIsImlkbGVDb3VudCIsImV4cGlyZWRDb3VudCIsInRvdGFsQ291bnQiLCJwbiIsIk9zIiwiQ2MiLCJrcyIsIlVzIiwiZmYiLCJJYyIsInZlcnNpb24iLCJkZXNjcmlwdGlvbiIsImtleXdvcmRzIiwiaG9tZXBhZ2UiLCJyZXBvc2l0b3J5IiwidXJsIiwiZGlyZWN0b3J5IiwiYXV0aG9yIiwibWFpbiIsImRlcGVuZGVuY2llcyIsInBncGFzcyIsImRldkRlcGVuZGVuY2llcyIsImFzeW5jIiwiYmx1ZWJpcmQiLCJwZWVyRGVwZW5kZW5jaWVzIiwicGVlckRlcGVuZGVuY2llc01ldGEiLCJvcHRpb25hbCIsInNjcmlwdHMiLCJmaWxlcyIsImxpY2Vuc2UiLCJlbmdpbmVzIiwibm9kZSIsImdpdEhlYWQiLCJRcyIsInBmIiwiTnMiLCJxcyIsIlRjIiwiZ24iLCJRZSIsIl9hcnJheU1vZGUiLCJfZW1pdFJvd0V2ZW50cyIsImluaGVyaXRzIiwiUGMiLCJzcWxTdGF0ZSIsInN0YXRlbWVudFBvc2l0aW9uIiwibWVzc2FnZVByaW1hcnkiLCJzY2hlbWFOYW1lIiwidGFibGVOYW1lIiwiY29sdW1uTmFtZSIsImRhdGFUeXBlTmFtZSIsImNvbnN0cmFpbnROYW1lIiwic291cmNlRmlsZSIsInNvdXJjZUxpbmUiLCJzb3VyY2VGdW5jdGlvbiIsIm5hdGl2ZSIsInBxIiwicmVzdWx0RXJyb3JGaWVsZHMiLCJfZ2V0UHJvbWlzZSIsIl9vbmNlIiwiYXJyYXlNb2RlIiwibmFtZWRRdWVyaWVzIiwiR3MiLCJnZiIsIkhzIiwiQmMiLCJMYyIsIm1mIiwiV3MiLCJSYyIsIkZjIiwianMiLCJaIiwiX3F1ZXJ5UXVldWUiLCJfaGFzQWN0aXZlUXVlcnkiLCJfYWN0aXZlUXVlcnkiLCJyZWxuYW1lIiwiZXh0cmEiLCJ3biIsIlNmIiwiJHMiLCJFZiIsIm50IiwiTWMiLCJEYyIsIk9jIiwia2MiLCJVYyIsInFjIiwiYm4iLCJQb29sIiwiX3Bvb2xzIiwiQ29ubmVjdGlvbiIsIk5PREVfUEdfRk9SQ0VfTkFUSVZFIiwiQ3QiLCJ6cyIsIlNuIiwiQWUiLCJLcyIsIllzIiwiZnVsbFJlc3VsdHMiLCJmZXRjaE9wdGlvbnMiLCJpc29sYXRpb25MZXZlbCIsInJlYWRPbmx5IiwiZGVmZXJyYWJsZSIsInF1ZXJ5Q2FsbGJhY2siLCJyZXN1bHRDYWxsYmFjayIsInBhcmFtcyIsIk5jIiwidHJhbnNhY3Rpb24iLCJ0b1N0cmluZ1RhZyIsInBhcmFtZXRlcml6ZWRRdWVyeSIsInF1ZXJpZXMiLCJtZXRob2QiLCJib2R5Iiwic2UiLCIkIiwic291cmNlRXJyb3IiLCJvayIsImpzb24iLCJyZXN1bHRzIiwibmUiLCJDZSIsIlZzIiwiZmluYWxseSIsIlNlIiwidmlhTmVvbkZldGNoIiwiSnMiLCJFbiIsImNvbmZpZyIsIm5lb25Db25maWciLCJQR0hPU1QiLCJpbXBvcnRLZXkiLCJzaWduIiwieG4iLCJRYyIsInZuIiwiaGFzRmV0Y2hVbnN1cHBvcnRlZExpc3RlbmVycyIsImVuY29kZVVSSUNvbXBvbmVudCIsIlpzIiwiZXhwb3J0X0NsaWVudEJhc2UiLCJDbGllbnRCYXNlIiwiZXhwb3J0X0Nvbm5lY3Rpb24iLCJleHBvcnRfRGF0YWJhc2VFcnJvciIsImV4cG9ydF9RdWVyeSIsImV4cG9ydF9kZWZhdWx0cyIsImV4cG9ydF90eXBlcyIsIk5lb25EYkVycm9yIiwibmVvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neondatabase/serverless/index.mjs\n");

/***/ })

};
;