"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-gyp-build";
exports.ids = ["vendor-chunks/node-gyp-build"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-gyp-build/index.js":
/*!**********************************************!*\
  !*** ./node_modules/node-gyp-build/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst runtimeRequire =  true ? require : 0 // eslint-disable-line\n;\nif (typeof runtimeRequire.addon === \"function\") {\n    module.exports = runtimeRequire.addon.bind(runtimeRequire);\n} else {\n    module.exports = __webpack_require__(/*! ./node-gyp-build.js */ \"(rsc)/./node_modules/node-gyp-build/node-gyp-build.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1neXAtYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGlCQUFpQixLQUErQixHQUFhRSxPQUF1QkEsR0FBR0MsQ0FBT0EsQ0FBQyxzQkFBc0I7O0FBQzNILElBQUksT0FBT0gsZUFBZUksS0FBSyxLQUFLLFlBQVk7SUFDOUNDLE9BQU9DLE9BQU8sR0FBR04sZUFBZUksS0FBSyxDQUFDRyxJQUFJLENBQUNQO0FBQzdDLE9BQU87SUFDTEssd0hBQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL25vZGUtZ3lwLWJ1aWxkL2luZGV4LmpzPzBiNDciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcnVudGltZVJlcXVpcmUgPSB0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXyA9PT0gJ2Z1bmN0aW9uJyA/IF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fIDogcmVxdWlyZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIHJ1bnRpbWVSZXF1aXJlLmFkZG9uID09PSAnZnVuY3Rpb24nKSB7IC8vIGlmIHRoZSBwbGF0Zm9ybSBzdXBwb3J0cyBuYXRpdmUgcmVzb2x2aW5nIHByZWZlciB0aGF0XG4gIG1vZHVsZS5leHBvcnRzID0gcnVudGltZVJlcXVpcmUuYWRkb24uYmluZChydW50aW1lUmVxdWlyZSlcbn0gZWxzZSB7IC8vIGVsc2UgdXNlIHRoZSBydW50aW1lIHZlcnNpb24gaGVyZVxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm9kZS1neXAtYnVpbGQuanMnKVxufVxuIl0sIm5hbWVzIjpbInJ1bnRpbWVSZXF1aXJlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIl9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fIiwicmVxdWlyZSIsImFkZG9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-gyp-build/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-gyp-build/node-gyp-build.js":
/*!*******************************************************!*\
  !*** ./node_modules/node-gyp-build/node-gyp-build.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar os = __webpack_require__(/*! os */ \"os\");\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nvar runtimeRequire =  true ? require : 0 // eslint-disable-line\n;\nvar vars = process.config && process.config.variables || {};\nvar prebuildsOnly = !!process.env.PREBUILDS_ONLY;\nvar abi = process.versions.modules // TODO: support old node where this is undef\n;\nvar runtime = isElectron() ? \"electron\" : isNwjs() ? \"node-webkit\" : \"node\";\nvar arch = process.env.npm_config_arch || os.arch();\nvar platform = process.env.npm_config_platform || os.platform();\nvar libc = process.env.LIBC || (isAlpine(platform) ? \"musl\" : \"glibc\");\nvar armv = process.env.ARM_VERSION || (arch === \"arm64\" ? \"8\" : vars.arm_version) || \"\";\nvar uv = (process.versions.uv || \"\").split(\".\")[0];\nmodule.exports = load;\nfunction load(dir) {\n    return runtimeRequire(load.resolve(dir));\n}\nload.resolve = load.path = function(dir) {\n    dir = path.resolve(dir || \".\");\n    try {\n        var name = runtimeRequire(path.join(dir, \"package.json\")).name.toUpperCase().replace(/-/g, \"_\");\n        if (process.env[name + \"_PREBUILD\"]) dir = process.env[name + \"_PREBUILD\"];\n    } catch (err) {}\n    if (!prebuildsOnly) {\n        var release = getFirst(path.join(dir, \"build/Release\"), matchBuild);\n        if (release) return release;\n        var debug = getFirst(path.join(dir, \"build/Debug\"), matchBuild);\n        if (debug) return debug;\n    }\n    var prebuild = resolve(dir);\n    if (prebuild) return prebuild;\n    var nearby = resolve(path.dirname(process.execPath));\n    if (nearby) return nearby;\n    var target = [\n        \"platform=\" + platform,\n        \"arch=\" + arch,\n        \"runtime=\" + runtime,\n        \"abi=\" + abi,\n        \"uv=\" + uv,\n        armv ? \"armv=\" + armv : \"\",\n        \"libc=\" + libc,\n        \"node=\" + process.versions.node,\n        process.versions.electron ? \"electron=\" + process.versions.electron : \"\",\n         true ? \"webpack=true\" : 0 // eslint-disable-line\n    ].filter(Boolean).join(\" \");\n    throw new Error(\"No native build was found for \" + target + \"\\n    loaded from: \" + dir + \"\\n\");\n    function resolve(dir) {\n        // Find matching \"prebuilds/<platform>-<arch>\" directory\n        var tuples = readdirSync(path.join(dir, \"prebuilds\")).map(parseTuple);\n        var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0];\n        if (!tuple) return;\n        // Find most specific flavor first\n        var prebuilds = path.join(dir, \"prebuilds\", tuple.name);\n        var parsed = readdirSync(prebuilds).map(parseTags);\n        var candidates = parsed.filter(matchTags(runtime, abi));\n        var winner = candidates.sort(compareTags(runtime))[0];\n        if (winner) return path.join(prebuilds, winner.file);\n    }\n};\nfunction readdirSync(dir) {\n    try {\n        return fs.readdirSync(dir);\n    } catch (err) {\n        return [];\n    }\n}\nfunction getFirst(dir, filter) {\n    var files = readdirSync(dir).filter(filter);\n    return files[0] && path.join(dir, files[0]);\n}\nfunction matchBuild(name) {\n    return /\\.node$/.test(name);\n}\nfunction parseTuple(name) {\n    // Example: darwin-x64+arm64\n    var arr = name.split(\"-\");\n    if (arr.length !== 2) return;\n    var platform = arr[0];\n    var architectures = arr[1].split(\"+\");\n    if (!platform) return;\n    if (!architectures.length) return;\n    if (!architectures.every(Boolean)) return;\n    return {\n        name,\n        platform,\n        architectures\n    };\n}\nfunction matchTuple(platform, arch) {\n    return function(tuple) {\n        if (tuple == null) return false;\n        if (tuple.platform !== platform) return false;\n        return tuple.architectures.includes(arch);\n    };\n}\nfunction compareTuples(a, b) {\n    // Prefer single-arch prebuilds over multi-arch\n    return a.architectures.length - b.architectures.length;\n}\nfunction parseTags(file) {\n    var arr = file.split(\".\");\n    var extension = arr.pop();\n    var tags = {\n        file: file,\n        specificity: 0\n    };\n    if (extension !== \"node\") return;\n    for(var i = 0; i < arr.length; i++){\n        var tag = arr[i];\n        if (tag === \"node\" || tag === \"electron\" || tag === \"node-webkit\") {\n            tags.runtime = tag;\n        } else if (tag === \"napi\") {\n            tags.napi = true;\n        } else if (tag.slice(0, 3) === \"abi\") {\n            tags.abi = tag.slice(3);\n        } else if (tag.slice(0, 2) === \"uv\") {\n            tags.uv = tag.slice(2);\n        } else if (tag.slice(0, 4) === \"armv\") {\n            tags.armv = tag.slice(4);\n        } else if (tag === \"glibc\" || tag === \"musl\") {\n            tags.libc = tag;\n        } else {\n            continue;\n        }\n        tags.specificity++;\n    }\n    return tags;\n}\nfunction matchTags(runtime, abi) {\n    return function(tags) {\n        if (tags == null) return false;\n        if (tags.runtime && tags.runtime !== runtime && !runtimeAgnostic(tags)) return false;\n        if (tags.abi && tags.abi !== abi && !tags.napi) return false;\n        if (tags.uv && tags.uv !== uv) return false;\n        if (tags.armv && tags.armv !== armv) return false;\n        if (tags.libc && tags.libc !== libc) return false;\n        return true;\n    };\n}\nfunction runtimeAgnostic(tags) {\n    return tags.runtime === \"node\" && tags.napi;\n}\nfunction compareTags(runtime) {\n    // Precedence: non-agnostic runtime, abi over napi, then by specificity.\n    return function(a, b) {\n        if (a.runtime !== b.runtime) {\n            return a.runtime === runtime ? -1 : 1;\n        } else if (a.abi !== b.abi) {\n            return a.abi ? -1 : 1;\n        } else if (a.specificity !== b.specificity) {\n            return a.specificity > b.specificity ? -1 : 1;\n        } else {\n            return 0;\n        }\n    };\n}\nfunction isNwjs() {\n    return !!(process.versions && process.versions.nw);\n}\nfunction isElectron() {\n    if (process.versions && process.versions.electron) return true;\n    if (process.env.ELECTRON_RUN_AS_NODE) return true;\n    return  false && 0;\n}\nfunction isAlpine(platform) {\n    return platform === \"linux\" && fs.existsSync(\"/etc/alpine-release\");\n}\n// Exposed for unit tests\n// TODO: move to lib\nload.parseTags = parseTags;\nload.matchTags = matchTags;\nload.compareTags = compareTags;\nload.parseTuple = parseTuple;\nload.matchTuple = matchTuple;\nload.compareTuples = compareTuples;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-gyp-build/node-gyp-build.js\n");

/***/ })

};
;